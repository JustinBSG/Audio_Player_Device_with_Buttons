
test_fatfs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042dc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080043e8  080043e8  000053e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004530  08004530  00006074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004530  08004530  00006074  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004530  08004530  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004530  08004530  00005530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004534  08004534  00005534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08004538  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000074  080045ac  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  080045ac  00006500  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca1b  00000000  00000000  0000609d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002843  00000000  00000000  00012ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00015300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000928  00000000  00000000  00015f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ab9  00000000  00000000  00016838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001128f  00000000  00000000  0002f2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085379  00000000  00000000  00040580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c58f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003458  00000000  00000000  000c593c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c8d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080043d0 	.word	0x080043d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080043d0 	.word	0x080043d0

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_GPIO_Init+0x74>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a16      	ldr	r2, [pc, #88]	@ (80001c0 <MX_GPIO_Init+0x74>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_GPIO_Init+0x74>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b11      	ldr	r3, [pc, #68]	@ (80001c0 <MX_GPIO_Init+0x74>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a10      	ldr	r2, [pc, #64]	@ (80001c0 <MX_GPIO_Init+0x74>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b0e      	ldr	r3, [pc, #56]	@ (80001c0 <MX_GPIO_Init+0x74>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2110      	movs	r1, #16
 8000194:	480b      	ldr	r0, [pc, #44]	@ (80001c4 <MX_GPIO_Init+0x78>)
 8000196:	f000 fdeb 	bl	8000d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800019a:	2310      	movs	r3, #16
 800019c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800019e:	2301      	movs	r3, #1
 80001a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001a2:	2301      	movs	r3, #1
 80001a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001a6:	2302      	movs	r3, #2
 80001a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80001aa:	f107 0308 	add.w	r3, r7, #8
 80001ae:	4619      	mov	r1, r3
 80001b0:	4804      	ldr	r0, [pc, #16]	@ (80001c4 <MX_GPIO_Init+0x78>)
 80001b2:	f000 fc59 	bl	8000a68 <HAL_GPIO_Init>

}
 80001b6:	bf00      	nop
 80001b8:	3718      	adds	r7, #24
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40021000 	.word	0x40021000
 80001c4:	40010800 	.word	0x40010800

080001c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fae2 	bl	8000794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f824 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f7ff ffba 	bl	800014c <MX_GPIO_Init>
  MX_SPI1_Init();
 80001d8:	f000 f926 	bl	8000428 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 fa3e 	bl	800065c <MX_USART1_UART_Init>
  // MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  sd_card_init();
 80001e0:	f000 f867 	bl	80002b2 <sd_card_init>
  HAL_UART_Transmit(&huart1, (uint8_t *)"SD Card Initialized, UART!\n", 29, HAL_MAX_DELAY);
 80001e4:	f04f 33ff 	mov.w	r3, #4294967295
 80001e8:	221d      	movs	r2, #29
 80001ea:	4909      	ldr	r1, [pc, #36]	@ (8000210 <main+0x48>)
 80001ec:	4809      	ldr	r0, [pc, #36]	@ (8000214 <main+0x4c>)
 80001ee:	f001 fe62 	bl	8001eb6 <HAL_UART_Transmit>
  sd_card_test();
 80001f2:	f000 f865 	bl	80002c0 <sd_card_test>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Transmit(&huart1, (uint8_t *)"Blocking\n", 13, HAL_MAX_DELAY);
 80001f6:	f04f 33ff 	mov.w	r3, #4294967295
 80001fa:	220d      	movs	r2, #13
 80001fc:	4906      	ldr	r1, [pc, #24]	@ (8000218 <main+0x50>)
 80001fe:	4805      	ldr	r0, [pc, #20]	@ (8000214 <main+0x4c>)
 8000200:	f001 fe59 	bl	8001eb6 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000204:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000208:	f000 fb26 	bl	8000858 <HAL_Delay>
    HAL_UART_Transmit(&huart1, (uint8_t *)"Blocking\n", 13, HAL_MAX_DELAY);
 800020c:	bf00      	nop
 800020e:	e7f2      	b.n	80001f6 <main+0x2e>
 8000210:	080043e8 	.word	0x080043e8
 8000214:	2000032c 	.word	0x2000032c
 8000218:	08004404 	.word	0x08004404

0800021c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b090      	sub	sp, #64	@ 0x40
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0318 	add.w	r3, r7, #24
 8000226:	2228      	movs	r2, #40	@ 0x28
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f003 fc42 	bl	8003ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023e:	2301      	movs	r3, #1
 8000240:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000242:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000246:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000250:	2302      	movs	r3, #2
 8000252:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000254:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000258:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800025e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000260:	f107 0318 	add.w	r3, r7, #24
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fd9b 	bl	8000da0 <HAL_RCC_OscConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x58>
    Error_Handler();
 8000270:	f000 f819 	bl	80002a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000274:	230f      	movs	r3, #15
 8000276:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000278:	2302      	movs	r3, #2
 800027a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2102      	movs	r1, #2
 800028e:	4618      	mov	r0, r3
 8000290:	f001 f808 	bl	80012a4 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x82>
    Error_Handler();
 800029a:	f000 f804 	bl	80002a6 <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3740      	adds	r7, #64	@ 0x40
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80002a6:	b480      	push	{r7}
 80002a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002aa:	b672      	cpsid	i
}
 80002ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80002ae:	bf00      	nop
 80002b0:	e7fd      	b.n	80002ae <Error_Handler+0x8>

080002b2 <sd_card_init>:
FRESULT err = FR_OK;  // Result
UINT write_count, read_count;
DWORD free_clusters;
uint32_t total_size, free_space;

void sd_card_init(void) {
 80002b2:	b580      	push	{r7, lr}
 80002b4:	af00      	add	r7, sp, #0
  MX_FATFS_Init();
 80002b6:	f001 ffd3 	bl	8002260 <MX_FATFS_Init>
  // TODO: need mounting before any file operations
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <sd_card_test>:

FRESULT sd_card_read_file(const char* filename, uint8_t* buffer, UINT bytes_to_read, UINT* bytes_read) {}

FRESULT sd_card_write_file(const char* filename, const uint8_t* data, UINT data_size, UINT* bytes_written) {}

void sd_card_test(void) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80002c6:	af00      	add	r7, sp, #0
  char data[256];

  // mount the sd card
  err = f_mount(&fatfs, "", 1);
 80002c8:	2201      	movs	r2, #1
 80002ca:	494a      	ldr	r1, [pc, #296]	@ (80003f4 <sd_card_test+0x134>)
 80002cc:	484a      	ldr	r0, [pc, #296]	@ (80003f8 <sd_card_test+0x138>)
 80002ce:	f003 fa5f 	bl	8003790 <f_mount>
 80002d2:	4603      	mov	r3, r0
 80002d4:	461a      	mov	r2, r3
 80002d6:	4b49      	ldr	r3, [pc, #292]	@ (80003fc <sd_card_test+0x13c>)
 80002d8:	701a      	strb	r2, [r3, #0]
  char uart_buffer[256];
  if (err != FR_OK) {
 80002da:	4b48      	ldr	r3, [pc, #288]	@ (80003fc <sd_card_test+0x13c>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d010      	beq.n	8000304 <sd_card_test+0x44>
    sprintf(uart_buffer, "f_mount error: %d\n", err);
 80002e2:	4b46      	ldr	r3, [pc, #280]	@ (80003fc <sd_card_test+0x13c>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	461a      	mov	r2, r3
 80002e8:	463b      	mov	r3, r7
 80002ea:	4945      	ldr	r1, [pc, #276]	@ (8000400 <sd_card_test+0x140>)
 80002ec:	4618      	mov	r0, r3
 80002ee:	f003 fbbf 	bl	8003a70 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, sizeof(uart_buffer) - 1, HAL_MAX_DELAY);
 80002f2:	4639      	mov	r1, r7
 80002f4:	f04f 33ff 	mov.w	r3, #4294967295
 80002f8:	22ff      	movs	r2, #255	@ 0xff
 80002fa:	4842      	ldr	r0, [pc, #264]	@ (8000404 <sd_card_test+0x144>)
 80002fc:	f001 fddb 	bl	8001eb6 <HAL_UART_Transmit>
    while (1);
 8000300:	bf00      	nop
 8000302:	e7fd      	b.n	8000300 <sd_card_test+0x40>
  }
  sprintf(uart_buffer, "SD card mounted successfully.\n");
 8000304:	463b      	mov	r3, r7
 8000306:	4940      	ldr	r1, [pc, #256]	@ (8000408 <sd_card_test+0x148>)
 8000308:	4618      	mov	r0, r3
 800030a:	f003 fbb1 	bl	8003a70 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, sizeof(uart_buffer) - 1, HAL_MAX_DELAY);
 800030e:	4639      	mov	r1, r7
 8000310:	f04f 33ff 	mov.w	r3, #4294967295
 8000314:	22ff      	movs	r2, #255	@ 0xff
 8000316:	483b      	ldr	r0, [pc, #236]	@ (8000404 <sd_card_test+0x144>)
 8000318:	f001 fdcd 	bl	8001eb6 <HAL_UART_Transmit>

  // get and print the sd card size and free space
  err = f_getfree("", &free_clusters, &fatfs);
 800031c:	4a36      	ldr	r2, [pc, #216]	@ (80003f8 <sd_card_test+0x138>)
 800031e:	493b      	ldr	r1, [pc, #236]	@ (800040c <sd_card_test+0x14c>)
 8000320:	4834      	ldr	r0, [pc, #208]	@ (80003f4 <sd_card_test+0x134>)
 8000322:	f003 fa7d 	bl	8003820 <f_getfree>
 8000326:	4603      	mov	r3, r0
 8000328:	461a      	mov	r2, r3
 800032a:	4b34      	ldr	r3, [pc, #208]	@ (80003fc <sd_card_test+0x13c>)
 800032c:	701a      	strb	r2, [r3, #0]
  if (err != FR_OK) {
 800032e:	4b33      	ldr	r3, [pc, #204]	@ (80003fc <sd_card_test+0x13c>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d010      	beq.n	8000358 <sd_card_test+0x98>
    sprintf(uart_buffer, "f_getfree error: %d\n", err);
 8000336:	4b31      	ldr	r3, [pc, #196]	@ (80003fc <sd_card_test+0x13c>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	461a      	mov	r2, r3
 800033c:	463b      	mov	r3, r7
 800033e:	4934      	ldr	r1, [pc, #208]	@ (8000410 <sd_card_test+0x150>)
 8000340:	4618      	mov	r0, r3
 8000342:	f003 fb95 	bl	8003a70 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, sizeof(uart_buffer) - 1, HAL_MAX_DELAY);
 8000346:	4639      	mov	r1, r7
 8000348:	f04f 33ff 	mov.w	r3, #4294967295
 800034c:	22ff      	movs	r2, #255	@ 0xff
 800034e:	482d      	ldr	r0, [pc, #180]	@ (8000404 <sd_card_test+0x144>)
 8000350:	f001 fdb1 	bl	8001eb6 <HAL_UART_Transmit>
    while (1);
 8000354:	bf00      	nop
 8000356:	e7fd      	b.n	8000354 <sd_card_test+0x94>
  }
  total_size = (fatfs.n_fatent - 2) * fatfs.csize / 2; // in KB
 8000358:	4b27      	ldr	r3, [pc, #156]	@ (80003f8 <sd_card_test+0x138>)
 800035a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800035e:	3b02      	subs	r3, #2
 8000360:	4a25      	ldr	r2, [pc, #148]	@ (80003f8 <sd_card_test+0x138>)
 8000362:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8000366:	fb02 f303 	mul.w	r3, r2, r3
 800036a:	085b      	lsrs	r3, r3, #1
 800036c:	4a29      	ldr	r2, [pc, #164]	@ (8000414 <sd_card_test+0x154>)
 800036e:	6013      	str	r3, [r2, #0]
  free_space = free_clusters * fatfs.csize / 2;        // in KB
 8000370:	4b21      	ldr	r3, [pc, #132]	@ (80003f8 <sd_card_test+0x138>)
 8000372:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8000376:	461a      	mov	r2, r3
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <sd_card_test+0x14c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	fb02 f303 	mul.w	r3, r2, r3
 8000380:	085b      	lsrs	r3, r3, #1
 8000382:	4a25      	ldr	r2, [pc, #148]	@ (8000418 <sd_card_test+0x158>)
 8000384:	6013      	str	r3, [r2, #0]
  sprintf(uart_buffer, "SD card total size: %lu KB, free space: %lu KB\n", total_size, free_space);
 8000386:	4b23      	ldr	r3, [pc, #140]	@ (8000414 <sd_card_test+0x154>)
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	4b23      	ldr	r3, [pc, #140]	@ (8000418 <sd_card_test+0x158>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4638      	mov	r0, r7
 8000390:	4922      	ldr	r1, [pc, #136]	@ (800041c <sd_card_test+0x15c>)
 8000392:	f003 fb6d 	bl	8003a70 <siprintf>
  // }
  // sprintf(uart_buffer, "File deleted successfully.\n");
  // HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, sizeof(uart_buffer) - 1, HAL_MAX_DELAY);

  // unmount the sd card
  err = f_mount(NULL, "", 0);
 8000396:	2200      	movs	r2, #0
 8000398:	4916      	ldr	r1, [pc, #88]	@ (80003f4 <sd_card_test+0x134>)
 800039a:	2000      	movs	r0, #0
 800039c:	f003 f9f8 	bl	8003790 <f_mount>
 80003a0:	4603      	mov	r3, r0
 80003a2:	461a      	mov	r2, r3
 80003a4:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <sd_card_test+0x13c>)
 80003a6:	701a      	strb	r2, [r3, #0]
  if (err != FR_OK) {
 80003a8:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <sd_card_test+0x13c>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d010      	beq.n	80003d2 <sd_card_test+0x112>
    sprintf(uart_buffer, "f_mount unmount error: %d\n", err);
 80003b0:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <sd_card_test+0x13c>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	461a      	mov	r2, r3
 80003b6:	463b      	mov	r3, r7
 80003b8:	4919      	ldr	r1, [pc, #100]	@ (8000420 <sd_card_test+0x160>)
 80003ba:	4618      	mov	r0, r3
 80003bc:	f003 fb58 	bl	8003a70 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, sizeof(uart_buffer) - 1, HAL_MAX_DELAY);
 80003c0:	4639      	mov	r1, r7
 80003c2:	f04f 33ff 	mov.w	r3, #4294967295
 80003c6:	22ff      	movs	r2, #255	@ 0xff
 80003c8:	480e      	ldr	r0, [pc, #56]	@ (8000404 <sd_card_test+0x144>)
 80003ca:	f001 fd74 	bl	8001eb6 <HAL_UART_Transmit>
    while (1);
 80003ce:	bf00      	nop
 80003d0:	e7fd      	b.n	80003ce <sd_card_test+0x10e>
  }
  sprintf(uart_buffer, "SD card unmounted successfully.\n");
 80003d2:	463b      	mov	r3, r7
 80003d4:	4913      	ldr	r1, [pc, #76]	@ (8000424 <sd_card_test+0x164>)
 80003d6:	4618      	mov	r0, r3
 80003d8:	f003 fb4a 	bl	8003a70 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, sizeof(uart_buffer) - 1, HAL_MAX_DELAY);
 80003dc:	4639      	mov	r1, r7
 80003de:	f04f 33ff 	mov.w	r3, #4294967295
 80003e2:	22ff      	movs	r2, #255	@ 0xff
 80003e4:	4807      	ldr	r0, [pc, #28]	@ (8000404 <sd_card_test+0x144>)
 80003e6:	f001 fd66 	bl	8001eb6 <HAL_UART_Transmit>
 80003ea:	bf00      	nop
 80003ec:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	08004410 	.word	0x08004410
 80003f8:	20000090 	.word	0x20000090
 80003fc:	200002c0 	.word	0x200002c0
 8000400:	08004414 	.word	0x08004414
 8000404:	2000032c 	.word	0x2000032c
 8000408:	08004428 	.word	0x08004428
 800040c:	200002c4 	.word	0x200002c4
 8000410:	08004448 	.word	0x08004448
 8000414:	200002c8 	.word	0x200002c8
 8000418:	200002cc 	.word	0x200002cc
 800041c:	08004460 	.word	0x08004460
 8000420:	08004490 	.word	0x08004490
 8000424:	080044ac 	.word	0x080044ac

08000428 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800042c:	4b17      	ldr	r3, [pc, #92]	@ (800048c <MX_SPI1_Init+0x64>)
 800042e:	4a18      	ldr	r2, [pc, #96]	@ (8000490 <MX_SPI1_Init+0x68>)
 8000430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000432:	4b16      	ldr	r3, [pc, #88]	@ (800048c <MX_SPI1_Init+0x64>)
 8000434:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800043a:	4b14      	ldr	r3, [pc, #80]	@ (800048c <MX_SPI1_Init+0x64>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000440:	4b12      	ldr	r3, [pc, #72]	@ (800048c <MX_SPI1_Init+0x64>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000446:	4b11      	ldr	r3, [pc, #68]	@ (800048c <MX_SPI1_Init+0x64>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800044c:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <MX_SPI1_Init+0x64>)
 800044e:	2200      	movs	r2, #0
 8000450:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <MX_SPI1_Init+0x64>)
 8000454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000458:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800045a:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <MX_SPI1_Init+0x64>)
 800045c:	2238      	movs	r2, #56	@ 0x38
 800045e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000460:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <MX_SPI1_Init+0x64>)
 8000462:	2200      	movs	r2, #0
 8000464:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000466:	4b09      	ldr	r3, [pc, #36]	@ (800048c <MX_SPI1_Init+0x64>)
 8000468:	2200      	movs	r2, #0
 800046a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800046c:	4b07      	ldr	r3, [pc, #28]	@ (800048c <MX_SPI1_Init+0x64>)
 800046e:	2200      	movs	r2, #0
 8000470:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000472:	4b06      	ldr	r3, [pc, #24]	@ (800048c <MX_SPI1_Init+0x64>)
 8000474:	220a      	movs	r2, #10
 8000476:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000478:	4804      	ldr	r0, [pc, #16]	@ (800048c <MX_SPI1_Init+0x64>)
 800047a:	f001 f8a1 	bl	80015c0 <HAL_SPI_Init>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000484:	f7ff ff0f 	bl	80002a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	200002d0 	.word	0x200002d0
 8000490:	40013000 	.word	0x40013000

08000494 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a1b      	ldr	r2, [pc, #108]	@ (800051c <HAL_SPI_MspInit+0x88>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d12f      	bne.n	8000514 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000520 <HAL_SPI_MspInit+0x8c>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a19      	ldr	r2, [pc, #100]	@ (8000520 <HAL_SPI_MspInit+0x8c>)
 80004ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b17      	ldr	r3, [pc, #92]	@ (8000520 <HAL_SPI_MspInit+0x8c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b14      	ldr	r3, [pc, #80]	@ (8000520 <HAL_SPI_MspInit+0x8c>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a13      	ldr	r2, [pc, #76]	@ (8000520 <HAL_SPI_MspInit+0x8c>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <HAL_SPI_MspInit+0x8c>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MOSI_Pin;
 80004e4:	23a0      	movs	r3, #160	@ 0xa0
 80004e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e8:	2302      	movs	r3, #2
 80004ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ec:	2303      	movs	r3, #3
 80004ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	480b      	ldr	r0, [pc, #44]	@ (8000524 <HAL_SPI_MspInit+0x90>)
 80004f8:	f000 fab6 	bl	8000a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin;
 80004fc:	2340      	movs	r3, #64	@ 0x40
 80004fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000504:	2301      	movs	r3, #1
 8000506:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	4619      	mov	r1, r3
 800050e:	4805      	ldr	r0, [pc, #20]	@ (8000524 <HAL_SPI_MspInit+0x90>)
 8000510:	f000 faaa 	bl	8000a68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000514:	bf00      	nop
 8000516:	3720      	adds	r7, #32
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40013000 	.word	0x40013000
 8000520:	40021000 	.word	0x40021000
 8000524:	40010800 	.word	0x40010800

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052e:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <HAL_MspInit+0x5c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a14      	ldr	r2, [pc, #80]	@ (8000584 <HAL_MspInit+0x5c>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <HAL_MspInit+0x5c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <HAL_MspInit+0x5c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	4a0e      	ldr	r2, [pc, #56]	@ (8000584 <HAL_MspInit+0x5c>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000550:	61d3      	str	r3, [r2, #28]
 8000552:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <HAL_MspInit+0x5c>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055e:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <HAL_MspInit+0x60>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	4a04      	ldr	r2, [pc, #16]	@ (8000588 <HAL_MspInit+0x60>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000
 8000588:	40010000 	.word	0x40010000

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <NMI_Handler+0x4>

08000594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <HardFault_Handler+0x4>

0800059c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <MemManage_Handler+0x4>

080005a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <BusFault_Handler+0x4>

080005ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <UsageFault_Handler+0x4>

080005b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005dc:	f000 f920 	bl	8000820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ec:	4a14      	ldr	r2, [pc, #80]	@ (8000640 <_sbrk+0x5c>)
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <_sbrk+0x60>)
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f8:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d102      	bne.n	8000606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <_sbrk+0x64>)
 8000602:	4a12      	ldr	r2, [pc, #72]	@ (800064c <_sbrk+0x68>)
 8000604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000606:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	429a      	cmp	r2, r3
 8000612:	d207      	bcs.n	8000624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000614:	f003 fa56 	bl	8003ac4 <__errno>
 8000618:	4603      	mov	r3, r0
 800061a:	220c      	movs	r2, #12
 800061c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	e009      	b.n	8000638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000624:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <_sbrk+0x64>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062a:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	4a05      	ldr	r2, [pc, #20]	@ (8000648 <_sbrk+0x64>)
 8000634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000636:	68fb      	ldr	r3, [r7, #12]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20005000 	.word	0x20005000
 8000644:	00000400 	.word	0x00000400
 8000648:	20000328 	.word	0x20000328
 800064c:	20000500 	.word	0x20000500

08000650 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000660:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000662:	4a12      	ldr	r2, [pc, #72]	@ (80006ac <MX_USART1_UART_Init+0x50>)
 8000664:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000666:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <MX_USART1_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_USART1_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000694:	f001 fbbf 	bl	8001e16 <HAL_UART_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800069e:	f7ff fe02 	bl	80002a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000032c 	.word	0x2000032c
 80006ac:	40013800 	.word	0x40013800

080006b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a1c      	ldr	r2, [pc, #112]	@ (800073c <HAL_UART_MspInit+0x8c>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d131      	bne.n	8000734 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <HAL_UART_MspInit+0x90>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000740 <HAL_UART_MspInit+0x90>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <HAL_UART_MspInit+0x90>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <HAL_UART_MspInit+0x90>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a14      	ldr	r2, [pc, #80]	@ (8000740 <HAL_UART_MspInit+0x90>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <HAL_UART_MspInit+0x90>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000700:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000704:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	4619      	mov	r1, r3
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <HAL_UART_MspInit+0x94>)
 8000716:	f000 f9a7 	bl	8000a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800071a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800071e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <HAL_UART_MspInit+0x94>)
 8000730:	f000 f99a 	bl	8000a68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40013800 	.word	0x40013800
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800

08000748 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000748:	f7ff ff82 	bl	8000650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480b      	ldr	r0, [pc, #44]	@ (800077c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800074e:	490c      	ldr	r1, [pc, #48]	@ (8000780 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000750:	4a0c      	ldr	r2, [pc, #48]	@ (8000784 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a09      	ldr	r2, [pc, #36]	@ (8000788 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000764:	4c09      	ldr	r4, [pc, #36]	@ (800078c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000772:	f003 f9ad 	bl	8003ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000776:	f7ff fd27 	bl	80001c8 <main>
  bx lr
 800077a:	4770      	bx	lr
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000780:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000784:	08004538 	.word	0x08004538
  ldr r2, =_sbss
 8000788:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800078c:	20000500 	.word	0x20000500

08000790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC1_2_IRQHandler>
	...

08000794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <HAL_Init+0x28>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a07      	ldr	r2, [pc, #28]	@ (80007bc <HAL_Init+0x28>)
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a4:	2003      	movs	r0, #3
 80007a6:	f000 f92b 	bl	8000a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007aa:	200f      	movs	r0, #15
 80007ac:	f000 f808 	bl	80007c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b0:	f7ff feba 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <HAL_InitTick+0x54>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <HAL_InitTick+0x58>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007da:	fbb2 f3f3 	udiv	r3, r2, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f935 	bl	8000a4e <HAL_SYSTICK_Config>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00e      	b.n	800080c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b0f      	cmp	r3, #15
 80007f2:	d80a      	bhi.n	800080a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f4:	2200      	movs	r2, #0
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f000 f90b 	bl	8000a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000800:	4a06      	ldr	r2, [pc, #24]	@ (800081c <HAL_InitTick+0x5c>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
 8000808:	e000      	b.n	800080c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000000 	.word	0x20000000
 8000818:	20000008 	.word	0x20000008
 800081c:	20000004 	.word	0x20000004

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <HAL_IncTick+0x1c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_IncTick+0x20>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4413      	add	r3, r2
 8000830:	4a03      	ldr	r2, [pc, #12]	@ (8000840 <HAL_IncTick+0x20>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000008 	.word	0x20000008
 8000840:	20000374 	.word	0x20000374

08000844 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return uwTick;
 8000848:	4b02      	ldr	r3, [pc, #8]	@ (8000854 <HAL_GetTick+0x10>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	20000374 	.word	0x20000374

08000858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000860:	f7ff fff0 	bl	8000844 <HAL_GetTick>
 8000864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000870:	d005      	beq.n	800087e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000872:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <HAL_Delay+0x44>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4413      	add	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800087e:	bf00      	nop
 8000880:	f7ff ffe0 	bl	8000844 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	429a      	cmp	r2, r3
 800088e:	d8f7      	bhi.n	8000880 <HAL_Delay+0x28>
  {
  }
}
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000008 	.word	0x20000008

080008a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008bc:	4013      	ands	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d2:	4a04      	ldr	r2, [pc, #16]	@ (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	60d3      	str	r3, [r2, #12]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ec:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <__NVIC_GetPriorityGrouping+0x18>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	f003 0307 	and.w	r3, r3, #7
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	db0a      	blt.n	800092e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	490c      	ldr	r1, [pc, #48]	@ (8000950 <__NVIC_SetPriority+0x4c>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	0112      	lsls	r2, r2, #4
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	440b      	add	r3, r1
 8000928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800092c:	e00a      	b.n	8000944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4908      	ldr	r1, [pc, #32]	@ (8000954 <__NVIC_SetPriority+0x50>)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	3b04      	subs	r3, #4
 800093c:	0112      	lsls	r2, r2, #4
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	440b      	add	r3, r1
 8000942:	761a      	strb	r2, [r3, #24]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000e100 	.word	0xe000e100
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	@ 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f1c3 0307 	rsb	r3, r3, #7
 8000972:	2b04      	cmp	r3, #4
 8000974:	bf28      	it	cs
 8000976:	2304      	movcs	r3, #4
 8000978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3304      	adds	r3, #4
 800097e:	2b06      	cmp	r3, #6
 8000980:	d902      	bls.n	8000988 <NVIC_EncodePriority+0x30>
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3b03      	subs	r3, #3
 8000986:	e000      	b.n	800098a <NVIC_EncodePriority+0x32>
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	f04f 32ff 	mov.w	r2, #4294967295
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43da      	mvns	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a0:	f04f 31ff 	mov.w	r1, #4294967295
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	43d9      	mvns	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	4313      	orrs	r3, r2
         );
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3724      	adds	r7, #36	@ 0x24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009cc:	d301      	bcc.n	80009d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00f      	b.n	80009f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <SysTick_Config+0x40>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009da:	210f      	movs	r1, #15
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f7ff ff90 	bl	8000904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <SysTick_Config+0x40>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ea:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <SysTick_Config+0x40>)
 80009ec:	2207      	movs	r2, #7
 80009ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	e000e010 	.word	0xe000e010

08000a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ff49 	bl	80008a0 <__NVIC_SetPriorityGrouping>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a28:	f7ff ff5e 	bl	80008e8 <__NVIC_GetPriorityGrouping>
 8000a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	6978      	ldr	r0, [r7, #20]
 8000a34:	f7ff ff90 	bl	8000958 <NVIC_EncodePriority>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff5f 	bl	8000904 <__NVIC_SetPriority>
}
 8000a46:	bf00      	nop
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff ffb0 	bl	80009bc <SysTick_Config>
 8000a5c:	4603      	mov	r3, r0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b08b      	sub	sp, #44	@ 0x2c
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7a:	e169      	b.n	8000d50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	69fa      	ldr	r2, [r7, #28]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	f040 8158 	bne.w	8000d4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	4a9a      	ldr	r2, [pc, #616]	@ (8000d08 <HAL_GPIO_Init+0x2a0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d05e      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000aa4:	4a98      	ldr	r2, [pc, #608]	@ (8000d08 <HAL_GPIO_Init+0x2a0>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d875      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000aaa:	4a98      	ldr	r2, [pc, #608]	@ (8000d0c <HAL_GPIO_Init+0x2a4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d058      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000ab0:	4a96      	ldr	r2, [pc, #600]	@ (8000d0c <HAL_GPIO_Init+0x2a4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d86f      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ab6:	4a96      	ldr	r2, [pc, #600]	@ (8000d10 <HAL_GPIO_Init+0x2a8>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d052      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000abc:	4a94      	ldr	r2, [pc, #592]	@ (8000d10 <HAL_GPIO_Init+0x2a8>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d869      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ac2:	4a94      	ldr	r2, [pc, #592]	@ (8000d14 <HAL_GPIO_Init+0x2ac>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d04c      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000ac8:	4a92      	ldr	r2, [pc, #584]	@ (8000d14 <HAL_GPIO_Init+0x2ac>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d863      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ace:	4a92      	ldr	r2, [pc, #584]	@ (8000d18 <HAL_GPIO_Init+0x2b0>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d046      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000ad4:	4a90      	ldr	r2, [pc, #576]	@ (8000d18 <HAL_GPIO_Init+0x2b0>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d85d      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ada:	2b12      	cmp	r3, #18
 8000adc:	d82a      	bhi.n	8000b34 <HAL_GPIO_Init+0xcc>
 8000ade:	2b12      	cmp	r3, #18
 8000ae0:	d859      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae8 <HAL_GPIO_Init+0x80>)
 8000ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae8:	08000b63 	.word	0x08000b63
 8000aec:	08000b3d 	.word	0x08000b3d
 8000af0:	08000b4f 	.word	0x08000b4f
 8000af4:	08000b91 	.word	0x08000b91
 8000af8:	08000b97 	.word	0x08000b97
 8000afc:	08000b97 	.word	0x08000b97
 8000b00:	08000b97 	.word	0x08000b97
 8000b04:	08000b97 	.word	0x08000b97
 8000b08:	08000b97 	.word	0x08000b97
 8000b0c:	08000b97 	.word	0x08000b97
 8000b10:	08000b97 	.word	0x08000b97
 8000b14:	08000b97 	.word	0x08000b97
 8000b18:	08000b97 	.word	0x08000b97
 8000b1c:	08000b97 	.word	0x08000b97
 8000b20:	08000b97 	.word	0x08000b97
 8000b24:	08000b97 	.word	0x08000b97
 8000b28:	08000b97 	.word	0x08000b97
 8000b2c:	08000b45 	.word	0x08000b45
 8000b30:	08000b59 	.word	0x08000b59
 8000b34:	4a79      	ldr	r2, [pc, #484]	@ (8000d1c <HAL_GPIO_Init+0x2b4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d013      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b3a:	e02c      	b.n	8000b96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	623b      	str	r3, [r7, #32]
          break;
 8000b42:	e029      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	623b      	str	r3, [r7, #32]
          break;
 8000b4c:	e024      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	3308      	adds	r3, #8
 8000b54:	623b      	str	r3, [r7, #32]
          break;
 8000b56:	e01f      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	330c      	adds	r3, #12
 8000b5e:	623b      	str	r3, [r7, #32]
          break;
 8000b60:	e01a      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d102      	bne.n	8000b70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	623b      	str	r3, [r7, #32]
          break;
 8000b6e:	e013      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d105      	bne.n	8000b84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69fa      	ldr	r2, [r7, #28]
 8000b80:	611a      	str	r2, [r3, #16]
          break;
 8000b82:	e009      	b.n	8000b98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b84:	2308      	movs	r3, #8
 8000b86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69fa      	ldr	r2, [r7, #28]
 8000b8c:	615a      	str	r2, [r3, #20]
          break;
 8000b8e:	e003      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
          break;
 8000b94:	e000      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          break;
 8000b96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	2bff      	cmp	r3, #255	@ 0xff
 8000b9c:	d801      	bhi.n	8000ba2 <HAL_GPIO_Init+0x13a>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	e001      	b.n	8000ba6 <HAL_GPIO_Init+0x13e>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	2bff      	cmp	r3, #255	@ 0xff
 8000bac:	d802      	bhi.n	8000bb4 <HAL_GPIO_Init+0x14c>
 8000bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	e002      	b.n	8000bba <HAL_GPIO_Init+0x152>
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb6:	3b08      	subs	r3, #8
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	210f      	movs	r1, #15
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	401a      	ands	r2, r3
 8000bcc:	6a39      	ldr	r1, [r7, #32]
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 80b1 	beq.w	8000d4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000be8:	4b4d      	ldr	r3, [pc, #308]	@ (8000d20 <HAL_GPIO_Init+0x2b8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a4c      	ldr	r2, [pc, #304]	@ (8000d20 <HAL_GPIO_Init+0x2b8>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8000d20 <HAL_GPIO_Init+0x2b8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c00:	4a48      	ldr	r2, [pc, #288]	@ (8000d24 <HAL_GPIO_Init+0x2bc>)
 8000c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	3302      	adds	r3, #2
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	220f      	movs	r2, #15
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a40      	ldr	r2, [pc, #256]	@ (8000d28 <HAL_GPIO_Init+0x2c0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d013      	beq.n	8000c54 <HAL_GPIO_Init+0x1ec>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d2c <HAL_GPIO_Init+0x2c4>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d00d      	beq.n	8000c50 <HAL_GPIO_Init+0x1e8>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a3e      	ldr	r2, [pc, #248]	@ (8000d30 <HAL_GPIO_Init+0x2c8>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d007      	beq.n	8000c4c <HAL_GPIO_Init+0x1e4>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d34 <HAL_GPIO_Init+0x2cc>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d101      	bne.n	8000c48 <HAL_GPIO_Init+0x1e0>
 8000c44:	2303      	movs	r3, #3
 8000c46:	e006      	b.n	8000c56 <HAL_GPIO_Init+0x1ee>
 8000c48:	2304      	movs	r3, #4
 8000c4a:	e004      	b.n	8000c56 <HAL_GPIO_Init+0x1ee>
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	e002      	b.n	8000c56 <HAL_GPIO_Init+0x1ee>
 8000c50:	2301      	movs	r3, #1
 8000c52:	e000      	b.n	8000c56 <HAL_GPIO_Init+0x1ee>
 8000c54:	2300      	movs	r3, #0
 8000c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c58:	f002 0203 	and.w	r2, r2, #3
 8000c5c:	0092      	lsls	r2, r2, #2
 8000c5e:	4093      	lsls	r3, r2
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c66:	492f      	ldr	r1, [pc, #188]	@ (8000d24 <HAL_GPIO_Init+0x2bc>)
 8000c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d006      	beq.n	8000c8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c80:	4b2d      	ldr	r3, [pc, #180]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	492c      	ldr	r1, [pc, #176]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	608b      	str	r3, [r1, #8]
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4928      	ldr	r1, [pc, #160]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d006      	beq.n	8000cb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ca8:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	4922      	ldr	r1, [pc, #136]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	60cb      	str	r3, [r1, #12]
 8000cb4:	e006      	b.n	8000cc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cb6:	4b20      	ldr	r3, [pc, #128]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	491e      	ldr	r1, [pc, #120]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d006      	beq.n	8000cde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cd0:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4918      	ldr	r1, [pc, #96]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	604b      	str	r3, [r1, #4]
 8000cdc:	e006      	b.n	8000cec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cde:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	4914      	ldr	r1, [pc, #80]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d021      	beq.n	8000d3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	490e      	ldr	r1, [pc, #56]	@ (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	600b      	str	r3, [r1, #0]
 8000d04:	e021      	b.n	8000d4a <HAL_GPIO_Init+0x2e2>
 8000d06:	bf00      	nop
 8000d08:	10320000 	.word	0x10320000
 8000d0c:	10310000 	.word	0x10310000
 8000d10:	10220000 	.word	0x10220000
 8000d14:	10210000 	.word	0x10210000
 8000d18:	10120000 	.word	0x10120000
 8000d1c:	10110000 	.word	0x10110000
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	40010c00 	.word	0x40010c00
 8000d30:	40011000 	.word	0x40011000
 8000d34:	40011400 	.word	0x40011400
 8000d38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <HAL_GPIO_Init+0x304>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	4909      	ldr	r1, [pc, #36]	@ (8000d6c <HAL_GPIO_Init+0x304>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d56:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f47f ae8e 	bne.w	8000a7c <HAL_GPIO_Init+0x14>
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	372c      	adds	r7, #44	@ 0x2c
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	40010400 	.word	0x40010400

08000d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d80:	787b      	ldrb	r3, [r7, #1]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d86:	887a      	ldrh	r2, [r7, #2]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d8c:	e003      	b.n	8000d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	041a      	lsls	r2, r3, #16
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	611a      	str	r2, [r3, #16]
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e272      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 8087 	beq.w	8000ece <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dc0:	4b92      	ldr	r3, [pc, #584]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 030c 	and.w	r3, r3, #12
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d00c      	beq.n	8000de6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dcc:	4b8f      	ldr	r3, [pc, #572]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 030c 	and.w	r3, r3, #12
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	d112      	bne.n	8000dfe <HAL_RCC_OscConfig+0x5e>
 8000dd8:	4b8c      	ldr	r3, [pc, #560]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000de4:	d10b      	bne.n	8000dfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de6:	4b89      	ldr	r3, [pc, #548]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d06c      	beq.n	8000ecc <HAL_RCC_OscConfig+0x12c>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d168      	bne.n	8000ecc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e24c      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e06:	d106      	bne.n	8000e16 <HAL_RCC_OscConfig+0x76>
 8000e08:	4b80      	ldr	r3, [pc, #512]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a7f      	ldr	r2, [pc, #508]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	e02e      	b.n	8000e74 <HAL_RCC_OscConfig+0xd4>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x98>
 8000e1e:	4b7b      	ldr	r3, [pc, #492]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a7a      	ldr	r2, [pc, #488]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b78      	ldr	r3, [pc, #480]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a77      	ldr	r2, [pc, #476]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e01d      	b.n	8000e74 <HAL_RCC_OscConfig+0xd4>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e40:	d10c      	bne.n	8000e5c <HAL_RCC_OscConfig+0xbc>
 8000e42:	4b72      	ldr	r3, [pc, #456]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a71      	ldr	r2, [pc, #452]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	4b6f      	ldr	r3, [pc, #444]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a6e      	ldr	r2, [pc, #440]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e00b      	b.n	8000e74 <HAL_RCC_OscConfig+0xd4>
 8000e5c:	4b6b      	ldr	r3, [pc, #428]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a6a      	ldr	r2, [pc, #424]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b68      	ldr	r3, [pc, #416]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a67      	ldr	r2, [pc, #412]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d013      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fce2 	bl	8000844 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e84:	f7ff fcde 	bl	8000844 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b64      	cmp	r3, #100	@ 0x64
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e200      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e96:	4b5d      	ldr	r3, [pc, #372]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f0      	beq.n	8000e84 <HAL_RCC_OscConfig+0xe4>
 8000ea2:	e014      	b.n	8000ece <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fcce 	bl	8000844 <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eac:	f7ff fcca 	bl	8000844 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b64      	cmp	r3, #100	@ 0x64
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e1ec      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ebe:	4b53      	ldr	r3, [pc, #332]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f0      	bne.n	8000eac <HAL_RCC_OscConfig+0x10c>
 8000eca:	e000      	b.n	8000ece <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d063      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eda:	4b4c      	ldr	r3, [pc, #304]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00b      	beq.n	8000efe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ee6:	4b49      	ldr	r3, [pc, #292]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 030c 	and.w	r3, r3, #12
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d11c      	bne.n	8000f2c <HAL_RCC_OscConfig+0x18c>
 8000ef2:	4b46      	ldr	r3, [pc, #280]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d116      	bne.n	8000f2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efe:	4b43      	ldr	r3, [pc, #268]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d005      	beq.n	8000f16 <HAL_RCC_OscConfig+0x176>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d001      	beq.n	8000f16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e1c0      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f16:	4b3d      	ldr	r3, [pc, #244]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	4939      	ldr	r1, [pc, #228]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f2a:	e03a      	b.n	8000fa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d020      	beq.n	8000f76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f34:	4b36      	ldr	r3, [pc, #216]	@ (8001010 <HAL_RCC_OscConfig+0x270>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fc83 	bl	8000844 <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f42:	f7ff fc7f 	bl	8000844 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e1a1      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f54:	4b2d      	ldr	r3, [pc, #180]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0f0      	beq.n	8000f42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f60:	4b2a      	ldr	r3, [pc, #168]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	4927      	ldr	r1, [pc, #156]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	600b      	str	r3, [r1, #0]
 8000f74:	e015      	b.n	8000fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f76:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <HAL_RCC_OscConfig+0x270>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fc62 	bl	8000844 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f84:	f7ff fc5e 	bl	8000844 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e180      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f96:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d03a      	beq.n	8001024 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d019      	beq.n	8000fea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fb6:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <HAL_RCC_OscConfig+0x274>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fbc:	f7ff fc42 	bl	8000844 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fc3e 	bl	8000844 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e160      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f000 face 	bl	8001584 <RCC_Delay>
 8000fe8:	e01c      	b.n	8001024 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <HAL_RCC_OscConfig+0x274>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff0:	f7ff fc28 	bl	8000844 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff6:	e00f      	b.n	8001018 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff8:	f7ff fc24 	bl	8000844 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d908      	bls.n	8001018 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e146      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000
 8001010:	42420000 	.word	0x42420000
 8001014:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001018:	4b92      	ldr	r3, [pc, #584]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1e9      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80a6 	beq.w	800117e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001036:	4b8b      	ldr	r3, [pc, #556]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10d      	bne.n	800105e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b88      	ldr	r3, [pc, #544]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a87      	ldr	r2, [pc, #540]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b85      	ldr	r3, [pc, #532]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800105a:	2301      	movs	r3, #1
 800105c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105e:	4b82      	ldr	r3, [pc, #520]	@ (8001268 <HAL_RCC_OscConfig+0x4c8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001066:	2b00      	cmp	r3, #0
 8001068:	d118      	bne.n	800109c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800106a:	4b7f      	ldr	r3, [pc, #508]	@ (8001268 <HAL_RCC_OscConfig+0x4c8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a7e      	ldr	r2, [pc, #504]	@ (8001268 <HAL_RCC_OscConfig+0x4c8>)
 8001070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001076:	f7ff fbe5 	bl	8000844 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800107e:	f7ff fbe1 	bl	8000844 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b64      	cmp	r3, #100	@ 0x64
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e103      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001090:	4b75      	ldr	r3, [pc, #468]	@ (8001268 <HAL_RCC_OscConfig+0x4c8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x312>
 80010a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6213      	str	r3, [r2, #32]
 80010b0:	e02d      	b.n	800110e <HAL_RCC_OscConfig+0x36e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x334>
 80010ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4a69      	ldr	r2, [pc, #420]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	6213      	str	r3, [r2, #32]
 80010c6:	4b67      	ldr	r3, [pc, #412]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4a66      	ldr	r2, [pc, #408]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	f023 0304 	bic.w	r3, r3, #4
 80010d0:	6213      	str	r3, [r2, #32]
 80010d2:	e01c      	b.n	800110e <HAL_RCC_OscConfig+0x36e>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	2b05      	cmp	r3, #5
 80010da:	d10c      	bne.n	80010f6 <HAL_RCC_OscConfig+0x356>
 80010dc:	4b61      	ldr	r3, [pc, #388]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	4a60      	ldr	r2, [pc, #384]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6213      	str	r3, [r2, #32]
 80010e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6213      	str	r3, [r2, #32]
 80010f4:	e00b      	b.n	800110e <HAL_RCC_OscConfig+0x36e>
 80010f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	6213      	str	r3, [r2, #32]
 8001102:	4b58      	ldr	r3, [pc, #352]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4a57      	ldr	r2, [pc, #348]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	f023 0304 	bic.w	r3, r3, #4
 800110c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d015      	beq.n	8001142 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001116:	f7ff fb95 	bl	8000844 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111c:	e00a      	b.n	8001134 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111e:	f7ff fb91 	bl	8000844 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800112c:	4293      	cmp	r3, r2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e0b1      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001134:	4b4b      	ldr	r3, [pc, #300]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0ee      	beq.n	800111e <HAL_RCC_OscConfig+0x37e>
 8001140:	e014      	b.n	800116c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001142:	f7ff fb7f 	bl	8000844 <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001148:	e00a      	b.n	8001160 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800114a:	f7ff fb7b 	bl	8000844 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001158:	4293      	cmp	r3, r2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e09b      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001160:	4b40      	ldr	r3, [pc, #256]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1ee      	bne.n	800114a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d105      	bne.n	800117e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001172:	4b3c      	ldr	r3, [pc, #240]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a3b      	ldr	r2, [pc, #236]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800117c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8087 	beq.w	8001296 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001188:	4b36      	ldr	r3, [pc, #216]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b08      	cmp	r3, #8
 8001192:	d061      	beq.n	8001258 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d146      	bne.n	800122a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119c:	4b33      	ldr	r3, [pc, #204]	@ (800126c <HAL_RCC_OscConfig+0x4cc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fb4f 	bl	8000844 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011aa:	f7ff fb4b 	bl	8000844 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e06d      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011bc:	4b29      	ldr	r3, [pc, #164]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f0      	bne.n	80011aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d0:	d108      	bne.n	80011e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011d2:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	4921      	ldr	r1, [pc, #132]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a19      	ldr	r1, [r3, #32]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f4:	430b      	orrs	r3, r1
 80011f6:	491b      	ldr	r1, [pc, #108]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <HAL_RCC_OscConfig+0x4cc>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001202:	f7ff fb1f 	bl	8000844 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120a:	f7ff fb1b 	bl	8000844 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e03d      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x46a>
 8001228:	e035      	b.n	8001296 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <HAL_RCC_OscConfig+0x4cc>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fb08 	bl	8000844 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001238:	f7ff fb04 	bl	8000844 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e026      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x498>
 8001256:	e01e      	b.n	8001296 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d107      	bne.n	8001270 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e019      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
 8001264:	40021000 	.word	0x40021000
 8001268:	40007000 	.word	0x40007000
 800126c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <HAL_RCC_OscConfig+0x500>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	429a      	cmp	r2, r3
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128e:	429a      	cmp	r2, r3
 8001290:	d001      	beq.n	8001296 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0d0      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d910      	bls.n	80012e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c6:	4b67      	ldr	r3, [pc, #412]	@ (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 0207 	bic.w	r2, r3, #7
 80012ce:	4965      	ldr	r1, [pc, #404]	@ (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d6:	4b63      	ldr	r3, [pc, #396]	@ (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d001      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e0b8      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d020      	beq.n	8001336 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001300:	4b59      	ldr	r3, [pc, #356]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4a58      	ldr	r2, [pc, #352]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001306:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800130a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0308 	and.w	r3, r3, #8
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001318:	4b53      	ldr	r3, [pc, #332]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a52      	ldr	r2, [pc, #328]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001322:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001324:	4b50      	ldr	r3, [pc, #320]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	494d      	ldr	r1, [pc, #308]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d040      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d107      	bne.n	800135a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	4b47      	ldr	r3, [pc, #284]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d115      	bne.n	8001382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e07f      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d107      	bne.n	8001372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001362:	4b41      	ldr	r3, [pc, #260]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e073      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001372:	4b3d      	ldr	r3, [pc, #244]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e06b      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001382:	4b39      	ldr	r3, [pc, #228]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f023 0203 	bic.w	r2, r3, #3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4936      	ldr	r1, [pc, #216]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001394:	f7ff fa56 	bl	8000844 <HAL_GetTick>
 8001398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800139a:	e00a      	b.n	80013b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800139c:	f7ff fa52 	bl	8000844 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e053      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 020c 	and.w	r2, r3, #12
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d1eb      	bne.n	800139c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013c4:	4b27      	ldr	r3, [pc, #156]	@ (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d210      	bcs.n	80013f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d2:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 0207 	bic.w	r2, r3, #7
 80013da:	4922      	ldr	r1, [pc, #136]	@ (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d001      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e032      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d008      	beq.n	8001412 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001400:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4916      	ldr	r1, [pc, #88]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	490e      	ldr	r1, [pc, #56]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	4313      	orrs	r3, r2
 8001430:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001432:	f000 f821 	bl	8001478 <HAL_RCC_GetSysClockFreq>
 8001436:	4602      	mov	r2, r0
 8001438:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	490a      	ldr	r1, [pc, #40]	@ (800146c <HAL_RCC_ClockConfig+0x1c8>)
 8001444:	5ccb      	ldrb	r3, [r1, r3]
 8001446:	fa22 f303 	lsr.w	r3, r2, r3
 800144a:	4a09      	ldr	r2, [pc, #36]	@ (8001470 <HAL_RCC_ClockConfig+0x1cc>)
 800144c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_RCC_ClockConfig+0x1d0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f9b4 	bl	80007c0 <HAL_InitTick>

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40022000 	.word	0x40022000
 8001468:	40021000 	.word	0x40021000
 800146c:	080044d0 	.word	0x080044d0
 8001470:	20000000 	.word	0x20000000
 8001474:	20000004 	.word	0x20000004

08001478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001492:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <HAL_RCC_GetSysClockFreq+0x94>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d002      	beq.n	80014a8 <HAL_RCC_GetSysClockFreq+0x30>
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d003      	beq.n	80014ae <HAL_RCC_GetSysClockFreq+0x36>
 80014a6:	e027      	b.n	80014f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014a8:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x98>)
 80014aa:	613b      	str	r3, [r7, #16]
      break;
 80014ac:	e027      	b.n	80014fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	0c9b      	lsrs	r3, r3, #18
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	4a17      	ldr	r2, [pc, #92]	@ (8001514 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014b8:	5cd3      	ldrb	r3, [r2, r3]
 80014ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d010      	beq.n	80014e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014c6:	4b11      	ldr	r3, [pc, #68]	@ (800150c <HAL_RCC_GetSysClockFreq+0x94>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	0c5b      	lsrs	r3, r3, #17
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	4a11      	ldr	r2, [pc, #68]	@ (8001518 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x98>)
 80014da:	fb03 f202 	mul.w	r2, r3, r2
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e004      	b.n	80014f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a0c      	ldr	r2, [pc, #48]	@ (800151c <HAL_RCC_GetSysClockFreq+0xa4>)
 80014ec:	fb02 f303 	mul.w	r3, r2, r3
 80014f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	613b      	str	r3, [r7, #16]
      break;
 80014f6:	e002      	b.n	80014fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014f8:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x98>)
 80014fa:	613b      	str	r3, [r7, #16]
      break;
 80014fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014fe:	693b      	ldr	r3, [r7, #16]
}
 8001500:	4618      	mov	r0, r3
 8001502:	371c      	adds	r7, #28
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	007a1200 	.word	0x007a1200
 8001514:	080044e8 	.word	0x080044e8
 8001518:	080044f8 	.word	0x080044f8
 800151c:	003d0900 	.word	0x003d0900

08001520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001524:	4b02      	ldr	r3, [pc, #8]	@ (8001530 <HAL_RCC_GetHCLKFreq+0x10>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000000 	.word	0x20000000

08001534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001538:	f7ff fff2 	bl	8001520 <HAL_RCC_GetHCLKFreq>
 800153c:	4602      	mov	r2, r0
 800153e:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	4903      	ldr	r1, [pc, #12]	@ (8001558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800154a:	5ccb      	ldrb	r3, [r1, r3]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	080044e0 	.word	0x080044e0

0800155c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001560:	f7ff ffde 	bl	8001520 <HAL_RCC_GetHCLKFreq>
 8001564:	4602      	mov	r2, r0
 8001566:	4b05      	ldr	r3, [pc, #20]	@ (800157c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	0adb      	lsrs	r3, r3, #11
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	4903      	ldr	r1, [pc, #12]	@ (8001580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001572:	5ccb      	ldrb	r3, [r1, r3]
 8001574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001578:	4618      	mov	r0, r3
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	080044e0 	.word	0x080044e0

08001584 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <RCC_Delay+0x34>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <RCC_Delay+0x38>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	0a5b      	lsrs	r3, r3, #9
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015a0:	bf00      	nop
  }
  while (Delay --);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1e5a      	subs	r2, r3, #1
 80015a6:	60fa      	str	r2, [r7, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f9      	bne.n	80015a0 <RCC_Delay+0x1c>
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	20000000 	.word	0x20000000
 80015bc:	10624dd3 	.word	0x10624dd3

080015c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e076      	b.n	80016c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d108      	bne.n	80015ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80015e2:	d009      	beq.n	80015f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
 80015ea:	e005      	b.n	80015f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7fe ff3e 	bl	8000494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800162e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800167c:	ea42 0103 	orr.w	r1, r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001684:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	0c1a      	lsrs	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f002 0204 	and.w	r2, r2, #4
 800169e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80016d8:	f7ff f8b4 	bl	8000844 <HAL_GetTick>
 80016dc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d001      	beq.n	80016f2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80016ee:	2302      	movs	r3, #2
 80016f0:	e12a      	b.n	8001948 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <HAL_SPI_Transmit+0x36>
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e122      	b.n	8001948 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_SPI_Transmit+0x48>
 800170c:	2302      	movs	r3, #2
 800170e:	e11b      	b.n	8001948 <HAL_SPI_Transmit+0x280>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2203      	movs	r2, #3
 800171c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	88fa      	ldrh	r2, [r7, #6]
 8001730:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	88fa      	ldrh	r2, [r7, #6]
 8001736:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800175e:	d10f      	bne.n	8001780 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800176e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800177e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800178a:	2b40      	cmp	r3, #64	@ 0x40
 800178c:	d007      	beq.n	800179e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017a6:	d152      	bne.n	800184e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <HAL_SPI_Transmit+0xee>
 80017b0:	8b7b      	ldrh	r3, [r7, #26]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d145      	bne.n	8001842 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	881a      	ldrh	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	1c9a      	adds	r2, r3, #2
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80017da:	e032      	b.n	8001842 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d112      	bne.n	8001810 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	881a      	ldrh	r2, [r3, #0]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	1c9a      	adds	r2, r3, #2
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001804:	b29b      	uxth	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800180e:	e018      	b.n	8001842 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001810:	f7ff f818 	bl	8000844 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d803      	bhi.n	8001828 <HAL_SPI_Transmit+0x160>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001826:	d102      	bne.n	800182e <HAL_SPI_Transmit+0x166>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e082      	b.n	8001948 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001846:	b29b      	uxth	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1c7      	bne.n	80017dc <HAL_SPI_Transmit+0x114>
 800184c:	e053      	b.n	80018f6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <HAL_SPI_Transmit+0x194>
 8001856:	8b7b      	ldrh	r3, [r7, #26]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d147      	bne.n	80018ec <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	330c      	adds	r3, #12
 8001866:	7812      	ldrb	r2, [r2, #0]
 8001868:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001878:	b29b      	uxth	r3, r3
 800187a:	3b01      	subs	r3, #1
 800187c:	b29a      	uxth	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001882:	e033      	b.n	80018ec <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b02      	cmp	r3, #2
 8001890:	d113      	bne.n	80018ba <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	330c      	adds	r3, #12
 800189c:	7812      	ldrb	r2, [r2, #0]
 800189e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80018b8:	e018      	b.n	80018ec <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018ba:	f7fe ffc3 	bl	8000844 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d803      	bhi.n	80018d2 <HAL_SPI_Transmit+0x20a>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d102      	bne.n	80018d8 <HAL_SPI_Transmit+0x210>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e02d      	b.n	8001948 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1c6      	bne.n	8001884 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	6839      	ldr	r1, [r7, #0]
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 fa5a 	bl	8001db4 <SPI_EndRxTxTransaction>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2220      	movs	r2, #32
 800190a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001946:	2300      	movs	r3, #0
  }
}
 8001948:	4618      	mov	r0, r3
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	@ 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800195e:	2301      	movs	r3, #1
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001962:	f7fe ff6f 	bl	8000844 <HAL_GetTick>
 8001966:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800196e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001976:	887b      	ldrh	r3, [r7, #2]
 8001978:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d00c      	beq.n	800199a <HAL_SPI_TransmitReceive+0x4a>
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001986:	d106      	bne.n	8001996 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <HAL_SPI_TransmitReceive+0x46>
 8001990:	7ffb      	ldrb	r3, [r7, #31]
 8001992:	2b04      	cmp	r3, #4
 8001994:	d001      	beq.n	800199a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001996:	2302      	movs	r3, #2
 8001998:	e17f      	b.n	8001c9a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_SPI_TransmitReceive+0x5c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_SPI_TransmitReceive+0x5c>
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e174      	b.n	8001c9a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_SPI_TransmitReceive+0x6e>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e16d      	b.n	8001c9a <HAL_SPI_TransmitReceive+0x34a>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d003      	beq.n	80019da <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2205      	movs	r2, #5
 80019d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	887a      	ldrh	r2, [r7, #2]
 80019ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	887a      	ldrh	r2, [r7, #2]
 80019f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	887a      	ldrh	r2, [r7, #2]
 8001a02:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a1a:	2b40      	cmp	r3, #64	@ 0x40
 8001a1c:	d007      	beq.n	8001a2e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a36:	d17e      	bne.n	8001b36 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <HAL_SPI_TransmitReceive+0xf6>
 8001a40:	8afb      	ldrh	r3, [r7, #22]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d16c      	bne.n	8001b20 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	881a      	ldrh	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	1c9a      	adds	r2, r3, #2
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a6a:	e059      	b.n	8001b20 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d11b      	bne.n	8001ab2 <HAL_SPI_TransmitReceive+0x162>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d016      	beq.n	8001ab2 <HAL_SPI_TransmitReceive+0x162>
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d113      	bne.n	8001ab2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	881a      	ldrh	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	1c9a      	adds	r2, r3, #2
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d119      	bne.n	8001af4 <HAL_SPI_TransmitReceive+0x1a4>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d014      	beq.n	8001af4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad4:	b292      	uxth	r2, r2
 8001ad6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001adc:	1c9a      	adds	r2, r3, #2
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001af0:	2301      	movs	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001af4:	f7fe fea6 	bl	8000844 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d80d      	bhi.n	8001b20 <HAL_SPI_TransmitReceive+0x1d0>
 8001b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0a:	d009      	beq.n	8001b20 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0bc      	b.n	8001c9a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1a0      	bne.n	8001a6c <HAL_SPI_TransmitReceive+0x11c>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d19b      	bne.n	8001a6c <HAL_SPI_TransmitReceive+0x11c>
 8001b34:	e082      	b.n	8001c3c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_SPI_TransmitReceive+0x1f4>
 8001b3e:	8afb      	ldrh	r3, [r7, #22]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d171      	bne.n	8001c28 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	330c      	adds	r3, #12
 8001b4e:	7812      	ldrb	r2, [r2, #0]
 8001b50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b6a:	e05d      	b.n	8001c28 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d11c      	bne.n	8001bb4 <HAL_SPI_TransmitReceive+0x264>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d017      	beq.n	8001bb4 <HAL_SPI_TransmitReceive+0x264>
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d114      	bne.n	8001bb4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	330c      	adds	r3, #12
 8001b94:	7812      	ldrb	r2, [r2, #0]
 8001b96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d119      	bne.n	8001bf6 <HAL_SPI_TransmitReceive+0x2a6>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d014      	beq.n	8001bf6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001bf6:	f7fe fe25 	bl	8000844 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d803      	bhi.n	8001c0e <HAL_SPI_TransmitReceive+0x2be>
 8001c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d102      	bne.n	8001c14 <HAL_SPI_TransmitReceive+0x2c4>
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e038      	b.n	8001c9a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d19c      	bne.n	8001b6c <HAL_SPI_TransmitReceive+0x21c>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d197      	bne.n	8001b6c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c3c:	6a3a      	ldr	r2, [r7, #32]
 8001c3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 f8b7 	bl	8001db4 <SPI_EndRxTxTransaction>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e01d      	b.n	8001c9a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10a      	bne.n	8001c7c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8001c98:	2300      	movs	r3, #0
  }
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3728      	adds	r7, #40	@ 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001cb4:	f7fe fdc6 	bl	8000844 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001cc4:	f7fe fdbe 	bl	8000844 <HAL_GetTick>
 8001cc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001cca:	4b39      	ldr	r3, [pc, #228]	@ (8001db0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	015b      	lsls	r3, r3, #5
 8001cd0:	0d1b      	lsrs	r3, r3, #20
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	fb02 f303 	mul.w	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cda:	e054      	b.n	8001d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce2:	d050      	beq.n	8001d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ce4:	f7fe fdae 	bl	8000844 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d902      	bls.n	8001cfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d13d      	bne.n	8001d76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001d08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d12:	d111      	bne.n	8001d38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d1c:	d004      	beq.n	8001d28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d26:	d107      	bne.n	8001d38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d40:	d10f      	bne.n	8001d62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e017      	b.n	8001da6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	bf0c      	ite	eq
 8001d96:	2301      	moveq	r3, #1
 8001d98:	2300      	movne	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d19b      	bne.n	8001cdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000

08001db4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2102      	movs	r1, #2
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff ff6a 	bl	8001ca4 <SPI_WaitFlagStateUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dda:	f043 0220 	orr.w	r2, r3, #32
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e013      	b.n	8001e0e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2200      	movs	r2, #0
 8001dee:	2180      	movs	r1, #128	@ 0x80
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7ff ff57 	bl	8001ca4 <SPI_WaitFlagStateUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e00:	f043 0220 	orr.w	r2, r3, #32
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e042      	b.n	8001eae <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d106      	bne.n	8001e42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7fe fc37 	bl	80006b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2224      	movs	r2, #36	@ 0x24
 8001e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f972 	bl	8002144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691a      	ldr	r2, [r3, #16]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b08a      	sub	sp, #40	@ 0x28
 8001eba:	af02      	add	r7, sp, #8
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d175      	bne.n	8001fc2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_UART_Transmit+0x2c>
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e06e      	b.n	8001fc4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2221      	movs	r2, #33	@ 0x21
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ef4:	f7fe fca6 	bl	8000844 <HAL_GetTick>
 8001ef8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	88fa      	ldrh	r2, [r7, #6]
 8001efe:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	88fa      	ldrh	r2, [r7, #6]
 8001f04:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f0e:	d108      	bne.n	8001f22 <HAL_UART_Transmit+0x6c>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d104      	bne.n	8001f22 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	e003      	b.n	8001f2a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f2a:	e02e      	b.n	8001f8a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2200      	movs	r2, #0
 8001f34:	2180      	movs	r1, #128	@ 0x80
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f848 	bl	8001fcc <UART_WaitOnFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e03a      	b.n	8001fc4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f62:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	3302      	adds	r3, #2
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	e007      	b.n	8001f7c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1cb      	bne.n	8001f2c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2140      	movs	r1, #64	@ 0x40
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f814 	bl	8001fcc <UART_WaitOnFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2220      	movs	r2, #32
 8001fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e006      	b.n	8001fc4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001fc2:	2302      	movs	r3, #2
  }
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fdc:	e03b      	b.n	8002056 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d037      	beq.n	8002056 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe6:	f7fe fc2d 	bl	8000844 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	6a3a      	ldr	r2, [r7, #32]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d302      	bcc.n	8001ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e03a      	b.n	8002076 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b00      	cmp	r3, #0
 800200c:	d023      	beq.n	8002056 <UART_WaitOnFlagUntilTimeout+0x8a>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b80      	cmp	r3, #128	@ 0x80
 8002012:	d020      	beq.n	8002056 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b40      	cmp	r3, #64	@ 0x40
 8002018:	d01d      	beq.n	8002056 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b08      	cmp	r3, #8
 8002026:	d116      	bne.n	8002056 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f81d 	bl	800207e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2208      	movs	r2, #8
 8002048:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00f      	b.n	8002076 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4013      	ands	r3, r2
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	429a      	cmp	r2, r3
 8002064:	bf0c      	ite	eq
 8002066:	2301      	moveq	r3, #1
 8002068:	2300      	movne	r3, #0
 800206a:	b2db      	uxtb	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	429a      	cmp	r2, r3
 8002072:	d0b4      	beq.n	8001fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800207e:	b480      	push	{r7}
 8002080:	b095      	sub	sp, #84	@ 0x54
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	330c      	adds	r3, #12
 800208c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800208e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002090:	e853 3f00 	ldrex	r3, [r3]
 8002094:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800209c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	330c      	adds	r3, #12
 80020a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80020a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80020ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80020ae:	e841 2300 	strex	r3, r2, [r1]
 80020b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80020b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1e5      	bne.n	8002086 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3314      	adds	r3, #20
 80020c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	e853 3f00 	ldrex	r3, [r3]
 80020c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3314      	adds	r3, #20
 80020d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020e2:	e841 2300 	strex	r3, r2, [r1]
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1e5      	bne.n	80020ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d119      	bne.n	800212a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	330c      	adds	r3, #12
 80020fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	e853 3f00 	ldrex	r3, [r3]
 8002104:	60bb      	str	r3, [r7, #8]
   return(result);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f023 0310 	bic.w	r3, r3, #16
 800210c:	647b      	str	r3, [r7, #68]	@ 0x44
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	330c      	adds	r3, #12
 8002114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002116:	61ba      	str	r2, [r7, #24]
 8002118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800211a:	6979      	ldr	r1, [r7, #20]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	e841 2300 	strex	r3, r2, [r1]
 8002122:	613b      	str	r3, [r7, #16]
   return(result);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1e5      	bne.n	80020f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002138:	bf00      	nop
 800213a:	3754      	adds	r7, #84	@ 0x54
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
	...

08002144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	4313      	orrs	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800217e:	f023 030c 	bic.w	r3, r3, #12
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	430b      	orrs	r3, r1
 800218a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002258 <UART_SetConfig+0x114>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d103      	bne.n	80021b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021ac:	f7ff f9d6 	bl	800155c <HAL_RCC_GetPCLK2Freq>
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	e002      	b.n	80021ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021b4:	f7ff f9be 	bl	8001534 <HAL_RCC_GetPCLK1Freq>
 80021b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009a      	lsls	r2, r3, #2
 80021c4:	441a      	add	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	4a22      	ldr	r2, [pc, #136]	@ (800225c <UART_SetConfig+0x118>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	0119      	lsls	r1, r3, #4
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	009a      	lsls	r2, r3, #2
 80021e4:	441a      	add	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f0:	4b1a      	ldr	r3, [pc, #104]	@ (800225c <UART_SetConfig+0x118>)
 80021f2:	fba3 0302 	umull	r0, r3, r3, r2
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2064      	movs	r0, #100	@ 0x64
 80021fa:	fb00 f303 	mul.w	r3, r0, r3
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	3332      	adds	r3, #50	@ 0x32
 8002204:	4a15      	ldr	r2, [pc, #84]	@ (800225c <UART_SetConfig+0x118>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002210:	4419      	add	r1, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	009a      	lsls	r2, r3, #2
 800221c:	441a      	add	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	fbb2 f2f3 	udiv	r2, r2, r3
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <UART_SetConfig+0x118>)
 800222a:	fba3 0302 	umull	r0, r3, r3, r2
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2064      	movs	r0, #100	@ 0x64
 8002232:	fb00 f303 	mul.w	r3, r0, r3
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	3332      	adds	r3, #50	@ 0x32
 800223c:	4a07      	ldr	r2, [pc, #28]	@ (800225c <UART_SetConfig+0x118>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	f003 020f 	and.w	r2, r3, #15
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	440a      	add	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40013800 	.word	0x40013800
 800225c:	51eb851f 	.word	0x51eb851f

08002260 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002264:	4904      	ldr	r1, [pc, #16]	@ (8002278 <MX_FATFS_Init+0x18>)
 8002266:	4805      	ldr	r0, [pc, #20]	@ (800227c <MX_FATFS_Init+0x1c>)
 8002268:	f001 fbf2 	bl	8003a50 <FATFS_LinkDriver>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <MX_FATFS_Init+0x20>)
 8002272:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000037c 	.word	0x2000037c
 800227c:	2000000c 	.word	0x2000000c
 8002280:	20000378 	.word	0x20000378

08002284 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
    return USER_SPI_initialize(pdrv);
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f9d3 	bl	800263c <USER_SPI_initialize>
 8002296:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
    return USER_SPI_status(pdrv);
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fab1 	bl	8002814 <USER_SPI_status>
 80022b2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4603      	mov	r3, r0
 80022ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count);
 80022cc:	7bf8      	ldrb	r0, [r7, #15]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	f000 fab2 	bl	800283c <USER_SPI_read>
 80022d8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	4603      	mov	r3, r0
 80022f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count);
 80022f2:	7bf8      	ldrb	r0, [r7, #15]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	f000 fb05 	bl	8002908 <USER_SPI_write>
 80022fe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	603a      	str	r2, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
 8002314:	460b      	mov	r3, r1
 8002316:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8002318:	79b9      	ldrb	r1, [r7, #6]
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fb6e 	bl	8002a00 <USER_SPI_ioctl>
 8002324:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002338:	f7fe fa84 	bl	8000844 <HAL_GetTick>
 800233c:	4603      	mov	r3, r0
 800233e:	4a04      	ldr	r2, [pc, #16]	@ (8002350 <SPI_Timer_On+0x20>)
 8002340:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002342:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <SPI_Timer_On+0x24>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000384 	.word	0x20000384
 8002354:	20000388 	.word	0x20000388

08002358 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800235c:	f7fe fa72 	bl	8000844 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	4b06      	ldr	r3, [pc, #24]	@ (800237c <SPI_Timer_Status+0x24>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	1ad2      	subs	r2, r2, r3
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <SPI_Timer_Status+0x28>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	bf34      	ite	cc
 8002370:	2301      	movcc	r3, #1
 8002372:	2300      	movcs	r3, #0
 8002374:	b2db      	uxtb	r3, r3
}
 8002376:	4618      	mov	r0, r3
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000384 	.word	0x20000384
 8002380:	20000388 	.word	0x20000388

08002384 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af02      	add	r7, sp, #8
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800238e:	f107 020f 	add.w	r2, r7, #15
 8002392:	1df9      	adds	r1, r7, #7
 8002394:	2332      	movs	r3, #50	@ 0x32
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2301      	movs	r3, #1
 800239a:	4804      	ldr	r0, [pc, #16]	@ (80023ac <xchg_spi+0x28>)
 800239c:	f7ff fad8 	bl	8001950 <HAL_SPI_TransmitReceive>
    return rxDat;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200002d0 	.word	0x200002d0

080023b0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	e00a      	b.n	80023d6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	18d4      	adds	r4, r2, r3
 80023c6:	20ff      	movs	r0, #255	@ 0xff
 80023c8:	f7ff ffdc 	bl	8002384 <xchg_spi>
 80023cc:	4603      	mov	r3, r0
 80023ce:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3301      	adds	r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d3f0      	bcc.n	80023c0 <rcvr_spi_multi+0x10>
	}
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}

080023e8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4803      	ldr	r0, [pc, #12]	@ (800240c <xmit_spi_multi+0x24>)
 80023fe:	f7ff f963 	bl	80016c8 <HAL_SPI_Transmit>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200002d0 	.word	0x200002d0

08002410 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002418:	f7fe fa14 	bl	8000844 <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002422:	20ff      	movs	r0, #255	@ 0xff
 8002424:	f7ff ffae 	bl	8002384 <xchg_spi>
 8002428:	4603      	mov	r3, r0
 800242a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	2bff      	cmp	r3, #255	@ 0xff
 8002430:	d007      	beq.n	8002442 <wait_ready+0x32>
 8002432:	f7fe fa07 	bl	8000844 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	429a      	cmp	r2, r3
 8002440:	d8ef      	bhi.n	8002422 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	2bff      	cmp	r3, #255	@ 0xff
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800245c:	2201      	movs	r2, #1
 800245e:	2110      	movs	r1, #16
 8002460:	4803      	ldr	r0, [pc, #12]	@ (8002470 <despiselect+0x18>)
 8002462:	f7fe fc85 	bl	8000d70 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002466:	20ff      	movs	r0, #255	@ 0xff
 8002468:	f7ff ff8c 	bl	8002384 <xchg_spi>

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40010800 	.word	0x40010800

08002474 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002478:	2200      	movs	r2, #0
 800247a:	2110      	movs	r1, #16
 800247c:	4809      	ldr	r0, [pc, #36]	@ (80024a4 <spiselect+0x30>)
 800247e:	f7fe fc77 	bl	8000d70 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002482:	20ff      	movs	r0, #255	@ 0xff
 8002484:	f7ff ff7e 	bl	8002384 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002488:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800248c:	f7ff ffc0 	bl	8002410 <wait_ready>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <spiselect+0x26>
 8002496:	2301      	movs	r3, #1
 8002498:	e002      	b.n	80024a0 <spiselect+0x2c>

	despiselect();
 800249a:	f7ff ffdd 	bl	8002458 <despiselect>
	return 0;	/* Timeout */
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40010800 	.word	0x40010800

080024a8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80024b2:	20c8      	movs	r0, #200	@ 0xc8
 80024b4:	f7ff ff3c 	bl	8002330 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80024b8:	20ff      	movs	r0, #255	@ 0xff
 80024ba:	f7ff ff63 	bl	8002384 <xchg_spi>
 80024be:	4603      	mov	r3, r0
 80024c0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2bff      	cmp	r3, #255	@ 0xff
 80024c6:	d104      	bne.n	80024d2 <rcvr_datablock+0x2a>
 80024c8:	f7ff ff46 	bl	8002358 <SPI_Timer_Status>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f2      	bne.n	80024b8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2bfe      	cmp	r3, #254	@ 0xfe
 80024d6:	d001      	beq.n	80024dc <rcvr_datablock+0x34>
 80024d8:	2300      	movs	r3, #0
 80024da:	e00a      	b.n	80024f2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80024dc:	6839      	ldr	r1, [r7, #0]
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ff66 	bl	80023b0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80024e4:	20ff      	movs	r0, #255	@ 0xff
 80024e6:	f7ff ff4d 	bl	8002384 <xchg_spi>
 80024ea:	20ff      	movs	r0, #255	@ 0xff
 80024ec:	f7ff ff4a 	bl	8002384 <xchg_spi>

	return 1;						/* Function succeeded */
 80024f0:	2301      	movs	r3, #1
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002506:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800250a:	f7ff ff81 	bl	8002410 <wait_ready>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <xmit_datablock+0x1e>
 8002514:	2300      	movs	r3, #0
 8002516:	e01e      	b.n	8002556 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff ff32 	bl	8002384 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	2bfd      	cmp	r3, #253	@ 0xfd
 8002524:	d016      	beq.n	8002554 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002526:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ff5c 	bl	80023e8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002530:	20ff      	movs	r0, #255	@ 0xff
 8002532:	f7ff ff27 	bl	8002384 <xchg_spi>
 8002536:	20ff      	movs	r0, #255	@ 0xff
 8002538:	f7ff ff24 	bl	8002384 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800253c:	20ff      	movs	r0, #255	@ 0xff
 800253e:	f7ff ff21 	bl	8002384 <xchg_spi>
 8002542:	4603      	mov	r3, r0
 8002544:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	2b05      	cmp	r3, #5
 800254e:	d001      	beq.n	8002554 <xmit_datablock+0x5a>
 8002550:	2300      	movs	r3, #0
 8002552:	e000      	b.n	8002556 <xmit_datablock+0x5c>
	}
	return 1;
 8002554:	2301      	movs	r3, #1
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b084      	sub	sp, #16
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	6039      	str	r1, [r7, #0]
 8002568:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	da0e      	bge.n	8002590 <send_cmd+0x32>
		cmd &= 0x7F;
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002578:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800257a:	2100      	movs	r1, #0
 800257c:	2037      	movs	r0, #55	@ 0x37
 800257e:	f7ff ffee 	bl	800255e <send_cmd>
 8002582:	4603      	mov	r3, r0
 8002584:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d901      	bls.n	8002590 <send_cmd+0x32>
 800258c:	7bbb      	ldrb	r3, [r7, #14]
 800258e:	e051      	b.n	8002634 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d008      	beq.n	80025a8 <send_cmd+0x4a>
		despiselect();
 8002596:	f7ff ff5f 	bl	8002458 <despiselect>
		if (!spiselect()) return 0xFF;
 800259a:	f7ff ff6b 	bl	8002474 <spiselect>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <send_cmd+0x4a>
 80025a4:	23ff      	movs	r3, #255	@ 0xff
 80025a6:	e045      	b.n	8002634 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fee7 	bl	8002384 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	0e1b      	lsrs	r3, r3, #24
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fee1 	bl	8002384 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	0c1b      	lsrs	r3, r3, #16
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fedb 	bl	8002384 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fed5 	bl	8002384 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fed0 	bl	8002384 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <send_cmd+0x94>
 80025ee:	2395      	movs	r3, #149	@ 0x95
 80025f0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d101      	bne.n	80025fc <send_cmd+0x9e>
 80025f8:	2387      	movs	r3, #135	@ 0x87
 80025fa:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fec0 	bl	8002384 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d102      	bne.n	8002610 <send_cmd+0xb2>
 800260a:	20ff      	movs	r0, #255	@ 0xff
 800260c:	f7ff feba 	bl	8002384 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002610:	230a      	movs	r3, #10
 8002612:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002614:	20ff      	movs	r0, #255	@ 0xff
 8002616:	f7ff feb5 	bl	8002384 <xchg_spi>
 800261a:	4603      	mov	r3, r0
 800261c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800261e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002622:	2b00      	cmp	r3, #0
 8002624:	da05      	bge.n	8002632 <send_cmd+0xd4>
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	3b01      	subs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002632:	7bbb      	ldrb	r3, [r7, #14]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <USER_SPI_initialize+0x14>
 800264c:	2301      	movs	r3, #1
 800264e:	e0d6      	b.n	80027fe <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002650:	4b6d      	ldr	r3, [pc, #436]	@ (8002808 <USER_SPI_initialize+0x1cc>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <USER_SPI_initialize+0x2a>
 800265e:	4b6a      	ldr	r3, [pc, #424]	@ (8002808 <USER_SPI_initialize+0x1cc>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	e0cb      	b.n	80027fe <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8002666:	4b69      	ldr	r3, [pc, #420]	@ (800280c <USER_SPI_initialize+0x1d0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8002670:	4b66      	ldr	r3, [pc, #408]	@ (800280c <USER_SPI_initialize+0x1d0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8002678:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800267a:	230a      	movs	r3, #10
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	e005      	b.n	800268c <USER_SPI_initialize+0x50>
 8002680:	20ff      	movs	r0, #255	@ 0xff
 8002682:	f7ff fe7f 	bl	8002384 <xchg_spi>
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	3b01      	subs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f6      	bne.n	8002680 <USER_SPI_initialize+0x44>

	ty = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002696:	2100      	movs	r1, #0
 8002698:	2000      	movs	r0, #0
 800269a:	f7ff ff60 	bl	800255e <send_cmd>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	f040 808b 	bne.w	80027bc <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80026a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026aa:	f7ff fe41 	bl	8002330 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80026ae:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80026b2:	2008      	movs	r0, #8
 80026b4:	f7ff ff53 	bl	800255e <send_cmd>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d151      	bne.n	8002762 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e00d      	b.n	80026e0 <USER_SPI_initialize+0xa4>
 80026c4:	7bfc      	ldrb	r4, [r7, #15]
 80026c6:	20ff      	movs	r0, #255	@ 0xff
 80026c8:	f7ff fe5c 	bl	8002384 <xchg_spi>
 80026cc:	4603      	mov	r3, r0
 80026ce:	461a      	mov	r2, r3
 80026d0:	f104 0310 	add.w	r3, r4, #16
 80026d4:	443b      	add	r3, r7
 80026d6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	3301      	adds	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d9ee      	bls.n	80026c4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80026e6:	7abb      	ldrb	r3, [r7, #10]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d167      	bne.n	80027bc <USER_SPI_initialize+0x180>
 80026ec:	7afb      	ldrb	r3, [r7, #11]
 80026ee:	2baa      	cmp	r3, #170	@ 0xaa
 80026f0:	d164      	bne.n	80027bc <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80026f2:	bf00      	nop
 80026f4:	f7ff fe30 	bl	8002358 <SPI_Timer_Status>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <USER_SPI_initialize+0xd2>
 80026fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002702:	20a9      	movs	r0, #169	@ 0xa9
 8002704:	f7ff ff2b 	bl	800255e <send_cmd>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f2      	bne.n	80026f4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800270e:	f7ff fe23 	bl	8002358 <SPI_Timer_Status>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d051      	beq.n	80027bc <USER_SPI_initialize+0x180>
 8002718:	2100      	movs	r1, #0
 800271a:	203a      	movs	r0, #58	@ 0x3a
 800271c:	f7ff ff1f 	bl	800255e <send_cmd>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d14a      	bne.n	80027bc <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	e00d      	b.n	8002748 <USER_SPI_initialize+0x10c>
 800272c:	7bfc      	ldrb	r4, [r7, #15]
 800272e:	20ff      	movs	r0, #255	@ 0xff
 8002730:	f7ff fe28 	bl	8002384 <xchg_spi>
 8002734:	4603      	mov	r3, r0
 8002736:	461a      	mov	r2, r3
 8002738:	f104 0310 	add.w	r3, r4, #16
 800273c:	443b      	add	r3, r7
 800273e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	3301      	adds	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b03      	cmp	r3, #3
 800274c:	d9ee      	bls.n	800272c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800274e:	7a3b      	ldrb	r3, [r7, #8]
 8002750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <USER_SPI_initialize+0x120>
 8002758:	230c      	movs	r3, #12
 800275a:	e000      	b.n	800275e <USER_SPI_initialize+0x122>
 800275c:	2304      	movs	r3, #4
 800275e:	737b      	strb	r3, [r7, #13]
 8002760:	e02c      	b.n	80027bc <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002762:	2100      	movs	r1, #0
 8002764:	20a9      	movs	r0, #169	@ 0xa9
 8002766:	f7ff fefa 	bl	800255e <send_cmd>
 800276a:	4603      	mov	r3, r0
 800276c:	2b01      	cmp	r3, #1
 800276e:	d804      	bhi.n	800277a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002770:	2302      	movs	r3, #2
 8002772:	737b      	strb	r3, [r7, #13]
 8002774:	23a9      	movs	r3, #169	@ 0xa9
 8002776:	73bb      	strb	r3, [r7, #14]
 8002778:	e003      	b.n	8002782 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800277a:	2301      	movs	r3, #1
 800277c:	737b      	strb	r3, [r7, #13]
 800277e:	2301      	movs	r3, #1
 8002780:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002782:	bf00      	nop
 8002784:	f7ff fde8 	bl	8002358 <SPI_Timer_Status>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <USER_SPI_initialize+0x162>
 800278e:	7bbb      	ldrb	r3, [r7, #14]
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fee3 	bl	800255e <send_cmd>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f2      	bne.n	8002784 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800279e:	f7ff fddb 	bl	8002358 <SPI_Timer_Status>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <USER_SPI_initialize+0x17c>
 80027a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027ac:	2010      	movs	r0, #16
 80027ae:	f7ff fed6 	bl	800255e <send_cmd>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <USER_SPI_initialize+0x180>
				ty = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80027bc:	4a14      	ldr	r2, [pc, #80]	@ (8002810 <USER_SPI_initialize+0x1d4>)
 80027be:	7b7b      	ldrb	r3, [r7, #13]
 80027c0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80027c2:	f7ff fe49 	bl	8002458 <despiselect>

	if (ty) {			/* OK */
 80027c6:	7b7b      	ldrb	r3, [r7, #13]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d012      	beq.n	80027f2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80027cc:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <USER_SPI_initialize+0x1d0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80027d6:	4b0d      	ldr	r3, [pc, #52]	@ (800280c <USER_SPI_initialize+0x1d0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0210 	orr.w	r2, r2, #16
 80027de:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80027e0:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <USER_SPI_initialize+0x1cc>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <USER_SPI_initialize+0x1cc>)
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	e002      	b.n	80027f8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80027f2:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <USER_SPI_initialize+0x1cc>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80027f8:	4b03      	ldr	r3, [pc, #12]	@ (8002808 <USER_SPI_initialize+0x1cc>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	b2db      	uxtb	r3, r3
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bd90      	pop	{r4, r7, pc}
 8002806:	bf00      	nop
 8002808:	20000020 	.word	0x20000020
 800280c:	200002d0 	.word	0x200002d0
 8002810:	20000380 	.word	0x20000380

08002814 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <USER_SPI_status+0x14>
 8002824:	2301      	movs	r3, #1
 8002826:	e002      	b.n	800282e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002828:	4b03      	ldr	r3, [pc, #12]	@ (8002838 <USER_SPI_status+0x24>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	20000020 	.word	0x20000020

0800283c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	4603      	mov	r3, r0
 800284a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <USER_SPI_read+0x1c>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <USER_SPI_read+0x20>
 8002858:	2304      	movs	r3, #4
 800285a:	e04d      	b.n	80028f8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800285c:	4b28      	ldr	r3, [pc, #160]	@ (8002900 <USER_SPI_read+0xc4>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <USER_SPI_read+0x32>
 800286a:	2303      	movs	r3, #3
 800286c:	e044      	b.n	80028f8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800286e:	4b25      	ldr	r3, [pc, #148]	@ (8002904 <USER_SPI_read+0xc8>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <USER_SPI_read+0x44>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	025b      	lsls	r3, r3, #9
 800287e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d111      	bne.n	80028aa <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	2011      	movs	r0, #17
 800288a:	f7ff fe68 	bl	800255e <send_cmd>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d129      	bne.n	80028e8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002894:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002898:	68b8      	ldr	r0, [r7, #8]
 800289a:	f7ff fe05 	bl	80024a8 <rcvr_datablock>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d021      	beq.n	80028e8 <USER_SPI_read+0xac>
			count = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	e01e      	b.n	80028e8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	2012      	movs	r0, #18
 80028ae:	f7ff fe56 	bl	800255e <send_cmd>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d117      	bne.n	80028e8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80028b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028bc:	68b8      	ldr	r0, [r7, #8]
 80028be:	f7ff fdf3 	bl	80024a8 <rcvr_datablock>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <USER_SPI_read+0xa2>
				buff += 512;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80028ce:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ed      	bne.n	80028b8 <USER_SPI_read+0x7c>
 80028dc:	e000      	b.n	80028e0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80028de:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80028e0:	2100      	movs	r1, #0
 80028e2:	200c      	movs	r0, #12
 80028e4:	f7ff fe3b 	bl	800255e <send_cmd>
		}
	}
	despiselect();
 80028e8:	f7ff fdb6 	bl	8002458 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000020 	.word	0x20000020
 8002904:	20000380 	.word	0x20000380

08002908 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	4603      	mov	r3, r0
 8002916:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <USER_SPI_write+0x1c>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <USER_SPI_write+0x20>
 8002924:	2304      	movs	r3, #4
 8002926:	e063      	b.n	80029f0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002928:	4b33      	ldr	r3, [pc, #204]	@ (80029f8 <USER_SPI_write+0xf0>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <USER_SPI_write+0x32>
 8002936:	2303      	movs	r3, #3
 8002938:	e05a      	b.n	80029f0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800293a:	4b2f      	ldr	r3, [pc, #188]	@ (80029f8 <USER_SPI_write+0xf0>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <USER_SPI_write+0x44>
 8002948:	2302      	movs	r3, #2
 800294a:	e051      	b.n	80029f0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800294c:	4b2b      	ldr	r3, [pc, #172]	@ (80029fc <USER_SPI_write+0xf4>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <USER_SPI_write+0x56>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	025b      	lsls	r3, r3, #9
 800295c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d110      	bne.n	8002986 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	2018      	movs	r0, #24
 8002968:	f7ff fdf9 	bl	800255e <send_cmd>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d136      	bne.n	80029e0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002972:	21fe      	movs	r1, #254	@ 0xfe
 8002974:	68b8      	ldr	r0, [r7, #8]
 8002976:	f7ff fdc0 	bl	80024fa <xmit_datablock>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d02f      	beq.n	80029e0 <USER_SPI_write+0xd8>
			count = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	e02c      	b.n	80029e0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002986:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <USER_SPI_write+0xf4>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	f003 0306 	and.w	r3, r3, #6
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <USER_SPI_write+0x92>
 8002992:	6839      	ldr	r1, [r7, #0]
 8002994:	2097      	movs	r0, #151	@ 0x97
 8002996:	f7ff fde2 	bl	800255e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	2019      	movs	r0, #25
 800299e:	f7ff fdde 	bl	800255e <send_cmd>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d11b      	bne.n	80029e0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80029a8:	21fc      	movs	r1, #252	@ 0xfc
 80029aa:	68b8      	ldr	r0, [r7, #8]
 80029ac:	f7ff fda5 	bl	80024fa <xmit_datablock>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <USER_SPI_write+0xc4>
				buff += 512;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80029bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ee      	bne.n	80029a8 <USER_SPI_write+0xa0>
 80029ca:	e000      	b.n	80029ce <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80029cc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80029ce:	21fd      	movs	r1, #253	@ 0xfd
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7ff fd92 	bl	80024fa <xmit_datablock>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <USER_SPI_write+0xd8>
 80029dc:	2301      	movs	r3, #1
 80029de:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80029e0:	f7ff fd3a 	bl	8002458 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	bf14      	ite	ne
 80029ea:	2301      	movne	r3, #1
 80029ec:	2300      	moveq	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000020 	.word	0x20000020
 80029fc:	20000380 	.word	0x20000380

08002a00 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	@ 0x30
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	603a      	str	r2, [r7, #0]
 8002a0a:	71fb      	strb	r3, [r7, #7]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <USER_SPI_ioctl+0x1a>
 8002a16:	2304      	movs	r3, #4
 8002a18:	e15a      	b.n	8002cd0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002a1a:	4baf      	ldr	r3, [pc, #700]	@ (8002cd8 <USER_SPI_ioctl+0x2d8>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <USER_SPI_ioctl+0x2c>
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e151      	b.n	8002cd0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8002a32:	79bb      	ldrb	r3, [r7, #6]
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	f200 8136 	bhi.w	8002ca6 <USER_SPI_ioctl+0x2a6>
 8002a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a40 <USER_SPI_ioctl+0x40>)
 8002a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a40:	08002a55 	.word	0x08002a55
 8002a44:	08002a69 	.word	0x08002a69
 8002a48:	08002ca7 	.word	0x08002ca7
 8002a4c:	08002b15 	.word	0x08002b15
 8002a50:	08002c0b 	.word	0x08002c0b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002a54:	f7ff fd0e 	bl	8002474 <spiselect>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8127 	beq.w	8002cae <USER_SPI_ioctl+0x2ae>
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8002a66:	e122      	b.n	8002cae <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2009      	movs	r0, #9
 8002a6c:	f7ff fd77 	bl	800255e <send_cmd>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 811d 	bne.w	8002cb2 <USER_SPI_ioctl+0x2b2>
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	2110      	movs	r1, #16
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fd12 	bl	80024a8 <rcvr_datablock>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8113 	beq.w	8002cb2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002a8c:	7b3b      	ldrb	r3, [r7, #12]
 8002a8e:	099b      	lsrs	r3, r3, #6
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d111      	bne.n	8002aba <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002a96:	7d7b      	ldrb	r3, [r7, #21]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	7d3b      	ldrb	r3, [r7, #20]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	4413      	add	r3, r2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
 8002aa4:	041b      	lsls	r3, r3, #16
 8002aa6:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8002aaa:	4413      	add	r3, r2
 8002aac:	3301      	adds	r3, #1
 8002aae:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	029a      	lsls	r2, r3, #10
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e028      	b.n	8002b0c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002aba:	7c7b      	ldrb	r3, [r7, #17]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	7dbb      	ldrb	r3, [r7, #22]
 8002ac4:	09db      	lsrs	r3, r3, #7
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	7d7b      	ldrb	r3, [r7, #21]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f003 0306 	and.w	r3, r3, #6
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	3302      	adds	r3, #2
 8002ade:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002ae2:	7d3b      	ldrb	r3, [r7, #20]
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	7cfb      	ldrb	r3, [r7, #19]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	441a      	add	r2, r3
 8002af0:	7cbb      	ldrb	r3, [r7, #18]
 8002af2:	029b      	lsls	r3, r3, #10
 8002af4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002af8:	4413      	add	r3, r2
 8002afa:	3301      	adds	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002afe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002b02:	3b09      	subs	r3, #9
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	409a      	lsls	r2, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8002b12:	e0ce      	b.n	8002cb2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002b14:	4b71      	ldr	r3, [pc, #452]	@ (8002cdc <USER_SPI_ioctl+0x2dc>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d031      	beq.n	8002b84 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002b20:	2100      	movs	r1, #0
 8002b22:	208d      	movs	r0, #141	@ 0x8d
 8002b24:	f7ff fd1b 	bl	800255e <send_cmd>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 80c3 	bne.w	8002cb6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002b30:	20ff      	movs	r0, #255	@ 0xff
 8002b32:	f7ff fc27 	bl	8002384 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	2110      	movs	r1, #16
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fcb3 	bl	80024a8 <rcvr_datablock>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80b6 	beq.w	8002cb6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002b4a:	2330      	movs	r3, #48	@ 0x30
 8002b4c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002b50:	e007      	b.n	8002b62 <USER_SPI_ioctl+0x162>
 8002b52:	20ff      	movs	r0, #255	@ 0xff
 8002b54:	f7ff fc16 	bl	8002384 <xchg_spi>
 8002b58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002b62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f3      	bne.n	8002b52 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002b6a:	7dbb      	ldrb	r3, [r7, #22]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	2310      	movs	r3, #16
 8002b74:	fa03 f202 	lsl.w	r2, r3, r2
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002b82:	e098      	b.n	8002cb6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002b84:	2100      	movs	r1, #0
 8002b86:	2009      	movs	r0, #9
 8002b88:	f7ff fce9 	bl	800255e <send_cmd>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 8091 	bne.w	8002cb6 <USER_SPI_ioctl+0x2b6>
 8002b94:	f107 030c 	add.w	r3, r7, #12
 8002b98:	2110      	movs	r1, #16
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fc84 	bl	80024a8 <rcvr_datablock>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8087 	beq.w	8002cb6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8002cdc <USER_SPI_ioctl+0x2dc>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d012      	beq.n	8002bda <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002bb4:	7dbb      	ldrb	r3, [r7, #22]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002bbc:	7dfa      	ldrb	r2, [r7, #23]
 8002bbe:	09d2      	lsrs	r2, r2, #7
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	7e7b      	ldrb	r3, [r7, #25]
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e013      	b.n	8002c02 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002bda:	7dbb      	ldrb	r3, [r7, #22]
 8002bdc:	109b      	asrs	r3, r3, #2
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	3301      	adds	r3, #1
 8002be6:	7dfa      	ldrb	r2, [r7, #23]
 8002be8:	00d2      	lsls	r2, r2, #3
 8002bea:	f002 0218 	and.w	r2, r2, #24
 8002bee:	7df9      	ldrb	r1, [r7, #23]
 8002bf0:	0949      	lsrs	r1, r1, #5
 8002bf2:	b2c9      	uxtb	r1, r1
 8002bf4:	440a      	add	r2, r1
 8002bf6:	3201      	adds	r2, #1
 8002bf8:	fb02 f303 	mul.w	r3, r2, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8002c08:	e055      	b.n	8002cb6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002c0a:	4b34      	ldr	r3, [pc, #208]	@ (8002cdc <USER_SPI_ioctl+0x2dc>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	f003 0306 	and.w	r3, r3, #6
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d051      	beq.n	8002cba <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002c16:	f107 020c 	add.w	r2, r7, #12
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	210b      	movs	r1, #11
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff feee 	bl	8002a00 <USER_SPI_ioctl>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d149      	bne.n	8002cbe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002c2a:	7b3b      	ldrb	r3, [r7, #12]
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <USER_SPI_ioctl+0x23e>
 8002c34:	7dbb      	ldrb	r3, [r7, #22]
 8002c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d041      	beq.n	8002cc2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	623b      	str	r3, [r7, #32]
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8002c4e:	4b23      	ldr	r3, [pc, #140]	@ (8002cdc <USER_SPI_ioctl+0x2dc>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d105      	bne.n	8002c66 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5c:	025b      	lsls	r3, r3, #9
 8002c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	025b      	lsls	r3, r3, #9
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002c66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c68:	2020      	movs	r0, #32
 8002c6a:	f7ff fc78 	bl	800255e <send_cmd>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d128      	bne.n	8002cc6 <USER_SPI_ioctl+0x2c6>
 8002c74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c76:	2021      	movs	r0, #33	@ 0x21
 8002c78:	f7ff fc71 	bl	800255e <send_cmd>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d121      	bne.n	8002cc6 <USER_SPI_ioctl+0x2c6>
 8002c82:	2100      	movs	r1, #0
 8002c84:	2026      	movs	r0, #38	@ 0x26
 8002c86:	f7ff fc6a 	bl	800255e <send_cmd>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11a      	bne.n	8002cc6 <USER_SPI_ioctl+0x2c6>
 8002c90:	f247 5030 	movw	r0, #30000	@ 0x7530
 8002c94:	f7ff fbbc 	bl	8002410 <wait_ready>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d013      	beq.n	8002cc6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8002ca4:	e00f      	b.n	8002cc6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002cac:	e00c      	b.n	8002cc8 <USER_SPI_ioctl+0x2c8>
		break;
 8002cae:	bf00      	nop
 8002cb0:	e00a      	b.n	8002cc8 <USER_SPI_ioctl+0x2c8>
		break;
 8002cb2:	bf00      	nop
 8002cb4:	e008      	b.n	8002cc8 <USER_SPI_ioctl+0x2c8>
		break;
 8002cb6:	bf00      	nop
 8002cb8:	e006      	b.n	8002cc8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002cba:	bf00      	nop
 8002cbc:	e004      	b.n	8002cc8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002cbe:	bf00      	nop
 8002cc0:	e002      	b.n	8002cc8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <USER_SPI_ioctl+0x2c8>
		break;
 8002cc6:	bf00      	nop
	}

	despiselect();
 8002cc8:	f7ff fbc6 	bl	8002458 <despiselect>

	return res;
 8002ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3730      	adds	r7, #48	@ 0x30
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000020 	.word	0x20000020
 8002cdc:	20000380 	.word	0x20000380

08002ce0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	4a08      	ldr	r2, [pc, #32]	@ (8002d10 <disk_status+0x30>)
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	79fa      	ldrb	r2, [r7, #7]
 8002cf8:	4905      	ldr	r1, [pc, #20]	@ (8002d10 <disk_status+0x30>)
 8002cfa:	440a      	add	r2, r1
 8002cfc:	7a12      	ldrb	r2, [r2, #8]
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4798      	blx	r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	200003ac 	.word	0x200003ac

08002d14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	4a0d      	ldr	r2, [pc, #52]	@ (8002d5c <disk_initialize+0x48>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d111      	bne.n	8002d50 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d5c <disk_initialize+0x48>)
 8002d30:	2101      	movs	r1, #1
 8002d32:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	4a09      	ldr	r2, [pc, #36]	@ (8002d5c <disk_initialize+0x48>)
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	79fa      	ldrb	r2, [r7, #7]
 8002d42:	4906      	ldr	r1, [pc, #24]	@ (8002d5c <disk_initialize+0x48>)
 8002d44:	440a      	add	r2, r1
 8002d46:	7a12      	ldrb	r2, [r2, #8]
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4798      	blx	r3
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	200003ac 	.word	0x200003ac

08002d60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <disk_read+0x3c>)
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	689c      	ldr	r4, [r3, #8]
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	4a07      	ldr	r2, [pc, #28]	@ (8002d9c <disk_read+0x3c>)
 8002d80:	4413      	add	r3, r2
 8002d82:	7a18      	ldrb	r0, [r3, #8]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	47a0      	blx	r4
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200003ac 	.word	0x200003ac

08002da0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	4603      	mov	r3, r0
 8002dae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ddc <disk_write+0x3c>)
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	68dc      	ldr	r4, [r3, #12]
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	4a07      	ldr	r2, [pc, #28]	@ (8002ddc <disk_write+0x3c>)
 8002dc0:	4413      	add	r3, r2
 8002dc2:	7a18      	ldrb	r0, [r3, #8]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	47a0      	blx	r4
 8002dcc:	4603      	mov	r3, r0
 8002dce:	75fb      	strb	r3, [r7, #23]
  return res;
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd90      	pop	{r4, r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200003ac 	.word	0x200003ac

08002de0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e016      	b.n	8002e1c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002dee:	4910      	ldr	r1, [pc, #64]	@ (8002e30 <clear_lock+0x50>)
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d108      	bne.n	8002e16 <clear_lock+0x36>
 8002e04:	490a      	ldr	r1, [pc, #40]	@ (8002e30 <clear_lock+0x50>)
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d9e5      	bls.n	8002dee <clear_lock+0xe>
	}
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000394 	.word	0x20000394

08002e34 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d038      	beq.n	8002ebc <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002e50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	f7ff ff9f 	bl	8002da0 <disk_write>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	e026      	b.n	8002ebc <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	1ad2      	subs	r2, r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d218      	bcs.n	8002ebc <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	e010      	b.n	8002eb6 <sync_window+0x82>
					wsect += fs->fsize;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	f7ff ff78 	bl	8002da0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d8eb      	bhi.n	8002e94 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d01b      	beq.n	8002f18 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ffa7 	bl	8002e34 <sync_window>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d113      	bne.n	8002f18 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	2301      	movs	r3, #1
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	f7ff ff30 	bl	8002d60 <disk_read>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d004      	beq.n	8002f10 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002f06:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
		}
	}
	return res;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d905      	bls.n	8002f3e <get_fat+0x1c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <get_fat+0x22>
		val = 1;	/* Internal error */
 8002f3e:	2301      	movs	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e0a3      	b.n	800308c <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
 8002f48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d068      	beq.n	8003026 <get_fat+0x104>
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	f300 808f 	bgt.w	8003078 <get_fat+0x156>
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d002      	beq.n	8002f64 <get_fat+0x42>
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d03f      	beq.n	8002fe2 <get_fat+0xc0>
 8002f62:	e089      	b.n	8003078 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	085b      	lsrs	r3, r3, #1
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	0a5b      	lsrs	r3, r3, #9
 8002f7c:	4413      	add	r3, r2
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ffa0 	bl	8002ec6 <move_window>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d178      	bne.n	800307e <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	60fa      	str	r2, [r7, #12]
 8002f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	5cd3      	ldrb	r3, [r2, r3]
 8002f9a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	0a5b      	lsrs	r3, r3, #9
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ff8b 	bl	8002ec6 <move_window>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d165      	bne.n	8003082 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <get_fat+0xb6>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	e002      	b.n	8002fde <get_fat+0xbc>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fde:	617b      	str	r3, [r7, #20]
			break;
 8002fe0:	e054      	b.n	800308c <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	4413      	add	r3, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff68 	bl	8002ec6 <move_window>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d144      	bne.n	8003086 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	3301      	adds	r3, #1
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b21b      	sxth	r3, r3
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	b21a      	sxth	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	b21b      	sxth	r3, r3
 800301c:	4313      	orrs	r3, r2
 800301e:	b21b      	sxth	r3, r3
 8003020:	b29b      	uxth	r3, r3
 8003022:	617b      	str	r3, [r7, #20]
			break;
 8003024:	e032      	b.n	800308c <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	09db      	lsrs	r3, r3, #7
 8003030:	4413      	add	r3, r2
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff46 	bl	8002ec6 <move_window>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d124      	bne.n	800308a <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	4413      	add	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	3303      	adds	r3, #3
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	061a      	lsls	r2, r3, #24
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	3302      	adds	r3, #2
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	041b      	lsls	r3, r3, #16
 800305e:	431a      	orrs	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	3301      	adds	r3, #1
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	4313      	orrs	r3, r2
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	7812      	ldrb	r2, [r2, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003074:	617b      	str	r3, [r7, #20]
			break;
 8003076:	e009      	b.n	800308c <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8003078:	2301      	movs	r3, #1
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	e006      	b.n	800308c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800307e:	bf00      	nop
 8003080:	e004      	b.n	800308c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003082:	bf00      	nop
 8003084:	e002      	b.n	800308c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003086:	bf00      	nop
 8003088:	e000      	b.n	800308c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800308a:	bf00      	nop
		}
	}

	return val;
 800308c:	697b      	ldr	r3, [r7, #20]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003096:	b480      	push	{r7}
 8003098:	b087      	sub	sp, #28
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800309e:	f04f 33ff 	mov.w	r3, #4294967295
 80030a2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d031      	beq.n	8003110 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	e002      	b.n	80030ba <get_ldnumber+0x24>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	3301      	adds	r3, #1
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d903      	bls.n	80030ca <get_ldnumber+0x34>
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b3a      	cmp	r3, #58	@ 0x3a
 80030c8:	d1f4      	bne.n	80030b4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b3a      	cmp	r3, #58	@ 0x3a
 80030d0:	d11c      	bne.n	800310c <get_ldnumber+0x76>
			tp = *path;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	60fa      	str	r2, [r7, #12]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	3b30      	subs	r3, #48	@ 0x30
 80030e2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b09      	cmp	r3, #9
 80030e8:	d80e      	bhi.n	8003108 <get_ldnumber+0x72>
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d10a      	bne.n	8003108 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d107      	bne.n	8003108 <get_ldnumber+0x72>
					vol = (int)i;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	3301      	adds	r3, #1
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	e002      	b.n	8003112 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003110:	693b      	ldr	r3, [r7, #16]
}
 8003112:	4618      	mov	r0, r3
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f04f 32ff 	mov.w	r2, #4294967295
 8003134:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8003138:	6839      	ldr	r1, [r7, #0]
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff fec3 	bl	8002ec6 <move_window>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <check_fs+0x2e>
		return 3;
 8003146:	2303      	movs	r3, #3
 8003148:	e04b      	b.n	80031e2 <check_fs+0xc6>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003150:	3301      	adds	r3, #1
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b21b      	sxth	r3, r3
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	b21a      	sxth	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8003160:	b21b      	sxth	r3, r3
 8003162:	4313      	orrs	r3, r2
 8003164:	b21b      	sxth	r3, r3
 8003166:	4a21      	ldr	r2, [pc, #132]	@ (80031ec <check_fs+0xd0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d001      	beq.n	8003170 <check_fs+0x54>
		return 2;
 800316c:	2302      	movs	r3, #2
 800316e:	e038      	b.n	80031e2 <check_fs+0xc6>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3336      	adds	r3, #54	@ 0x36
 8003174:	3303      	adds	r3, #3
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	061a      	lsls	r2, r3, #24
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3336      	adds	r3, #54	@ 0x36
 800317e:	3302      	adds	r3, #2
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3336      	adds	r3, #54	@ 0x36
 800318a:	3301      	adds	r3, #1
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	4313      	orrs	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8003198:	4313      	orrs	r3, r2
 800319a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800319e:	4a14      	ldr	r2, [pc, #80]	@ (80031f0 <check_fs+0xd4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <check_fs+0x8c>
		return 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e01c      	b.n	80031e2 <check_fs+0xc6>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3352      	adds	r3, #82	@ 0x52
 80031ac:	3303      	adds	r3, #3
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	061a      	lsls	r2, r3, #24
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3352      	adds	r3, #82	@ 0x52
 80031b6:	3302      	adds	r3, #2
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	041b      	lsls	r3, r3, #16
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3352      	adds	r3, #82	@ 0x52
 80031c2:	3301      	adds	r3, #1
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	4313      	orrs	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031d6:	4a06      	ldr	r2, [pc, #24]	@ (80031f0 <check_fs+0xd4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <check_fs+0xc4>
		return 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	e000      	b.n	80031e2 <check_fs+0xc6>

	return 1;
 80031e0:	2301      	movs	r3, #1
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	ffffaa55 	.word	0xffffaa55
 80031f0:	00544146 	.word	0x00544146

080031f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b096      	sub	sp, #88	@ 0x58
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003208:	68b8      	ldr	r0, [r7, #8]
 800320a:	f7ff ff44 	bl	8003096 <get_ldnumber>
 800320e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003212:	2b00      	cmp	r3, #0
 8003214:	da01      	bge.n	800321a <find_volume+0x26>
 8003216:	230b      	movs	r3, #11
 8003218:	e2ae      	b.n	8003778 <find_volume+0x584>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800321a:	4a9e      	ldr	r2, [pc, #632]	@ (8003494 <find_volume+0x2a0>)
 800321c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003222:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <find_volume+0x3a>
 800322a:	230c      	movs	r3, #12
 800322c:	e2a4      	b.n	8003778 <find_volume+0x584>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003232:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8003234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003236:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800323a:	2b00      	cmp	r3, #0
 800323c:	d01b      	beq.n	8003276 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800323e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003240:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fd4b 	bl	8002ce0 <disk_status>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003250:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10c      	bne.n	8003276 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <find_volume+0x7e>
 8003262:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800326e:	230a      	movs	r3, #10
 8003270:	e282      	b.n	8003778 <find_volume+0x584>
			return FR_OK;				/* The file system object is valid */
 8003272:	2300      	movs	r3, #0
 8003274:	e280      	b.n	8003778 <find_volume+0x584>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800327e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003280:	b2da      	uxtb	r2, r3
 8003282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003284:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fd40 	bl	8002d14 <disk_initialize>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800329a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80032a6:	2303      	movs	r3, #3
 80032a8:	e266      	b.n	8003778 <find_volume+0x584>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <find_volume+0xcc>
 80032b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80032bc:	230a      	movs	r3, #10
 80032be:	e25b      	b.n	8003778 <find_volume+0x584>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80032c4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80032c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80032c8:	f7ff ff28 	bl	800311c <check_fs>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80032d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d153      	bne.n	8003382 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80032da:	2300      	movs	r3, #0
 80032dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80032de:	e028      	b.n	8003332 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80032e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80032ea:	4413      	add	r3, r2
 80032ec:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80032ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f0:	3304      	adds	r3, #4
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d012      	beq.n	800331e <find_volume+0x12a>
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	330b      	adds	r3, #11
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	061a      	lsls	r2, r3, #24
 8003300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003302:	330a      	adds	r3, #10
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	041b      	lsls	r3, r3, #16
 8003308:	431a      	orrs	r2, r3
 800330a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330c:	3309      	adds	r3, #9
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	4313      	orrs	r3, r2
 8003314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003316:	3208      	adds	r2, #8
 8003318:	7812      	ldrb	r2, [r2, #0]
 800331a:	431a      	orrs	r2, r3
 800331c:	e000      	b.n	8003320 <find_volume+0x12c>
 800331e:	2200      	movs	r2, #0
 8003320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	3358      	adds	r3, #88	@ 0x58
 8003326:	443b      	add	r3, r7
 8003328:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800332c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800332e:	3301      	adds	r3, #1
 8003330:	643b      	str	r3, [r7, #64]	@ 0x40
 8003332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003334:	2b03      	cmp	r3, #3
 8003336:	d9d3      	bls.n	80032e0 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8003338:	2300      	movs	r3, #0
 800333a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800333c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <find_volume+0x154>
 8003342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003344:	3b01      	subs	r3, #1
 8003346:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8003348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	3358      	adds	r3, #88	@ 0x58
 800334e:	443b      	add	r3, r7
 8003350:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003354:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8003356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <find_volume+0x174>
 800335c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800335e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003360:	f7ff fedc 	bl	800311c <check_fs>
 8003364:	4603      	mov	r3, r0
 8003366:	e000      	b.n	800336a <find_volume+0x176>
 8003368:	2302      	movs	r3, #2
 800336a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800336e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <find_volume+0x18e>
 8003376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003378:	3301      	adds	r3, #1
 800337a:	643b      	str	r3, [r7, #64]	@ 0x40
 800337c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800337e:	2b03      	cmp	r3, #3
 8003380:	d9e2      	bls.n	8003348 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003382:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003386:	2b03      	cmp	r3, #3
 8003388:	d101      	bne.n	800338e <find_volume+0x19a>
 800338a:	2301      	movs	r3, #1
 800338c:	e1f4      	b.n	8003778 <find_volume+0x584>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800338e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <find_volume+0x1a6>
 8003396:	230d      	movs	r3, #13
 8003398:	e1ee      	b.n	8003778 <find_volume+0x584>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800339a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339c:	7b1b      	ldrb	r3, [r3, #12]
 800339e:	b21b      	sxth	r3, r3
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	b21a      	sxth	r2, r3
 80033a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a6:	7adb      	ldrb	r3, [r3, #11]
 80033a8:	b21b      	sxth	r3, r3
 80033aa:	4313      	orrs	r3, r2
 80033ac:	b21b      	sxth	r3, r3
 80033ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033b2:	d001      	beq.n	80033b8 <find_volume+0x1c4>
		return FR_NO_FILESYSTEM;
 80033b4:	230d      	movs	r3, #13
 80033b6:	e1df      	b.n	8003778 <find_volume+0x584>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80033b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ba:	7ddb      	ldrb	r3, [r3, #23]
 80033bc:	b21b      	sxth	r3, r3
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	b21a      	sxth	r2, r3
 80033c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c4:	7d9b      	ldrb	r3, [r3, #22]
 80033c6:	b21b      	sxth	r3, r3
 80033c8:	4313      	orrs	r3, r2
 80033ca:	b21b      	sxth	r3, r3
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80033d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d112      	bne.n	80033fc <find_volume+0x208>
 80033d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80033dc:	061a      	lsls	r2, r3, #24
 80033de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	431a      	orrs	r2, r3
 80033e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	4313      	orrs	r3, r2
 80033f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033f4:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80033f8:	4313      	orrs	r3, r2
 80033fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 80033fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003400:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8003404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003406:	7c1a      	ldrb	r2, [r3, #16]
 8003408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340a:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003410:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8003414:	2b01      	cmp	r3, #1
 8003416:	d006      	beq.n	8003426 <find_volume+0x232>
 8003418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800341a:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800341e:	2b02      	cmp	r3, #2
 8003420:	d001      	beq.n	8003426 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8003422:	230d      	movs	r3, #13
 8003424:	e1a8      	b.n	8003778 <find_volume+0x584>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8003426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003428:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800342c:	461a      	mov	r2, r3
 800342e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003430:	fb02 f303 	mul.w	r3, r2, r3
 8003434:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8003436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003438:	7b5a      	ldrb	r2, [r3, #13]
 800343a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343c:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8003440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003442:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <find_volume+0x26c>
 800344a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344c:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8003450:	461a      	mov	r2, r3
 8003452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003454:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8003458:	3b01      	subs	r3, #1
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8003460:	230d      	movs	r3, #13
 8003462:	e189      	b.n	8003778 <find_volume+0x584>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003466:	7c9b      	ldrb	r3, [r3, #18]
 8003468:	b21b      	sxth	r3, r3
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	b21a      	sxth	r2, r3
 800346e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003470:	7c5b      	ldrb	r3, [r3, #17]
 8003472:	b21b      	sxth	r3, r3
 8003474:	4313      	orrs	r3, r2
 8003476:	b21b      	sxth	r3, r3
 8003478:	b29a      	uxth	r2, r3
 800347a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800347c:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003482:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8003490:	230d      	movs	r3, #13
 8003492:	e171      	b.n	8003778 <find_volume+0x584>
 8003494:	2000038c 	.word	0x2000038c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8003498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349a:	7d1b      	ldrb	r3, [r3, #20]
 800349c:	b21b      	sxth	r3, r3
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	b21a      	sxth	r2, r3
 80034a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a4:	7cdb      	ldrb	r3, [r3, #19]
 80034a6:	b21b      	sxth	r3, r3
 80034a8:	4313      	orrs	r3, r2
 80034aa:	b21b      	sxth	r3, r3
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80034b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d112      	bne.n	80034dc <find_volume+0x2e8>
 80034b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80034bc:	061a      	lsls	r2, r3, #24
 80034be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	4313      	orrs	r3, r2
 80034d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034d4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80034d8:	4313      	orrs	r3, r2
 80034da:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80034dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034de:	7bdb      	ldrb	r3, [r3, #15]
 80034e0:	b21b      	sxth	r3, r3
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	b21a      	sxth	r2, r3
 80034e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e8:	7b9b      	ldrb	r3, [r3, #14]
 80034ea:	b21b      	sxth	r3, r3
 80034ec:	4313      	orrs	r3, r2
 80034ee:	b21b      	sxth	r3, r3
 80034f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80034f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <find_volume+0x308>
 80034f8:	230d      	movs	r3, #13
 80034fa:	e13d      	b.n	8003778 <find_volume+0x584>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80034fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80034fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003500:	4413      	add	r3, r2
 8003502:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003504:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 8003508:	0912      	lsrs	r2, r2, #4
 800350a:	b292      	uxth	r2, r2
 800350c:	4413      	add	r3, r2
 800350e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003510:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003514:	429a      	cmp	r2, r3
 8003516:	d201      	bcs.n	800351c <find_volume+0x328>
 8003518:	230d      	movs	r3, #13
 800351a:	e12d      	b.n	8003778 <find_volume+0x584>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800351c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003524:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8003528:	fbb3 f3f2 	udiv	r3, r3, r2
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <find_volume+0x344>
 8003534:	230d      	movs	r3, #13
 8003536:	e11f      	b.n	8003778 <find_volume+0x584>
	fmt = FS_FAT12;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8003544:	4293      	cmp	r3, r2
 8003546:	d902      	bls.n	800354e <find_volume+0x35a>
 8003548:	2302      	movs	r3, #2
 800354a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8003554:	4293      	cmp	r3, r2
 8003556:	d902      	bls.n	800355e <find_volume+0x36a>
 8003558:	2303      	movs	r3, #3
 800355a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	1c9a      	adds	r2, r3, #2
 8003562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003564:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8003568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800356a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800356c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8003570:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003574:	441a      	add	r2, r3
 8003576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003578:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800357c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800357e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003580:	441a      	add	r2, r3
 8003582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003584:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
	if (fmt == FS_FAT32) {
 8003588:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800358c:	2b03      	cmp	r3, #3
 800358e:	d121      	bne.n	80035d4 <find_volume+0x3e0>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8003590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003592:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <find_volume+0x3aa>
 800359a:	230d      	movs	r3, #13
 800359c:	e0ec      	b.n	8003778 <find_volume+0x584>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800359e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80035a4:	061a      	lsls	r2, r3, #24
 80035a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80035ac:	041b      	lsls	r3, r3, #16
 80035ae:	431a      	orrs	r2, r3
 80035b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	4313      	orrs	r3, r2
 80035ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035bc:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80035c0:	431a      	orrs	r2, r3
 80035c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c4:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80035c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035d2:	e025      	b.n	8003620 <find_volume+0x42c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80035d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <find_volume+0x3ee>
 80035de:	230d      	movs	r3, #13
 80035e0:	e0ca      	b.n	8003778 <find_volume+0x584>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80035e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e4:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80035e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ea:	441a      	add	r2, r3
 80035ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ee:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80035f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d104      	bne.n	8003604 <find_volume+0x410>
 80035fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	e00c      	b.n	800361e <find_volume+0x42a>
 8003604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003606:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800360a:	4613      	mov	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	085a      	lsrs	r2, r3, #1
 8003612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003614:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800361e:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8003620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003622:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8003626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003628:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800362c:	0a5b      	lsrs	r3, r3, #9
 800362e:	429a      	cmp	r2, r3
 8003630:	d201      	bcs.n	8003636 <find_volume+0x442>
		return FR_NO_FILESYSTEM;
 8003632:	230d      	movs	r3, #13
 8003634:	e0a0      	b.n	8003778 <find_volume+0x584>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003638:	f04f 32ff 	mov.w	r2, #4294967295
 800363c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 8003640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003642:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8003646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003648:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800364c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364e:	2280      	movs	r2, #128	@ 0x80
 8003650:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8003654:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003658:	2b03      	cmp	r3, #3
 800365a:	d179      	bne.n	8003750 <find_volume+0x55c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800365c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003662:	b21b      	sxth	r3, r3
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	b21a      	sxth	r2, r3
 8003668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800366e:	b21b      	sxth	r3, r3
 8003670:	4313      	orrs	r3, r2
 8003672:	b21b      	sxth	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d16b      	bne.n	8003750 <find_volume+0x55c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8003678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800367a:	3301      	adds	r3, #1
 800367c:	4619      	mov	r1, r3
 800367e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003680:	f7ff fc21 	bl	8002ec6 <move_window>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d162      	bne.n	8003750 <find_volume+0x55c>
	{
		fs->fsi_flag = 0;
 800368a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003694:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8003698:	b21b      	sxth	r3, r3
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	b21a      	sxth	r2, r3
 800369e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a0:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	4313      	orrs	r3, r2
 80036a8:	b21b      	sxth	r3, r3
 80036aa:	4a35      	ldr	r2, [pc, #212]	@ (8003780 <find_volume+0x58c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d14f      	bne.n	8003750 <find_volume+0x55c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80036b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b2:	78db      	ldrb	r3, [r3, #3]
 80036b4:	061a      	lsls	r2, r3, #24
 80036b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b8:	789b      	ldrb	r3, [r3, #2]
 80036ba:	041b      	lsls	r3, r3, #16
 80036bc:	431a      	orrs	r2, r3
 80036be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c0:	785b      	ldrb	r3, [r3, #1]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	4313      	orrs	r3, r2
 80036c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036c8:	7812      	ldrb	r2, [r2, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003784 <find_volume+0x590>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d13e      	bne.n	8003750 <find_volume+0x55c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80036d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d4:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 80036d8:	061a      	lsls	r2, r3, #24
 80036da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036dc:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 80036e0:	041b      	lsls	r3, r3, #16
 80036e2:	431a      	orrs	r2, r3
 80036e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e6:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	4313      	orrs	r3, r2
 80036ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036f0:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 80036f4:	4313      	orrs	r3, r2
 80036f6:	4a24      	ldr	r2, [pc, #144]	@ (8003788 <find_volume+0x594>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d129      	bne.n	8003750 <find_volume+0x55c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80036fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fe:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8003702:	061a      	lsls	r2, r3, #24
 8003704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003706:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	431a      	orrs	r2, r3
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8003714:	021b      	lsls	r3, r3, #8
 8003716:	4313      	orrs	r3, r2
 8003718:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800371a:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800371e:	431a      	orrs	r2, r3
 8003720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003722:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8003726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003728:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800372c:	061a      	lsls	r2, r3, #24
 800372e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003730:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8003734:	041b      	lsls	r3, r3, #16
 8003736:	431a      	orrs	r2, r3
 8003738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800373a:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	4313      	orrs	r3, r2
 8003742:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003744:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8003748:	431a      	orrs	r2, r3
 800374a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8003750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003752:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8003756:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800375a:	4b0c      	ldr	r3, [pc, #48]	@ (800378c <find_volume+0x598>)
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	3301      	adds	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	4b0a      	ldr	r3, [pc, #40]	@ (800378c <find_volume+0x598>)
 8003764:	801a      	strh	r2, [r3, #0]
 8003766:	4b09      	ldr	r3, [pc, #36]	@ (800378c <find_volume+0x598>)
 8003768:	881a      	ldrh	r2, [r3, #0]
 800376a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376c:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8003770:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003772:	f7ff fb35 	bl	8002de0 <clear_lock>
#endif

	return FR_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3758      	adds	r7, #88	@ 0x58
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	ffffaa55 	.word	0xffffaa55
 8003784:	41615252 	.word	0x41615252
 8003788:	61417272 	.word	0x61417272
 800378c:	20000390 	.word	0x20000390

08003790 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80037a2:	f107 0310 	add.w	r3, r7, #16
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fc75 	bl	8003096 <get_ldnumber>
 80037ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	da01      	bge.n	80037b8 <f_mount+0x28>
 80037b4:	230b      	movs	r3, #11
 80037b6:	e02d      	b.n	8003814 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80037b8:	4a18      	ldr	r2, [pc, #96]	@ (800381c <f_mount+0x8c>)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d006      	beq.n	80037d6 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80037c8:	69b8      	ldr	r0, [r7, #24]
 80037ca:	f7ff fb09 	bl	8002de0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	490d      	ldr	r1, [pc, #52]	@ (800381c <f_mount+0x8c>)
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <f_mount+0x6a>
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d001      	beq.n	80037fe <f_mount+0x6e>
 80037fa:	2300      	movs	r3, #0
 80037fc:	e00a      	b.n	8003814 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80037fe:	f107 0108 	add.w	r1, r7, #8
 8003802:	f107 030c 	add.w	r3, r7, #12
 8003806:	2200      	movs	r2, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fcf3 	bl	80031f4 <find_volume>
 800380e:	4603      	mov	r3, r0
 8003810:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8003812:	7dfb      	ldrb	r3, [r7, #23]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	2000038c 	.word	0x2000038c

08003820 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08e      	sub	sp, #56	@ 0x38
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	2200      	movs	r2, #0
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff fcdd 	bl	80031f4 <find_volume>
 800383a:	4603      	mov	r3, r0
 800383c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	fs = *fatfs;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8003846:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 80b0 	bne.w	80039b0 <f_getfree+0x190>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800385c:	3b02      	subs	r3, #2
 800385e:	429a      	cmp	r2, r3
 8003860:	d805      	bhi.n	800386e <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	e0a0      	b.n	80039b0 <f_getfree+0x190>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8003874:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 800387a:	7efb      	ldrb	r3, [r7, #27]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d125      	bne.n	80038cc <f_getfree+0xac>
				clst = 2;
 8003880:	2302      	movs	r3, #2
 8003882:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 8003884:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003886:	69f8      	ldr	r0, [r7, #28]
 8003888:	f7ff fb4b 	bl	8002f22 <get_fat>
 800388c:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d103      	bne.n	800389e <f_getfree+0x7e>
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800389c:	e078      	b.n	8003990 <f_getfree+0x170>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d103      	bne.n	80038ac <f_getfree+0x8c>
 80038a4:	2302      	movs	r3, #2
 80038a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80038aa:	e071      	b.n	8003990 <f_getfree+0x170>
					if (stat == 0) n++;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d102      	bne.n	80038b8 <f_getfree+0x98>
 80038b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b4:	3301      	adds	r3, #1
 80038b6:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 80038b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ba:	3301      	adds	r3, #1
 80038bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80038c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d3dc      	bcc.n	8003884 <f_getfree+0x64>
 80038ca:	e061      	b.n	8003990 <f_getfree+0x170>
			} else {
				clst = fs->n_fatent;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80038d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e0:	2300      	movs	r3, #0
 80038e2:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 80038e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d112      	bne.n	8003910 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 80038ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80038f0:	4619      	mov	r1, r3
 80038f2:	69f8      	ldr	r0, [r7, #28]
 80038f4:	f7ff fae7 	bl	8002ec6 <move_window>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (res != FR_OK) break;
 80038fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003902:	2b00      	cmp	r3, #0
 8003904:	d143      	bne.n	800398e <f_getfree+0x16e>
						p = fs->win.d8;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800390a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 8003910:	7efb      	ldrb	r3, [r7, #27]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d116      	bne.n	8003944 <f_getfree+0x124>
						if (LD_WORD(p) == 0) n++;
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	3301      	adds	r3, #1
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	b21b      	sxth	r3, r3
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	b21a      	sxth	r2, r3
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	b21b      	sxth	r3, r3
 8003928:	4313      	orrs	r3, r2
 800392a:	b21b      	sxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d102      	bne.n	8003936 <f_getfree+0x116>
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	3301      	adds	r3, #1
 8003934:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	3302      	adds	r3, #2
 800393a:	623b      	str	r3, [r7, #32]
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	3b02      	subs	r3, #2
 8003940:	627b      	str	r3, [r7, #36]	@ 0x24
 8003942:	e01d      	b.n	8003980 <f_getfree+0x160>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	3303      	adds	r3, #3
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	061a      	lsls	r2, r3, #24
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	3302      	adds	r3, #2
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	041b      	lsls	r3, r3, #16
 8003954:	431a      	orrs	r2, r3
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	3301      	adds	r3, #1
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	4313      	orrs	r3, r2
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	7812      	ldrb	r2, [r2, #0]
 8003964:	4313      	orrs	r3, r2
 8003966:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <f_getfree+0x154>
 800396e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003970:	3301      	adds	r3, #1
 8003972:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	3304      	adds	r3, #4
 8003978:	623b      	str	r3, [r7, #32]
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	3b04      	subs	r3, #4
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 8003980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003982:	3b01      	subs	r3, #1
 8003984:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ab      	bne.n	80038e4 <f_getfree+0xc4>
 800398c:	e000      	b.n	8003990 <f_getfree+0x170>
						if (res != FR_OK) break;
 800398e:	bf00      	nop
			}
			fs->free_clust = n;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003994:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fs->fsi_flag |= 1;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
			*nclst = n;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ae:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80039b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3738      	adds	r7, #56	@ 0x38
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	4613      	mov	r3, r2
 80039c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80039d2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a4c <FATFS_LinkDriverEx+0x90>)
 80039d4:	7a5b      	ldrb	r3, [r3, #9]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d831      	bhi.n	8003a40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80039dc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a4c <FATFS_LinkDriverEx+0x90>)
 80039de:	7a5b      	ldrb	r3, [r3, #9]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	4b19      	ldr	r3, [pc, #100]	@ (8003a4c <FATFS_LinkDriverEx+0x90>)
 80039e6:	2100      	movs	r1, #0
 80039e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80039ea:	4b18      	ldr	r3, [pc, #96]	@ (8003a4c <FATFS_LinkDriverEx+0x90>)
 80039ec:	7a5b      	ldrb	r3, [r3, #9]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	4a16      	ldr	r2, [pc, #88]	@ (8003a4c <FATFS_LinkDriverEx+0x90>)
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80039fa:	4b14      	ldr	r3, [pc, #80]	@ (8003a4c <FATFS_LinkDriverEx+0x90>)
 80039fc:	7a5b      	ldrb	r3, [r3, #9]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	4b12      	ldr	r3, [pc, #72]	@ (8003a4c <FATFS_LinkDriverEx+0x90>)
 8003a04:	4413      	add	r3, r2
 8003a06:	79fa      	ldrb	r2, [r7, #7]
 8003a08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003a0a:	4b10      	ldr	r3, [pc, #64]	@ (8003a4c <FATFS_LinkDriverEx+0x90>)
 8003a0c:	7a5b      	ldrb	r3, [r3, #9]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	b2d1      	uxtb	r1, r2
 8003a14:	4a0d      	ldr	r2, [pc, #52]	@ (8003a4c <FATFS_LinkDriverEx+0x90>)
 8003a16:	7251      	strb	r1, [r2, #9]
 8003a18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003a1a:	7dbb      	ldrb	r3, [r7, #22]
 8003a1c:	3330      	adds	r3, #48	@ 0x30
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	3301      	adds	r3, #1
 8003a28:	223a      	movs	r2, #58	@ 0x3a
 8003a2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	3302      	adds	r3, #2
 8003a30:	222f      	movs	r2, #47	@ 0x2f
 8003a32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	3303      	adds	r3, #3
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8003a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	200003ac 	.word	0x200003ac

08003a50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	6839      	ldr	r1, [r7, #0]
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ffac 	bl	80039bc <FATFS_LinkDriverEx>
 8003a64:	4603      	mov	r3, r0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <siprintf>:
 8003a70:	b40e      	push	{r1, r2, r3}
 8003a72:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a76:	b510      	push	{r4, lr}
 8003a78:	2400      	movs	r4, #0
 8003a7a:	b09d      	sub	sp, #116	@ 0x74
 8003a7c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003a7e:	9002      	str	r0, [sp, #8]
 8003a80:	9006      	str	r0, [sp, #24]
 8003a82:	9107      	str	r1, [sp, #28]
 8003a84:	9104      	str	r1, [sp, #16]
 8003a86:	4809      	ldr	r0, [pc, #36]	@ (8003aac <siprintf+0x3c>)
 8003a88:	4909      	ldr	r1, [pc, #36]	@ (8003ab0 <siprintf+0x40>)
 8003a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a8e:	9105      	str	r1, [sp, #20]
 8003a90:	6800      	ldr	r0, [r0, #0]
 8003a92:	a902      	add	r1, sp, #8
 8003a94:	9301      	str	r3, [sp, #4]
 8003a96:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003a98:	f000 f992 	bl	8003dc0 <_svfiprintf_r>
 8003a9c:	9b02      	ldr	r3, [sp, #8]
 8003a9e:	701c      	strb	r4, [r3, #0]
 8003aa0:	b01d      	add	sp, #116	@ 0x74
 8003aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aa6:	b003      	add	sp, #12
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000024 	.word	0x20000024
 8003ab0:	ffff0208 	.word	0xffff0208

08003ab4 <memset>:
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	4402      	add	r2, r0
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d100      	bne.n	8003abe <memset+0xa>
 8003abc:	4770      	bx	lr
 8003abe:	f803 1b01 	strb.w	r1, [r3], #1
 8003ac2:	e7f9      	b.n	8003ab8 <memset+0x4>

08003ac4 <__errno>:
 8003ac4:	4b01      	ldr	r3, [pc, #4]	@ (8003acc <__errno+0x8>)
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000024 	.word	0x20000024

08003ad0 <__libc_init_array>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	2600      	movs	r6, #0
 8003ad4:	4d0c      	ldr	r5, [pc, #48]	@ (8003b08 <__libc_init_array+0x38>)
 8003ad6:	4c0d      	ldr	r4, [pc, #52]	@ (8003b0c <__libc_init_array+0x3c>)
 8003ad8:	1b64      	subs	r4, r4, r5
 8003ada:	10a4      	asrs	r4, r4, #2
 8003adc:	42a6      	cmp	r6, r4
 8003ade:	d109      	bne.n	8003af4 <__libc_init_array+0x24>
 8003ae0:	f000 fc76 	bl	80043d0 <_init>
 8003ae4:	2600      	movs	r6, #0
 8003ae6:	4d0a      	ldr	r5, [pc, #40]	@ (8003b10 <__libc_init_array+0x40>)
 8003ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8003b14 <__libc_init_array+0x44>)
 8003aea:	1b64      	subs	r4, r4, r5
 8003aec:	10a4      	asrs	r4, r4, #2
 8003aee:	42a6      	cmp	r6, r4
 8003af0:	d105      	bne.n	8003afe <__libc_init_array+0x2e>
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
 8003af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af8:	4798      	blx	r3
 8003afa:	3601      	adds	r6, #1
 8003afc:	e7ee      	b.n	8003adc <__libc_init_array+0xc>
 8003afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b02:	4798      	blx	r3
 8003b04:	3601      	adds	r6, #1
 8003b06:	e7f2      	b.n	8003aee <__libc_init_array+0x1e>
 8003b08:	08004530 	.word	0x08004530
 8003b0c:	08004530 	.word	0x08004530
 8003b10:	08004530 	.word	0x08004530
 8003b14:	08004534 	.word	0x08004534

08003b18 <__retarget_lock_acquire_recursive>:
 8003b18:	4770      	bx	lr

08003b1a <__retarget_lock_release_recursive>:
 8003b1a:	4770      	bx	lr

08003b1c <_free_r>:
 8003b1c:	b538      	push	{r3, r4, r5, lr}
 8003b1e:	4605      	mov	r5, r0
 8003b20:	2900      	cmp	r1, #0
 8003b22:	d040      	beq.n	8003ba6 <_free_r+0x8a>
 8003b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b28:	1f0c      	subs	r4, r1, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bfb8      	it	lt
 8003b2e:	18e4      	addlt	r4, r4, r3
 8003b30:	f000 f8de 	bl	8003cf0 <__malloc_lock>
 8003b34:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba8 <_free_r+0x8c>)
 8003b36:	6813      	ldr	r3, [r2, #0]
 8003b38:	b933      	cbnz	r3, 8003b48 <_free_r+0x2c>
 8003b3a:	6063      	str	r3, [r4, #4]
 8003b3c:	6014      	str	r4, [r2, #0]
 8003b3e:	4628      	mov	r0, r5
 8003b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b44:	f000 b8da 	b.w	8003cfc <__malloc_unlock>
 8003b48:	42a3      	cmp	r3, r4
 8003b4a:	d908      	bls.n	8003b5e <_free_r+0x42>
 8003b4c:	6820      	ldr	r0, [r4, #0]
 8003b4e:	1821      	adds	r1, r4, r0
 8003b50:	428b      	cmp	r3, r1
 8003b52:	bf01      	itttt	eq
 8003b54:	6819      	ldreq	r1, [r3, #0]
 8003b56:	685b      	ldreq	r3, [r3, #4]
 8003b58:	1809      	addeq	r1, r1, r0
 8003b5a:	6021      	streq	r1, [r4, #0]
 8003b5c:	e7ed      	b.n	8003b3a <_free_r+0x1e>
 8003b5e:	461a      	mov	r2, r3
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	b10b      	cbz	r3, 8003b68 <_free_r+0x4c>
 8003b64:	42a3      	cmp	r3, r4
 8003b66:	d9fa      	bls.n	8003b5e <_free_r+0x42>
 8003b68:	6811      	ldr	r1, [r2, #0]
 8003b6a:	1850      	adds	r0, r2, r1
 8003b6c:	42a0      	cmp	r0, r4
 8003b6e:	d10b      	bne.n	8003b88 <_free_r+0x6c>
 8003b70:	6820      	ldr	r0, [r4, #0]
 8003b72:	4401      	add	r1, r0
 8003b74:	1850      	adds	r0, r2, r1
 8003b76:	4283      	cmp	r3, r0
 8003b78:	6011      	str	r1, [r2, #0]
 8003b7a:	d1e0      	bne.n	8003b3e <_free_r+0x22>
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	4408      	add	r0, r1
 8003b82:	6010      	str	r0, [r2, #0]
 8003b84:	6053      	str	r3, [r2, #4]
 8003b86:	e7da      	b.n	8003b3e <_free_r+0x22>
 8003b88:	d902      	bls.n	8003b90 <_free_r+0x74>
 8003b8a:	230c      	movs	r3, #12
 8003b8c:	602b      	str	r3, [r5, #0]
 8003b8e:	e7d6      	b.n	8003b3e <_free_r+0x22>
 8003b90:	6820      	ldr	r0, [r4, #0]
 8003b92:	1821      	adds	r1, r4, r0
 8003b94:	428b      	cmp	r3, r1
 8003b96:	bf01      	itttt	eq
 8003b98:	6819      	ldreq	r1, [r3, #0]
 8003b9a:	685b      	ldreq	r3, [r3, #4]
 8003b9c:	1809      	addeq	r1, r1, r0
 8003b9e:	6021      	streq	r1, [r4, #0]
 8003ba0:	6063      	str	r3, [r4, #4]
 8003ba2:	6054      	str	r4, [r2, #4]
 8003ba4:	e7cb      	b.n	8003b3e <_free_r+0x22>
 8003ba6:	bd38      	pop	{r3, r4, r5, pc}
 8003ba8:	200004fc 	.word	0x200004fc

08003bac <sbrk_aligned>:
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	4e0f      	ldr	r6, [pc, #60]	@ (8003bec <sbrk_aligned+0x40>)
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	6831      	ldr	r1, [r6, #0]
 8003bb4:	4605      	mov	r5, r0
 8003bb6:	b911      	cbnz	r1, 8003bbe <sbrk_aligned+0x12>
 8003bb8:	f000 fba8 	bl	800430c <_sbrk_r>
 8003bbc:	6030      	str	r0, [r6, #0]
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f000 fba3 	bl	800430c <_sbrk_r>
 8003bc6:	1c43      	adds	r3, r0, #1
 8003bc8:	d103      	bne.n	8003bd2 <sbrk_aligned+0x26>
 8003bca:	f04f 34ff 	mov.w	r4, #4294967295
 8003bce:	4620      	mov	r0, r4
 8003bd0:	bd70      	pop	{r4, r5, r6, pc}
 8003bd2:	1cc4      	adds	r4, r0, #3
 8003bd4:	f024 0403 	bic.w	r4, r4, #3
 8003bd8:	42a0      	cmp	r0, r4
 8003bda:	d0f8      	beq.n	8003bce <sbrk_aligned+0x22>
 8003bdc:	1a21      	subs	r1, r4, r0
 8003bde:	4628      	mov	r0, r5
 8003be0:	f000 fb94 	bl	800430c <_sbrk_r>
 8003be4:	3001      	adds	r0, #1
 8003be6:	d1f2      	bne.n	8003bce <sbrk_aligned+0x22>
 8003be8:	e7ef      	b.n	8003bca <sbrk_aligned+0x1e>
 8003bea:	bf00      	nop
 8003bec:	200004f8 	.word	0x200004f8

08003bf0 <_malloc_r>:
 8003bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bf4:	1ccd      	adds	r5, r1, #3
 8003bf6:	f025 0503 	bic.w	r5, r5, #3
 8003bfa:	3508      	adds	r5, #8
 8003bfc:	2d0c      	cmp	r5, #12
 8003bfe:	bf38      	it	cc
 8003c00:	250c      	movcc	r5, #12
 8003c02:	2d00      	cmp	r5, #0
 8003c04:	4606      	mov	r6, r0
 8003c06:	db01      	blt.n	8003c0c <_malloc_r+0x1c>
 8003c08:	42a9      	cmp	r1, r5
 8003c0a:	d904      	bls.n	8003c16 <_malloc_r+0x26>
 8003c0c:	230c      	movs	r3, #12
 8003c0e:	6033      	str	r3, [r6, #0]
 8003c10:	2000      	movs	r0, #0
 8003c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cec <_malloc_r+0xfc>
 8003c1a:	f000 f869 	bl	8003cf0 <__malloc_lock>
 8003c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8003c22:	461c      	mov	r4, r3
 8003c24:	bb44      	cbnz	r4, 8003c78 <_malloc_r+0x88>
 8003c26:	4629      	mov	r1, r5
 8003c28:	4630      	mov	r0, r6
 8003c2a:	f7ff ffbf 	bl	8003bac <sbrk_aligned>
 8003c2e:	1c43      	adds	r3, r0, #1
 8003c30:	4604      	mov	r4, r0
 8003c32:	d158      	bne.n	8003ce6 <_malloc_r+0xf6>
 8003c34:	f8d8 4000 	ldr.w	r4, [r8]
 8003c38:	4627      	mov	r7, r4
 8003c3a:	2f00      	cmp	r7, #0
 8003c3c:	d143      	bne.n	8003cc6 <_malloc_r+0xd6>
 8003c3e:	2c00      	cmp	r4, #0
 8003c40:	d04b      	beq.n	8003cda <_malloc_r+0xea>
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	4639      	mov	r1, r7
 8003c46:	4630      	mov	r0, r6
 8003c48:	eb04 0903 	add.w	r9, r4, r3
 8003c4c:	f000 fb5e 	bl	800430c <_sbrk_r>
 8003c50:	4581      	cmp	r9, r0
 8003c52:	d142      	bne.n	8003cda <_malloc_r+0xea>
 8003c54:	6821      	ldr	r1, [r4, #0]
 8003c56:	4630      	mov	r0, r6
 8003c58:	1a6d      	subs	r5, r5, r1
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	f7ff ffa6 	bl	8003bac <sbrk_aligned>
 8003c60:	3001      	adds	r0, #1
 8003c62:	d03a      	beq.n	8003cda <_malloc_r+0xea>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	442b      	add	r3, r5
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	bb62      	cbnz	r2, 8003ccc <_malloc_r+0xdc>
 8003c72:	f8c8 7000 	str.w	r7, [r8]
 8003c76:	e00f      	b.n	8003c98 <_malloc_r+0xa8>
 8003c78:	6822      	ldr	r2, [r4, #0]
 8003c7a:	1b52      	subs	r2, r2, r5
 8003c7c:	d420      	bmi.n	8003cc0 <_malloc_r+0xd0>
 8003c7e:	2a0b      	cmp	r2, #11
 8003c80:	d917      	bls.n	8003cb2 <_malloc_r+0xc2>
 8003c82:	1961      	adds	r1, r4, r5
 8003c84:	42a3      	cmp	r3, r4
 8003c86:	6025      	str	r5, [r4, #0]
 8003c88:	bf18      	it	ne
 8003c8a:	6059      	strne	r1, [r3, #4]
 8003c8c:	6863      	ldr	r3, [r4, #4]
 8003c8e:	bf08      	it	eq
 8003c90:	f8c8 1000 	streq.w	r1, [r8]
 8003c94:	5162      	str	r2, [r4, r5]
 8003c96:	604b      	str	r3, [r1, #4]
 8003c98:	4630      	mov	r0, r6
 8003c9a:	f000 f82f 	bl	8003cfc <__malloc_unlock>
 8003c9e:	f104 000b 	add.w	r0, r4, #11
 8003ca2:	1d23      	adds	r3, r4, #4
 8003ca4:	f020 0007 	bic.w	r0, r0, #7
 8003ca8:	1ac2      	subs	r2, r0, r3
 8003caa:	bf1c      	itt	ne
 8003cac:	1a1b      	subne	r3, r3, r0
 8003cae:	50a3      	strne	r3, [r4, r2]
 8003cb0:	e7af      	b.n	8003c12 <_malloc_r+0x22>
 8003cb2:	6862      	ldr	r2, [r4, #4]
 8003cb4:	42a3      	cmp	r3, r4
 8003cb6:	bf0c      	ite	eq
 8003cb8:	f8c8 2000 	streq.w	r2, [r8]
 8003cbc:	605a      	strne	r2, [r3, #4]
 8003cbe:	e7eb      	b.n	8003c98 <_malloc_r+0xa8>
 8003cc0:	4623      	mov	r3, r4
 8003cc2:	6864      	ldr	r4, [r4, #4]
 8003cc4:	e7ae      	b.n	8003c24 <_malloc_r+0x34>
 8003cc6:	463c      	mov	r4, r7
 8003cc8:	687f      	ldr	r7, [r7, #4]
 8003cca:	e7b6      	b.n	8003c3a <_malloc_r+0x4a>
 8003ccc:	461a      	mov	r2, r3
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	42a3      	cmp	r3, r4
 8003cd2:	d1fb      	bne.n	8003ccc <_malloc_r+0xdc>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	6053      	str	r3, [r2, #4]
 8003cd8:	e7de      	b.n	8003c98 <_malloc_r+0xa8>
 8003cda:	230c      	movs	r3, #12
 8003cdc:	4630      	mov	r0, r6
 8003cde:	6033      	str	r3, [r6, #0]
 8003ce0:	f000 f80c 	bl	8003cfc <__malloc_unlock>
 8003ce4:	e794      	b.n	8003c10 <_malloc_r+0x20>
 8003ce6:	6005      	str	r5, [r0, #0]
 8003ce8:	e7d6      	b.n	8003c98 <_malloc_r+0xa8>
 8003cea:	bf00      	nop
 8003cec:	200004fc 	.word	0x200004fc

08003cf0 <__malloc_lock>:
 8003cf0:	4801      	ldr	r0, [pc, #4]	@ (8003cf8 <__malloc_lock+0x8>)
 8003cf2:	f7ff bf11 	b.w	8003b18 <__retarget_lock_acquire_recursive>
 8003cf6:	bf00      	nop
 8003cf8:	200004f4 	.word	0x200004f4

08003cfc <__malloc_unlock>:
 8003cfc:	4801      	ldr	r0, [pc, #4]	@ (8003d04 <__malloc_unlock+0x8>)
 8003cfe:	f7ff bf0c 	b.w	8003b1a <__retarget_lock_release_recursive>
 8003d02:	bf00      	nop
 8003d04:	200004f4 	.word	0x200004f4

08003d08 <__ssputs_r>:
 8003d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d0c:	461f      	mov	r7, r3
 8003d0e:	688e      	ldr	r6, [r1, #8]
 8003d10:	4682      	mov	sl, r0
 8003d12:	42be      	cmp	r6, r7
 8003d14:	460c      	mov	r4, r1
 8003d16:	4690      	mov	r8, r2
 8003d18:	680b      	ldr	r3, [r1, #0]
 8003d1a:	d82d      	bhi.n	8003d78 <__ssputs_r+0x70>
 8003d1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003d24:	d026      	beq.n	8003d74 <__ssputs_r+0x6c>
 8003d26:	6965      	ldr	r5, [r4, #20]
 8003d28:	6909      	ldr	r1, [r1, #16]
 8003d2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d2e:	eba3 0901 	sub.w	r9, r3, r1
 8003d32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d36:	1c7b      	adds	r3, r7, #1
 8003d38:	444b      	add	r3, r9
 8003d3a:	106d      	asrs	r5, r5, #1
 8003d3c:	429d      	cmp	r5, r3
 8003d3e:	bf38      	it	cc
 8003d40:	461d      	movcc	r5, r3
 8003d42:	0553      	lsls	r3, r2, #21
 8003d44:	d527      	bpl.n	8003d96 <__ssputs_r+0x8e>
 8003d46:	4629      	mov	r1, r5
 8003d48:	f7ff ff52 	bl	8003bf0 <_malloc_r>
 8003d4c:	4606      	mov	r6, r0
 8003d4e:	b360      	cbz	r0, 8003daa <__ssputs_r+0xa2>
 8003d50:	464a      	mov	r2, r9
 8003d52:	6921      	ldr	r1, [r4, #16]
 8003d54:	f000 faf8 	bl	8004348 <memcpy>
 8003d58:	89a3      	ldrh	r3, [r4, #12]
 8003d5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d62:	81a3      	strh	r3, [r4, #12]
 8003d64:	6126      	str	r6, [r4, #16]
 8003d66:	444e      	add	r6, r9
 8003d68:	6026      	str	r6, [r4, #0]
 8003d6a:	463e      	mov	r6, r7
 8003d6c:	6165      	str	r5, [r4, #20]
 8003d6e:	eba5 0509 	sub.w	r5, r5, r9
 8003d72:	60a5      	str	r5, [r4, #8]
 8003d74:	42be      	cmp	r6, r7
 8003d76:	d900      	bls.n	8003d7a <__ssputs_r+0x72>
 8003d78:	463e      	mov	r6, r7
 8003d7a:	4632      	mov	r2, r6
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	6820      	ldr	r0, [r4, #0]
 8003d80:	f000 faaa 	bl	80042d8 <memmove>
 8003d84:	2000      	movs	r0, #0
 8003d86:	68a3      	ldr	r3, [r4, #8]
 8003d88:	1b9b      	subs	r3, r3, r6
 8003d8a:	60a3      	str	r3, [r4, #8]
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	4433      	add	r3, r6
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d96:	462a      	mov	r2, r5
 8003d98:	f000 fae4 	bl	8004364 <_realloc_r>
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d1e0      	bne.n	8003d64 <__ssputs_r+0x5c>
 8003da2:	4650      	mov	r0, sl
 8003da4:	6921      	ldr	r1, [r4, #16]
 8003da6:	f7ff feb9 	bl	8003b1c <_free_r>
 8003daa:	230c      	movs	r3, #12
 8003dac:	f8ca 3000 	str.w	r3, [sl]
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	f04f 30ff 	mov.w	r0, #4294967295
 8003db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dba:	81a3      	strh	r3, [r4, #12]
 8003dbc:	e7e9      	b.n	8003d92 <__ssputs_r+0x8a>
	...

08003dc0 <_svfiprintf_r>:
 8003dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc4:	4698      	mov	r8, r3
 8003dc6:	898b      	ldrh	r3, [r1, #12]
 8003dc8:	4607      	mov	r7, r0
 8003dca:	061b      	lsls	r3, r3, #24
 8003dcc:	460d      	mov	r5, r1
 8003dce:	4614      	mov	r4, r2
 8003dd0:	b09d      	sub	sp, #116	@ 0x74
 8003dd2:	d510      	bpl.n	8003df6 <_svfiprintf_r+0x36>
 8003dd4:	690b      	ldr	r3, [r1, #16]
 8003dd6:	b973      	cbnz	r3, 8003df6 <_svfiprintf_r+0x36>
 8003dd8:	2140      	movs	r1, #64	@ 0x40
 8003dda:	f7ff ff09 	bl	8003bf0 <_malloc_r>
 8003dde:	6028      	str	r0, [r5, #0]
 8003de0:	6128      	str	r0, [r5, #16]
 8003de2:	b930      	cbnz	r0, 8003df2 <_svfiprintf_r+0x32>
 8003de4:	230c      	movs	r3, #12
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dec:	b01d      	add	sp, #116	@ 0x74
 8003dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003df2:	2340      	movs	r3, #64	@ 0x40
 8003df4:	616b      	str	r3, [r5, #20]
 8003df6:	2300      	movs	r3, #0
 8003df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dfa:	2320      	movs	r3, #32
 8003dfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e00:	2330      	movs	r3, #48	@ 0x30
 8003e02:	f04f 0901 	mov.w	r9, #1
 8003e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e0a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003fa4 <_svfiprintf_r+0x1e4>
 8003e0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e12:	4623      	mov	r3, r4
 8003e14:	469a      	mov	sl, r3
 8003e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e1a:	b10a      	cbz	r2, 8003e20 <_svfiprintf_r+0x60>
 8003e1c:	2a25      	cmp	r2, #37	@ 0x25
 8003e1e:	d1f9      	bne.n	8003e14 <_svfiprintf_r+0x54>
 8003e20:	ebba 0b04 	subs.w	fp, sl, r4
 8003e24:	d00b      	beq.n	8003e3e <_svfiprintf_r+0x7e>
 8003e26:	465b      	mov	r3, fp
 8003e28:	4622      	mov	r2, r4
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	4638      	mov	r0, r7
 8003e2e:	f7ff ff6b 	bl	8003d08 <__ssputs_r>
 8003e32:	3001      	adds	r0, #1
 8003e34:	f000 80a7 	beq.w	8003f86 <_svfiprintf_r+0x1c6>
 8003e38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e3a:	445a      	add	r2, fp
 8003e3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 809f 	beq.w	8003f86 <_svfiprintf_r+0x1c6>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e52:	f10a 0a01 	add.w	sl, sl, #1
 8003e56:	9304      	str	r3, [sp, #16]
 8003e58:	9307      	str	r3, [sp, #28]
 8003e5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e60:	4654      	mov	r4, sl
 8003e62:	2205      	movs	r2, #5
 8003e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e68:	484e      	ldr	r0, [pc, #312]	@ (8003fa4 <_svfiprintf_r+0x1e4>)
 8003e6a:	f000 fa5f 	bl	800432c <memchr>
 8003e6e:	9a04      	ldr	r2, [sp, #16]
 8003e70:	b9d8      	cbnz	r0, 8003eaa <_svfiprintf_r+0xea>
 8003e72:	06d0      	lsls	r0, r2, #27
 8003e74:	bf44      	itt	mi
 8003e76:	2320      	movmi	r3, #32
 8003e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e7c:	0711      	lsls	r1, r2, #28
 8003e7e:	bf44      	itt	mi
 8003e80:	232b      	movmi	r3, #43	@ 0x2b
 8003e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e86:	f89a 3000 	ldrb.w	r3, [sl]
 8003e8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e8c:	d015      	beq.n	8003eba <_svfiprintf_r+0xfa>
 8003e8e:	4654      	mov	r4, sl
 8003e90:	2000      	movs	r0, #0
 8003e92:	f04f 0c0a 	mov.w	ip, #10
 8003e96:	9a07      	ldr	r2, [sp, #28]
 8003e98:	4621      	mov	r1, r4
 8003e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e9e:	3b30      	subs	r3, #48	@ 0x30
 8003ea0:	2b09      	cmp	r3, #9
 8003ea2:	d94b      	bls.n	8003f3c <_svfiprintf_r+0x17c>
 8003ea4:	b1b0      	cbz	r0, 8003ed4 <_svfiprintf_r+0x114>
 8003ea6:	9207      	str	r2, [sp, #28]
 8003ea8:	e014      	b.n	8003ed4 <_svfiprintf_r+0x114>
 8003eaa:	eba0 0308 	sub.w	r3, r0, r8
 8003eae:	fa09 f303 	lsl.w	r3, r9, r3
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	46a2      	mov	sl, r4
 8003eb6:	9304      	str	r3, [sp, #16]
 8003eb8:	e7d2      	b.n	8003e60 <_svfiprintf_r+0xa0>
 8003eba:	9b03      	ldr	r3, [sp, #12]
 8003ebc:	1d19      	adds	r1, r3, #4
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	9103      	str	r1, [sp, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bfbb      	ittet	lt
 8003ec6:	425b      	neglt	r3, r3
 8003ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8003ecc:	9307      	strge	r3, [sp, #28]
 8003ece:	9307      	strlt	r3, [sp, #28]
 8003ed0:	bfb8      	it	lt
 8003ed2:	9204      	strlt	r2, [sp, #16]
 8003ed4:	7823      	ldrb	r3, [r4, #0]
 8003ed6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ed8:	d10a      	bne.n	8003ef0 <_svfiprintf_r+0x130>
 8003eda:	7863      	ldrb	r3, [r4, #1]
 8003edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ede:	d132      	bne.n	8003f46 <_svfiprintf_r+0x186>
 8003ee0:	9b03      	ldr	r3, [sp, #12]
 8003ee2:	3402      	adds	r4, #2
 8003ee4:	1d1a      	adds	r2, r3, #4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	9203      	str	r2, [sp, #12]
 8003eea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003eee:	9305      	str	r3, [sp, #20]
 8003ef0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003fa8 <_svfiprintf_r+0x1e8>
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	4650      	mov	r0, sl
 8003ef8:	7821      	ldrb	r1, [r4, #0]
 8003efa:	f000 fa17 	bl	800432c <memchr>
 8003efe:	b138      	cbz	r0, 8003f10 <_svfiprintf_r+0x150>
 8003f00:	2240      	movs	r2, #64	@ 0x40
 8003f02:	9b04      	ldr	r3, [sp, #16]
 8003f04:	eba0 000a 	sub.w	r0, r0, sl
 8003f08:	4082      	lsls	r2, r0
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	3401      	adds	r4, #1
 8003f0e:	9304      	str	r3, [sp, #16]
 8003f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f14:	2206      	movs	r2, #6
 8003f16:	4825      	ldr	r0, [pc, #148]	@ (8003fac <_svfiprintf_r+0x1ec>)
 8003f18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f1c:	f000 fa06 	bl	800432c <memchr>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	d036      	beq.n	8003f92 <_svfiprintf_r+0x1d2>
 8003f24:	4b22      	ldr	r3, [pc, #136]	@ (8003fb0 <_svfiprintf_r+0x1f0>)
 8003f26:	bb1b      	cbnz	r3, 8003f70 <_svfiprintf_r+0x1b0>
 8003f28:	9b03      	ldr	r3, [sp, #12]
 8003f2a:	3307      	adds	r3, #7
 8003f2c:	f023 0307 	bic.w	r3, r3, #7
 8003f30:	3308      	adds	r3, #8
 8003f32:	9303      	str	r3, [sp, #12]
 8003f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f36:	4433      	add	r3, r6
 8003f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f3a:	e76a      	b.n	8003e12 <_svfiprintf_r+0x52>
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	2001      	movs	r0, #1
 8003f40:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f44:	e7a8      	b.n	8003e98 <_svfiprintf_r+0xd8>
 8003f46:	2300      	movs	r3, #0
 8003f48:	f04f 0c0a 	mov.w	ip, #10
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	3401      	adds	r4, #1
 8003f50:	9305      	str	r3, [sp, #20]
 8003f52:	4620      	mov	r0, r4
 8003f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f58:	3a30      	subs	r2, #48	@ 0x30
 8003f5a:	2a09      	cmp	r2, #9
 8003f5c:	d903      	bls.n	8003f66 <_svfiprintf_r+0x1a6>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0c6      	beq.n	8003ef0 <_svfiprintf_r+0x130>
 8003f62:	9105      	str	r1, [sp, #20]
 8003f64:	e7c4      	b.n	8003ef0 <_svfiprintf_r+0x130>
 8003f66:	4604      	mov	r4, r0
 8003f68:	2301      	movs	r3, #1
 8003f6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f6e:	e7f0      	b.n	8003f52 <_svfiprintf_r+0x192>
 8003f70:	ab03      	add	r3, sp, #12
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	462a      	mov	r2, r5
 8003f76:	4638      	mov	r0, r7
 8003f78:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb4 <_svfiprintf_r+0x1f4>)
 8003f7a:	a904      	add	r1, sp, #16
 8003f7c:	f3af 8000 	nop.w
 8003f80:	1c42      	adds	r2, r0, #1
 8003f82:	4606      	mov	r6, r0
 8003f84:	d1d6      	bne.n	8003f34 <_svfiprintf_r+0x174>
 8003f86:	89ab      	ldrh	r3, [r5, #12]
 8003f88:	065b      	lsls	r3, r3, #25
 8003f8a:	f53f af2d 	bmi.w	8003de8 <_svfiprintf_r+0x28>
 8003f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f90:	e72c      	b.n	8003dec <_svfiprintf_r+0x2c>
 8003f92:	ab03      	add	r3, sp, #12
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	462a      	mov	r2, r5
 8003f98:	4638      	mov	r0, r7
 8003f9a:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <_svfiprintf_r+0x1f4>)
 8003f9c:	a904      	add	r1, sp, #16
 8003f9e:	f000 f87d 	bl	800409c <_printf_i>
 8003fa2:	e7ed      	b.n	8003f80 <_svfiprintf_r+0x1c0>
 8003fa4:	080044fa 	.word	0x080044fa
 8003fa8:	08004500 	.word	0x08004500
 8003fac:	08004504 	.word	0x08004504
 8003fb0:	00000000 	.word	0x00000000
 8003fb4:	08003d09 	.word	0x08003d09

08003fb8 <_printf_common>:
 8003fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fbc:	4616      	mov	r6, r2
 8003fbe:	4698      	mov	r8, r3
 8003fc0:	688a      	ldr	r2, [r1, #8]
 8003fc2:	690b      	ldr	r3, [r1, #16]
 8003fc4:	4607      	mov	r7, r0
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	bfb8      	it	lt
 8003fca:	4613      	movlt	r3, r2
 8003fcc:	6033      	str	r3, [r6, #0]
 8003fce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fd8:	b10a      	cbz	r2, 8003fde <_printf_common+0x26>
 8003fda:	3301      	adds	r3, #1
 8003fdc:	6033      	str	r3, [r6, #0]
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	0699      	lsls	r1, r3, #26
 8003fe2:	bf42      	ittt	mi
 8003fe4:	6833      	ldrmi	r3, [r6, #0]
 8003fe6:	3302      	addmi	r3, #2
 8003fe8:	6033      	strmi	r3, [r6, #0]
 8003fea:	6825      	ldr	r5, [r4, #0]
 8003fec:	f015 0506 	ands.w	r5, r5, #6
 8003ff0:	d106      	bne.n	8004000 <_printf_common+0x48>
 8003ff2:	f104 0a19 	add.w	sl, r4, #25
 8003ff6:	68e3      	ldr	r3, [r4, #12]
 8003ff8:	6832      	ldr	r2, [r6, #0]
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	42ab      	cmp	r3, r5
 8003ffe:	dc2b      	bgt.n	8004058 <_printf_common+0xa0>
 8004000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004004:	6822      	ldr	r2, [r4, #0]
 8004006:	3b00      	subs	r3, #0
 8004008:	bf18      	it	ne
 800400a:	2301      	movne	r3, #1
 800400c:	0692      	lsls	r2, r2, #26
 800400e:	d430      	bmi.n	8004072 <_printf_common+0xba>
 8004010:	4641      	mov	r1, r8
 8004012:	4638      	mov	r0, r7
 8004014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004018:	47c8      	blx	r9
 800401a:	3001      	adds	r0, #1
 800401c:	d023      	beq.n	8004066 <_printf_common+0xae>
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	6922      	ldr	r2, [r4, #16]
 8004022:	f003 0306 	and.w	r3, r3, #6
 8004026:	2b04      	cmp	r3, #4
 8004028:	bf14      	ite	ne
 800402a:	2500      	movne	r5, #0
 800402c:	6833      	ldreq	r3, [r6, #0]
 800402e:	f04f 0600 	mov.w	r6, #0
 8004032:	bf08      	it	eq
 8004034:	68e5      	ldreq	r5, [r4, #12]
 8004036:	f104 041a 	add.w	r4, r4, #26
 800403a:	bf08      	it	eq
 800403c:	1aed      	subeq	r5, r5, r3
 800403e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004042:	bf08      	it	eq
 8004044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004048:	4293      	cmp	r3, r2
 800404a:	bfc4      	itt	gt
 800404c:	1a9b      	subgt	r3, r3, r2
 800404e:	18ed      	addgt	r5, r5, r3
 8004050:	42b5      	cmp	r5, r6
 8004052:	d11a      	bne.n	800408a <_printf_common+0xd2>
 8004054:	2000      	movs	r0, #0
 8004056:	e008      	b.n	800406a <_printf_common+0xb2>
 8004058:	2301      	movs	r3, #1
 800405a:	4652      	mov	r2, sl
 800405c:	4641      	mov	r1, r8
 800405e:	4638      	mov	r0, r7
 8004060:	47c8      	blx	r9
 8004062:	3001      	adds	r0, #1
 8004064:	d103      	bne.n	800406e <_printf_common+0xb6>
 8004066:	f04f 30ff 	mov.w	r0, #4294967295
 800406a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800406e:	3501      	adds	r5, #1
 8004070:	e7c1      	b.n	8003ff6 <_printf_common+0x3e>
 8004072:	2030      	movs	r0, #48	@ 0x30
 8004074:	18e1      	adds	r1, r4, r3
 8004076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004080:	4422      	add	r2, r4
 8004082:	3302      	adds	r3, #2
 8004084:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004088:	e7c2      	b.n	8004010 <_printf_common+0x58>
 800408a:	2301      	movs	r3, #1
 800408c:	4622      	mov	r2, r4
 800408e:	4641      	mov	r1, r8
 8004090:	4638      	mov	r0, r7
 8004092:	47c8      	blx	r9
 8004094:	3001      	adds	r0, #1
 8004096:	d0e6      	beq.n	8004066 <_printf_common+0xae>
 8004098:	3601      	adds	r6, #1
 800409a:	e7d9      	b.n	8004050 <_printf_common+0x98>

0800409c <_printf_i>:
 800409c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040a0:	7e0f      	ldrb	r7, [r1, #24]
 80040a2:	4691      	mov	r9, r2
 80040a4:	2f78      	cmp	r7, #120	@ 0x78
 80040a6:	4680      	mov	r8, r0
 80040a8:	460c      	mov	r4, r1
 80040aa:	469a      	mov	sl, r3
 80040ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040b2:	d807      	bhi.n	80040c4 <_printf_i+0x28>
 80040b4:	2f62      	cmp	r7, #98	@ 0x62
 80040b6:	d80a      	bhi.n	80040ce <_printf_i+0x32>
 80040b8:	2f00      	cmp	r7, #0
 80040ba:	f000 80d1 	beq.w	8004260 <_printf_i+0x1c4>
 80040be:	2f58      	cmp	r7, #88	@ 0x58
 80040c0:	f000 80b8 	beq.w	8004234 <_printf_i+0x198>
 80040c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040cc:	e03a      	b.n	8004144 <_printf_i+0xa8>
 80040ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040d2:	2b15      	cmp	r3, #21
 80040d4:	d8f6      	bhi.n	80040c4 <_printf_i+0x28>
 80040d6:	a101      	add	r1, pc, #4	@ (adr r1, 80040dc <_printf_i+0x40>)
 80040d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040dc:	08004135 	.word	0x08004135
 80040e0:	08004149 	.word	0x08004149
 80040e4:	080040c5 	.word	0x080040c5
 80040e8:	080040c5 	.word	0x080040c5
 80040ec:	080040c5 	.word	0x080040c5
 80040f0:	080040c5 	.word	0x080040c5
 80040f4:	08004149 	.word	0x08004149
 80040f8:	080040c5 	.word	0x080040c5
 80040fc:	080040c5 	.word	0x080040c5
 8004100:	080040c5 	.word	0x080040c5
 8004104:	080040c5 	.word	0x080040c5
 8004108:	08004247 	.word	0x08004247
 800410c:	08004173 	.word	0x08004173
 8004110:	08004201 	.word	0x08004201
 8004114:	080040c5 	.word	0x080040c5
 8004118:	080040c5 	.word	0x080040c5
 800411c:	08004269 	.word	0x08004269
 8004120:	080040c5 	.word	0x080040c5
 8004124:	08004173 	.word	0x08004173
 8004128:	080040c5 	.word	0x080040c5
 800412c:	080040c5 	.word	0x080040c5
 8004130:	08004209 	.word	0x08004209
 8004134:	6833      	ldr	r3, [r6, #0]
 8004136:	1d1a      	adds	r2, r3, #4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6032      	str	r2, [r6, #0]
 800413c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004144:	2301      	movs	r3, #1
 8004146:	e09c      	b.n	8004282 <_printf_i+0x1e6>
 8004148:	6833      	ldr	r3, [r6, #0]
 800414a:	6820      	ldr	r0, [r4, #0]
 800414c:	1d19      	adds	r1, r3, #4
 800414e:	6031      	str	r1, [r6, #0]
 8004150:	0606      	lsls	r6, r0, #24
 8004152:	d501      	bpl.n	8004158 <_printf_i+0xbc>
 8004154:	681d      	ldr	r5, [r3, #0]
 8004156:	e003      	b.n	8004160 <_printf_i+0xc4>
 8004158:	0645      	lsls	r5, r0, #25
 800415a:	d5fb      	bpl.n	8004154 <_printf_i+0xb8>
 800415c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004160:	2d00      	cmp	r5, #0
 8004162:	da03      	bge.n	800416c <_printf_i+0xd0>
 8004164:	232d      	movs	r3, #45	@ 0x2d
 8004166:	426d      	negs	r5, r5
 8004168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800416c:	230a      	movs	r3, #10
 800416e:	4858      	ldr	r0, [pc, #352]	@ (80042d0 <_printf_i+0x234>)
 8004170:	e011      	b.n	8004196 <_printf_i+0xfa>
 8004172:	6821      	ldr	r1, [r4, #0]
 8004174:	6833      	ldr	r3, [r6, #0]
 8004176:	0608      	lsls	r0, r1, #24
 8004178:	f853 5b04 	ldr.w	r5, [r3], #4
 800417c:	d402      	bmi.n	8004184 <_printf_i+0xe8>
 800417e:	0649      	lsls	r1, r1, #25
 8004180:	bf48      	it	mi
 8004182:	b2ad      	uxthmi	r5, r5
 8004184:	2f6f      	cmp	r7, #111	@ 0x6f
 8004186:	6033      	str	r3, [r6, #0]
 8004188:	bf14      	ite	ne
 800418a:	230a      	movne	r3, #10
 800418c:	2308      	moveq	r3, #8
 800418e:	4850      	ldr	r0, [pc, #320]	@ (80042d0 <_printf_i+0x234>)
 8004190:	2100      	movs	r1, #0
 8004192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004196:	6866      	ldr	r6, [r4, #4]
 8004198:	2e00      	cmp	r6, #0
 800419a:	60a6      	str	r6, [r4, #8]
 800419c:	db05      	blt.n	80041aa <_printf_i+0x10e>
 800419e:	6821      	ldr	r1, [r4, #0]
 80041a0:	432e      	orrs	r6, r5
 80041a2:	f021 0104 	bic.w	r1, r1, #4
 80041a6:	6021      	str	r1, [r4, #0]
 80041a8:	d04b      	beq.n	8004242 <_printf_i+0x1a6>
 80041aa:	4616      	mov	r6, r2
 80041ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80041b0:	fb03 5711 	mls	r7, r3, r1, r5
 80041b4:	5dc7      	ldrb	r7, [r0, r7]
 80041b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041ba:	462f      	mov	r7, r5
 80041bc:	42bb      	cmp	r3, r7
 80041be:	460d      	mov	r5, r1
 80041c0:	d9f4      	bls.n	80041ac <_printf_i+0x110>
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d10b      	bne.n	80041de <_printf_i+0x142>
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	07df      	lsls	r7, r3, #31
 80041ca:	d508      	bpl.n	80041de <_printf_i+0x142>
 80041cc:	6923      	ldr	r3, [r4, #16]
 80041ce:	6861      	ldr	r1, [r4, #4]
 80041d0:	4299      	cmp	r1, r3
 80041d2:	bfde      	ittt	le
 80041d4:	2330      	movle	r3, #48	@ 0x30
 80041d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041de:	1b92      	subs	r2, r2, r6
 80041e0:	6122      	str	r2, [r4, #16]
 80041e2:	464b      	mov	r3, r9
 80041e4:	4621      	mov	r1, r4
 80041e6:	4640      	mov	r0, r8
 80041e8:	f8cd a000 	str.w	sl, [sp]
 80041ec:	aa03      	add	r2, sp, #12
 80041ee:	f7ff fee3 	bl	8003fb8 <_printf_common>
 80041f2:	3001      	adds	r0, #1
 80041f4:	d14a      	bne.n	800428c <_printf_i+0x1f0>
 80041f6:	f04f 30ff 	mov.w	r0, #4294967295
 80041fa:	b004      	add	sp, #16
 80041fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	f043 0320 	orr.w	r3, r3, #32
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	2778      	movs	r7, #120	@ 0x78
 800420a:	4832      	ldr	r0, [pc, #200]	@ (80042d4 <_printf_i+0x238>)
 800420c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	6831      	ldr	r1, [r6, #0]
 8004214:	061f      	lsls	r7, r3, #24
 8004216:	f851 5b04 	ldr.w	r5, [r1], #4
 800421a:	d402      	bmi.n	8004222 <_printf_i+0x186>
 800421c:	065f      	lsls	r7, r3, #25
 800421e:	bf48      	it	mi
 8004220:	b2ad      	uxthmi	r5, r5
 8004222:	6031      	str	r1, [r6, #0]
 8004224:	07d9      	lsls	r1, r3, #31
 8004226:	bf44      	itt	mi
 8004228:	f043 0320 	orrmi.w	r3, r3, #32
 800422c:	6023      	strmi	r3, [r4, #0]
 800422e:	b11d      	cbz	r5, 8004238 <_printf_i+0x19c>
 8004230:	2310      	movs	r3, #16
 8004232:	e7ad      	b.n	8004190 <_printf_i+0xf4>
 8004234:	4826      	ldr	r0, [pc, #152]	@ (80042d0 <_printf_i+0x234>)
 8004236:	e7e9      	b.n	800420c <_printf_i+0x170>
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	f023 0320 	bic.w	r3, r3, #32
 800423e:	6023      	str	r3, [r4, #0]
 8004240:	e7f6      	b.n	8004230 <_printf_i+0x194>
 8004242:	4616      	mov	r6, r2
 8004244:	e7bd      	b.n	80041c2 <_printf_i+0x126>
 8004246:	6833      	ldr	r3, [r6, #0]
 8004248:	6825      	ldr	r5, [r4, #0]
 800424a:	1d18      	adds	r0, r3, #4
 800424c:	6961      	ldr	r1, [r4, #20]
 800424e:	6030      	str	r0, [r6, #0]
 8004250:	062e      	lsls	r6, r5, #24
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	d501      	bpl.n	800425a <_printf_i+0x1be>
 8004256:	6019      	str	r1, [r3, #0]
 8004258:	e002      	b.n	8004260 <_printf_i+0x1c4>
 800425a:	0668      	lsls	r0, r5, #25
 800425c:	d5fb      	bpl.n	8004256 <_printf_i+0x1ba>
 800425e:	8019      	strh	r1, [r3, #0]
 8004260:	2300      	movs	r3, #0
 8004262:	4616      	mov	r6, r2
 8004264:	6123      	str	r3, [r4, #16]
 8004266:	e7bc      	b.n	80041e2 <_printf_i+0x146>
 8004268:	6833      	ldr	r3, [r6, #0]
 800426a:	2100      	movs	r1, #0
 800426c:	1d1a      	adds	r2, r3, #4
 800426e:	6032      	str	r2, [r6, #0]
 8004270:	681e      	ldr	r6, [r3, #0]
 8004272:	6862      	ldr	r2, [r4, #4]
 8004274:	4630      	mov	r0, r6
 8004276:	f000 f859 	bl	800432c <memchr>
 800427a:	b108      	cbz	r0, 8004280 <_printf_i+0x1e4>
 800427c:	1b80      	subs	r0, r0, r6
 800427e:	6060      	str	r0, [r4, #4]
 8004280:	6863      	ldr	r3, [r4, #4]
 8004282:	6123      	str	r3, [r4, #16]
 8004284:	2300      	movs	r3, #0
 8004286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800428a:	e7aa      	b.n	80041e2 <_printf_i+0x146>
 800428c:	4632      	mov	r2, r6
 800428e:	4649      	mov	r1, r9
 8004290:	4640      	mov	r0, r8
 8004292:	6923      	ldr	r3, [r4, #16]
 8004294:	47d0      	blx	sl
 8004296:	3001      	adds	r0, #1
 8004298:	d0ad      	beq.n	80041f6 <_printf_i+0x15a>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	079b      	lsls	r3, r3, #30
 800429e:	d413      	bmi.n	80042c8 <_printf_i+0x22c>
 80042a0:	68e0      	ldr	r0, [r4, #12]
 80042a2:	9b03      	ldr	r3, [sp, #12]
 80042a4:	4298      	cmp	r0, r3
 80042a6:	bfb8      	it	lt
 80042a8:	4618      	movlt	r0, r3
 80042aa:	e7a6      	b.n	80041fa <_printf_i+0x15e>
 80042ac:	2301      	movs	r3, #1
 80042ae:	4632      	mov	r2, r6
 80042b0:	4649      	mov	r1, r9
 80042b2:	4640      	mov	r0, r8
 80042b4:	47d0      	blx	sl
 80042b6:	3001      	adds	r0, #1
 80042b8:	d09d      	beq.n	80041f6 <_printf_i+0x15a>
 80042ba:	3501      	adds	r5, #1
 80042bc:	68e3      	ldr	r3, [r4, #12]
 80042be:	9903      	ldr	r1, [sp, #12]
 80042c0:	1a5b      	subs	r3, r3, r1
 80042c2:	42ab      	cmp	r3, r5
 80042c4:	dcf2      	bgt.n	80042ac <_printf_i+0x210>
 80042c6:	e7eb      	b.n	80042a0 <_printf_i+0x204>
 80042c8:	2500      	movs	r5, #0
 80042ca:	f104 0619 	add.w	r6, r4, #25
 80042ce:	e7f5      	b.n	80042bc <_printf_i+0x220>
 80042d0:	0800450b 	.word	0x0800450b
 80042d4:	0800451c 	.word	0x0800451c

080042d8 <memmove>:
 80042d8:	4288      	cmp	r0, r1
 80042da:	b510      	push	{r4, lr}
 80042dc:	eb01 0402 	add.w	r4, r1, r2
 80042e0:	d902      	bls.n	80042e8 <memmove+0x10>
 80042e2:	4284      	cmp	r4, r0
 80042e4:	4623      	mov	r3, r4
 80042e6:	d807      	bhi.n	80042f8 <memmove+0x20>
 80042e8:	1e43      	subs	r3, r0, #1
 80042ea:	42a1      	cmp	r1, r4
 80042ec:	d008      	beq.n	8004300 <memmove+0x28>
 80042ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042f6:	e7f8      	b.n	80042ea <memmove+0x12>
 80042f8:	4601      	mov	r1, r0
 80042fa:	4402      	add	r2, r0
 80042fc:	428a      	cmp	r2, r1
 80042fe:	d100      	bne.n	8004302 <memmove+0x2a>
 8004300:	bd10      	pop	{r4, pc}
 8004302:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004306:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800430a:	e7f7      	b.n	80042fc <memmove+0x24>

0800430c <_sbrk_r>:
 800430c:	b538      	push	{r3, r4, r5, lr}
 800430e:	2300      	movs	r3, #0
 8004310:	4d05      	ldr	r5, [pc, #20]	@ (8004328 <_sbrk_r+0x1c>)
 8004312:	4604      	mov	r4, r0
 8004314:	4608      	mov	r0, r1
 8004316:	602b      	str	r3, [r5, #0]
 8004318:	f7fc f964 	bl	80005e4 <_sbrk>
 800431c:	1c43      	adds	r3, r0, #1
 800431e:	d102      	bne.n	8004326 <_sbrk_r+0x1a>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	b103      	cbz	r3, 8004326 <_sbrk_r+0x1a>
 8004324:	6023      	str	r3, [r4, #0]
 8004326:	bd38      	pop	{r3, r4, r5, pc}
 8004328:	200004f0 	.word	0x200004f0

0800432c <memchr>:
 800432c:	4603      	mov	r3, r0
 800432e:	b510      	push	{r4, lr}
 8004330:	b2c9      	uxtb	r1, r1
 8004332:	4402      	add	r2, r0
 8004334:	4293      	cmp	r3, r2
 8004336:	4618      	mov	r0, r3
 8004338:	d101      	bne.n	800433e <memchr+0x12>
 800433a:	2000      	movs	r0, #0
 800433c:	e003      	b.n	8004346 <memchr+0x1a>
 800433e:	7804      	ldrb	r4, [r0, #0]
 8004340:	3301      	adds	r3, #1
 8004342:	428c      	cmp	r4, r1
 8004344:	d1f6      	bne.n	8004334 <memchr+0x8>
 8004346:	bd10      	pop	{r4, pc}

08004348 <memcpy>:
 8004348:	440a      	add	r2, r1
 800434a:	4291      	cmp	r1, r2
 800434c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004350:	d100      	bne.n	8004354 <memcpy+0xc>
 8004352:	4770      	bx	lr
 8004354:	b510      	push	{r4, lr}
 8004356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800435a:	4291      	cmp	r1, r2
 800435c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004360:	d1f9      	bne.n	8004356 <memcpy+0xe>
 8004362:	bd10      	pop	{r4, pc}

08004364 <_realloc_r>:
 8004364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004368:	4607      	mov	r7, r0
 800436a:	4614      	mov	r4, r2
 800436c:	460d      	mov	r5, r1
 800436e:	b921      	cbnz	r1, 800437a <_realloc_r+0x16>
 8004370:	4611      	mov	r1, r2
 8004372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004376:	f7ff bc3b 	b.w	8003bf0 <_malloc_r>
 800437a:	b92a      	cbnz	r2, 8004388 <_realloc_r+0x24>
 800437c:	f7ff fbce 	bl	8003b1c <_free_r>
 8004380:	4625      	mov	r5, r4
 8004382:	4628      	mov	r0, r5
 8004384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004388:	f000 f81a 	bl	80043c0 <_malloc_usable_size_r>
 800438c:	4284      	cmp	r4, r0
 800438e:	4606      	mov	r6, r0
 8004390:	d802      	bhi.n	8004398 <_realloc_r+0x34>
 8004392:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004396:	d8f4      	bhi.n	8004382 <_realloc_r+0x1e>
 8004398:	4621      	mov	r1, r4
 800439a:	4638      	mov	r0, r7
 800439c:	f7ff fc28 	bl	8003bf0 <_malloc_r>
 80043a0:	4680      	mov	r8, r0
 80043a2:	b908      	cbnz	r0, 80043a8 <_realloc_r+0x44>
 80043a4:	4645      	mov	r5, r8
 80043a6:	e7ec      	b.n	8004382 <_realloc_r+0x1e>
 80043a8:	42b4      	cmp	r4, r6
 80043aa:	4622      	mov	r2, r4
 80043ac:	4629      	mov	r1, r5
 80043ae:	bf28      	it	cs
 80043b0:	4632      	movcs	r2, r6
 80043b2:	f7ff ffc9 	bl	8004348 <memcpy>
 80043b6:	4629      	mov	r1, r5
 80043b8:	4638      	mov	r0, r7
 80043ba:	f7ff fbaf 	bl	8003b1c <_free_r>
 80043be:	e7f1      	b.n	80043a4 <_realloc_r+0x40>

080043c0 <_malloc_usable_size_r>:
 80043c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c4:	1f18      	subs	r0, r3, #4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bfbc      	itt	lt
 80043ca:	580b      	ldrlt	r3, [r1, r0]
 80043cc:	18c0      	addlt	r0, r0, r3
 80043ce:	4770      	bx	lr

080043d0 <_init>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr

080043dc <_fini>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	bf00      	nop
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr
