
test_fatfs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000649c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  080065a8  080065a8  000075a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006910  08006910  00008074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006910  08006910  00007910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006918  08006918  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006918  08006918  00007918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800691c  0800691c  0000791c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006920  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000074  08006994  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  08006994  00008728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d239  00000000  00000000  0000809d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b7  00000000  00000000  000152d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00017b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000962  00000000  00000000  000187e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ab9  00000000  00000000  00019142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011778  00000000  00000000  00031bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008542d  00000000  00000000  00043373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c87a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a4  00000000  00000000  000c87e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cbd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08006590 	.word	0x08006590

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08006590 	.word	0x08006590

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0308 	add.w	r3, r7, #8
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000170:	4b17      	ldr	r3, [pc, #92]	@ (80001d0 <MX_GPIO_Init+0x74>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a16      	ldr	r2, [pc, #88]	@ (80001d0 <MX_GPIO_Init+0x74>)
 8000176:	f043 0320 	orr.w	r3, r3, #32
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b14      	ldr	r3, [pc, #80]	@ (80001d0 <MX_GPIO_Init+0x74>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0320 	and.w	r3, r3, #32
 8000184:	607b      	str	r3, [r7, #4]
 8000186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4b11      	ldr	r3, [pc, #68]	@ (80001d0 <MX_GPIO_Init+0x74>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a10      	ldr	r2, [pc, #64]	@ (80001d0 <MX_GPIO_Init+0x74>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b0e      	ldr	r3, [pc, #56]	@ (80001d0 <MX_GPIO_Init+0x74>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	603b      	str	r3, [r7, #0]
 800019e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80001a0:	2201      	movs	r2, #1
 80001a2:	2110      	movs	r1, #16
 80001a4:	480b      	ldr	r0, [pc, #44]	@ (80001d4 <MX_GPIO_Init+0x78>)
 80001a6:	f000 fed1 	bl	8000f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80001aa:	2310      	movs	r3, #16
 80001ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ae:	2301      	movs	r3, #1
 80001b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001b2:	2301      	movs	r3, #1
 80001b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001b6:	2302      	movs	r3, #2
 80001b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80001ba:	f107 0308 	add.w	r3, r7, #8
 80001be:	4619      	mov	r1, r3
 80001c0:	4804      	ldr	r0, [pc, #16]	@ (80001d4 <MX_GPIO_Init+0x78>)
 80001c2:	f000 fd3f 	bl	8000c44 <HAL_GPIO_Init>

}
 80001c6:	bf00      	nop
 80001c8:	3718      	adds	r7, #24
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40021000 	.word	0x40021000
 80001d4:	40010800 	.word	0x40010800

080001d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	f5ad 6da1 	sub.w	sp, sp, #1288	@ 0x508
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e0:	f000 fbc6 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e4:	f000 f834 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f7ff ffb8 	bl	800015c <MX_GPIO_Init>
  MX_SPI1_Init();
 80001ec:	f000 fa0a 	bl	8000604 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 fb22 	bl	8000838 <MX_USART1_UART_Init>
  // MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  sd_card_init();
 80001f4:	f000 f877 	bl	80002e6 <sd_card_init>
  sd_card_mount();
 80001f8:	f000 f87c 	bl	80002f4 <sd_card_mount>
  HAL_UART_Transmit(&huart1, (uint8_t *)"Initialized and Mounted SD Card\n", 33, HAL_MAX_DELAY);
 80001fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000200:	2221      	movs	r2, #33	@ 0x21
 8000202:	4910      	ldr	r1, [pc, #64]	@ (8000244 <main+0x6c>)
 8000204:	4810      	ldr	r0, [pc, #64]	@ (8000248 <main+0x70>)
 8000206:	f001 ff44 	bl	8002092 <HAL_UART_Transmit>

  sd_card_test();
 800020a:	f000 f989 	bl	8000520 <sd_card_test>

  char filename[10][128];
  int file_count = 0;
 800020e:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8000212:	f2a3 5304 	subw	r3, r3, #1284	@ 0x504
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
  sd_card_ls(filename, 10, &file_count);
 800021a:	1d3a      	adds	r2, r7, #4
 800021c:	f107 0308 	add.w	r3, r7, #8
 8000220:	210a      	movs	r1, #10
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f8b0 	bl	8000388 <sd_card_ls>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Transmit(&huart1, (uint8_t *)"Blocking\n", 13, HAL_MAX_DELAY);
 8000228:	f04f 33ff 	mov.w	r3, #4294967295
 800022c:	220d      	movs	r2, #13
 800022e:	4907      	ldr	r1, [pc, #28]	@ (800024c <main+0x74>)
 8000230:	4805      	ldr	r0, [pc, #20]	@ (8000248 <main+0x70>)
 8000232:	f001 ff2e 	bl	8002092 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000236:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800023a:	f000 fbfb 	bl	8000a34 <HAL_Delay>
    HAL_UART_Transmit(&huart1, (uint8_t *)"Blocking\n", 13, HAL_MAX_DELAY);
 800023e:	bf00      	nop
 8000240:	e7f2      	b.n	8000228 <main+0x50>
 8000242:	bf00      	nop
 8000244:	080065a8 	.word	0x080065a8
 8000248:	20000554 	.word	0x20000554
 800024c:	080065cc 	.word	0x080065cc

08000250 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b090      	sub	sp, #64	@ 0x40
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2228      	movs	r2, #40	@ 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f005 fd08 	bl	8005c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000272:	2301      	movs	r3, #1
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800027a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000284:	2302      	movs	r3, #2
 8000286:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800028c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fe6f 	bl	8000f7c <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x58>
    Error_Handler();
 80002a4:	f000 f819 	bl	80002da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80002a8:	230f      	movs	r3, #15
 80002aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2102      	movs	r1, #2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 f8dc 	bl	8001480 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x82>
    Error_Handler();
 80002ce:	f000 f804 	bl	80002da <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3740      	adds	r7, #64	@ 0x40
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002de:	b672      	cpsid	i
}
 80002e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80002e2:	bf00      	nop
 80002e4:	e7fd      	b.n	80002e2 <Error_Handler+0x8>

080002e6 <sd_card_init>:
FRESULT err = FR_OK;  // Result
UINT write_count, read_count;
DWORD free_clusters;
uint32_t total_size, free_space;

void sd_card_init(void) {
 80002e6:	b580      	push	{r7, lr}
 80002e8:	af00      	add	r7, sp, #0
  MX_FATFS_Init();
 80002ea:	f002 f8a7 	bl	800243c <MX_FATFS_Init>
  // TODO: need mounting before any file operations
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <sd_card_mount>:

// TODO: remove all while (1) loops in error handling after testing

FRESULT sd_card_mount(void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b0c0      	sub	sp, #256	@ 0x100
 80002f8:	af00      	add	r7, sp, #0
  char uart_buffer[256];
  err = f_mount(&fatfs, "", 1);
 80002fa:	2201      	movs	r2, #1
 80002fc:	491c      	ldr	r1, [pc, #112]	@ (8000370 <sd_card_mount+0x7c>)
 80002fe:	481d      	ldr	r0, [pc, #116]	@ (8000374 <sd_card_mount+0x80>)
 8000300:	f004 fd8c 	bl	8004e1c <f_mount>
 8000304:	4603      	mov	r3, r0
 8000306:	461a      	mov	r2, r3
 8000308:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <sd_card_mount+0x84>)
 800030a:	701a      	strb	r2, [r3, #0]
  if (err != FR_OK) {
 800030c:	4b1a      	ldr	r3, [pc, #104]	@ (8000378 <sd_card_mount+0x84>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d015      	beq.n	8000340 <sd_card_mount+0x4c>
    sprintf(uart_buffer, "f_mount error: %d\n", err);
 8000314:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <sd_card_mount+0x84>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	461a      	mov	r2, r3
 800031a:	463b      	mov	r3, r7
 800031c:	4917      	ldr	r1, [pc, #92]	@ (800037c <sd_card_mount+0x88>)
 800031e:	4618      	mov	r0, r3
 8000320:	f005 fc86 	bl	8005c30 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000324:	463b      	mov	r3, r7
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff10 	bl	800014c <strlen>
 800032c:	4603      	mov	r3, r0
 800032e:	b29a      	uxth	r2, r3
 8000330:	4639      	mov	r1, r7
 8000332:	f04f 33ff 	mov.w	r3, #4294967295
 8000336:	4812      	ldr	r0, [pc, #72]	@ (8000380 <sd_card_mount+0x8c>)
 8000338:	f001 feab 	bl	8002092 <HAL_UART_Transmit>
    while (1);
 800033c:	bf00      	nop
 800033e:	e7fd      	b.n	800033c <sd_card_mount+0x48>
  }
  sprintf(uart_buffer, "SD card mounted successfully.\n");
 8000340:	463b      	mov	r3, r7
 8000342:	4910      	ldr	r1, [pc, #64]	@ (8000384 <sd_card_mount+0x90>)
 8000344:	4618      	mov	r0, r3
 8000346:	f005 fc73 	bl	8005c30 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800034a:	463b      	mov	r3, r7
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff fefd 	bl	800014c <strlen>
 8000352:	4603      	mov	r3, r0
 8000354:	b29a      	uxth	r2, r3
 8000356:	4639      	mov	r1, r7
 8000358:	f04f 33ff 	mov.w	r3, #4294967295
 800035c:	4808      	ldr	r0, [pc, #32]	@ (8000380 <sd_card_mount+0x8c>)
 800035e:	f001 fe98 	bl	8002092 <HAL_UART_Transmit>
  return err;
 8000362:	4b05      	ldr	r3, [pc, #20]	@ (8000378 <sd_card_mount+0x84>)
 8000364:	781b      	ldrb	r3, [r3, #0]
}
 8000366:	4618      	mov	r0, r3
 8000368:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	080065d8 	.word	0x080065d8
 8000374:	20000090 	.word	0x20000090
 8000378:	200004f0 	.word	0x200004f0
 800037c:	080065dc 	.word	0x080065dc
 8000380:	20000554 	.word	0x20000554
 8000384:	080065f0 	.word	0x080065f0

08000388 <sd_card_ls>:
  return err;
}

FRESULT sd_card_cd(const char* dir_name) {}

FRESULT sd_card_ls(char* filename[], int max_files, int* file_count) {
 8000388:	b580      	push	{r7, lr}
 800038a:	f5ad 7d54 	sub.w	sp, sp, #848	@ 0x350
 800038e:	af00      	add	r7, sp, #0
 8000390:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8000394:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8000398:	6018      	str	r0, [r3, #0]
 800039a:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800039e:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 80003a2:	6019      	str	r1, [r3, #0]
 80003a4:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80003a8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80003ac:	601a      	str	r2, [r3, #0]
  DIR dir;
  FILINFO fno;
  char uart_buffer[256];
  FRESULT res;
  
  *file_count = 0;
 80003ae:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80003b2:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
  
  res = f_opendir(&dir, "");
 80003bc:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80003c0:	4951      	ldr	r1, [pc, #324]	@ (8000508 <sd_card_ls+0x180>)
 80003c2:	4618      	mov	r0, r3
 80003c4:	f005 fa76 	bl	80058b4 <f_opendir>
 80003c8:	4603      	mov	r3, r0
 80003ca:	f887 334f 	strb.w	r3, [r7, #847]	@ 0x34f
  if (res != FR_OK) {
 80003ce:	f897 334f 	ldrb.w	r3, [r7, #847]	@ 0x34f
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d017      	beq.n	8000406 <sd_card_ls+0x7e>
    sprintf(uart_buffer, "f_opendir error: %d\n", res);
 80003d6:	f897 234f 	ldrb.w	r2, [r7, #847]	@ 0x34f
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	494b      	ldr	r1, [pc, #300]	@ (800050c <sd_card_ls+0x184>)
 80003e0:	4618      	mov	r0, r3
 80003e2:	f005 fc25 	bl	8005c30 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80003e6:	f107 0314 	add.w	r3, r7, #20
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff feae 	bl	800014c <strlen>
 80003f0:	4603      	mov	r3, r0
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	f107 0114 	add.w	r1, r7, #20
 80003f8:	f04f 33ff 	mov.w	r3, #4294967295
 80003fc:	4844      	ldr	r0, [pc, #272]	@ (8000510 <sd_card_ls+0x188>)
 80003fe:	f001 fe48 	bl	8002092 <HAL_UART_Transmit>
    while (1);
 8000402:	bf00      	nop
 8000404:	e7fd      	b.n	8000402 <sd_card_ls+0x7a>
  }
  
  sprintf(uart_buffer, "Directory listing:\n");
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	4942      	ldr	r1, [pc, #264]	@ (8000514 <sd_card_ls+0x18c>)
 800040c:	4618      	mov	r0, r3
 800040e:	f005 fc0f 	bl	8005c30 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000412:	f107 0314 	add.w	r3, r7, #20
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff fe98 	bl	800014c <strlen>
 800041c:	4603      	mov	r3, r0
 800041e:	b29a      	uxth	r2, r3
 8000420:	f107 0114 	add.w	r1, r7, #20
 8000424:	f04f 33ff 	mov.w	r3, #4294967295
 8000428:	4839      	ldr	r0, [pc, #228]	@ (8000510 <sd_card_ls+0x188>)
 800042a:	f001 fe32 	bl	8002092 <HAL_UART_Transmit>
  
  while (1) {
    res = f_readdir(&dir, &fno);
 800042e:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000432:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f005 fae2 	bl	8005a02 <f_readdir>
 800043e:	4603      	mov	r3, r0
 8000440:	f887 334f 	strb.w	r3, [r7, #847]	@ 0x34f
    sprintf(uart_buffer, "fno.fname: %s\n", fno.fname);
 8000444:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8000448:	f103 0209 	add.w	r2, r3, #9
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	4931      	ldr	r1, [pc, #196]	@ (8000518 <sd_card_ls+0x190>)
 8000452:	4618      	mov	r0, r3
 8000454:	f005 fbec 	bl	8005c30 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fe75 	bl	800014c <strlen>
 8000462:	4603      	mov	r3, r0
 8000464:	b29a      	uxth	r2, r3
 8000466:	f107 0114 	add.w	r1, r7, #20
 800046a:	f04f 33ff 	mov.w	r3, #4294967295
 800046e:	4828      	ldr	r0, [pc, #160]	@ (8000510 <sd_card_ls+0x188>)
 8000470:	f001 fe0f 	bl	8002092 <HAL_UART_Transmit>
    if (res != FR_OK || fno.fname[0] == 0) break;
 8000474:	f897 334f 	ldrb.w	r3, [r7, #847]	@ 0x34f
 8000478:	2b00      	cmp	r3, #0
 800047a:	d139      	bne.n	80004f0 <sd_card_ls+0x168>
 800047c:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8000480:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000484:	7a5b      	ldrb	r3, [r3, #9]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d032      	beq.n	80004f0 <sd_card_ls+0x168>
    
    if (*file_count < max_files) {
 800048a:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800048e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f507 7254 	add.w	r2, r7, #848	@ 0x350
 800049a:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 800049e:	6812      	ldr	r2, [r2, #0]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	dd0c      	ble.n	80004be <sd_card_ls+0x136>
      // strcpy(filename[*file_count], fno.fname);
      (*file_count)++;
 80004a4:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80004a8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	1c5a      	adds	r2, r3, #1
 80004b2:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80004b6:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	601a      	str	r2, [r3, #0]
    }
    
    sprintf(uart_buffer, "%s\n", fno.fname);
 80004be:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80004c2:	f103 0209 	add.w	r2, r3, #9
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	4914      	ldr	r1, [pc, #80]	@ (800051c <sd_card_ls+0x194>)
 80004cc:	4618      	mov	r0, r3
 80004ce:	f005 fbaf 	bl	8005c30 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff fe38 	bl	800014c <strlen>
 80004dc:	4603      	mov	r3, r0
 80004de:	b29a      	uxth	r2, r3
 80004e0:	f107 0114 	add.w	r1, r7, #20
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295
 80004e8:	4809      	ldr	r0, [pc, #36]	@ (8000510 <sd_card_ls+0x188>)
 80004ea:	f001 fdd2 	bl	8002092 <HAL_UART_Transmit>
    res = f_readdir(&dir, &fno);
 80004ee:	e79e      	b.n	800042e <sd_card_ls+0xa6>
  }
  
  f_closedir(&dir);
 80004f0:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80004f4:	4618      	mov	r0, r3
 80004f6:	f005 fa5f 	bl	80059b8 <f_closedir>
  return res;
 80004fa:	f897 334f 	ldrb.w	r3, [r7, #847]	@ 0x34f
}
 80004fe:	4618      	mov	r0, r3
 8000500:	f507 7754 	add.w	r7, r7, #848	@ 0x350
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	080065d8 	.word	0x080065d8
 800050c:	08006708 	.word	0x08006708
 8000510:	20000554 	.word	0x20000554
 8000514:	08006720 	.word	0x08006720
 8000518:	08006734 	.word	0x08006734
 800051c:	08006744 	.word	0x08006744

08000520 <sd_card_test>:

FRESULT sd_card_read_file(const char* filename, uint8_t* buffer, UINT bytes_to_read, UINT* bytes_read) {}

FRESULT sd_card_write_file(const char* filename, const uint8_t* data, UINT data_size, UINT* bytes_written) {}

void sd_card_test(void) {
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 8000526:	af00      	add	r7, sp, #0
  char data[256];
  char uart_buffer[256];

  // // open a txt file and write data
  // // observe append or overwrite behavior, should be overwrite
  err = f_open(&file, "test.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000528:	220b      	movs	r2, #11
 800052a:	492d      	ldr	r1, [pc, #180]	@ (80005e0 <sd_card_test+0xc0>)
 800052c:	482d      	ldr	r0, [pc, #180]	@ (80005e4 <sd_card_test+0xc4>)
 800052e:	f004 fcbd 	bl	8004eac <f_open>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	4b2c      	ldr	r3, [pc, #176]	@ (80005e8 <sd_card_test+0xc8>)
 8000538:	701a      	strb	r2, [r3, #0]
  if (err != FR_OK) {
 800053a:	4b2b      	ldr	r3, [pc, #172]	@ (80005e8 <sd_card_test+0xc8>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d015      	beq.n	800056e <sd_card_test+0x4e>
    sprintf(uart_buffer, "f_open error: %d\n", err);
 8000542:	4b29      	ldr	r3, [pc, #164]	@ (80005e8 <sd_card_test+0xc8>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	461a      	mov	r2, r3
 8000548:	463b      	mov	r3, r7
 800054a:	4928      	ldr	r1, [pc, #160]	@ (80005ec <sd_card_test+0xcc>)
 800054c:	4618      	mov	r0, r3
 800054e:	f005 fb6f 	bl	8005c30 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000552:	463b      	mov	r3, r7
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff fdf9 	bl	800014c <strlen>
 800055a:	4603      	mov	r3, r0
 800055c:	b29a      	uxth	r2, r3
 800055e:	4639      	mov	r1, r7
 8000560:	f04f 33ff 	mov.w	r3, #4294967295
 8000564:	4822      	ldr	r0, [pc, #136]	@ (80005f0 <sd_card_test+0xd0>)
 8000566:	f001 fd94 	bl	8002092 <HAL_UART_Transmit>
    while (1);
 800056a:	bf00      	nop
 800056c:	e7fd      	b.n	800056a <sd_card_test+0x4a>
  }
  sprintf(uart_buffer, "File created/opened successfully.\n");
 800056e:	463b      	mov	r3, r7
 8000570:	4920      	ldr	r1, [pc, #128]	@ (80005f4 <sd_card_test+0xd4>)
 8000572:	4618      	mov	r0, r3
 8000574:	f005 fb5c 	bl	8005c30 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000578:	463b      	mov	r3, r7
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff fde6 	bl	800014c <strlen>
 8000580:	4603      	mov	r3, r0
 8000582:	b29a      	uxth	r2, r3
 8000584:	4639      	mov	r1, r7
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	4819      	ldr	r0, [pc, #100]	@ (80005f0 <sd_card_test+0xd0>)
 800058c:	f001 fd81 	bl	8002092 <HAL_UART_Transmit>
  f_puts("Hello, World!1\n", &file);
 8000590:	4914      	ldr	r1, [pc, #80]	@ (80005e4 <sd_card_test+0xc4>)
 8000592:	4819      	ldr	r0, [pc, #100]	@ (80005f8 <sd_card_test+0xd8>)
 8000594:	f005 fab8 	bl	8005b08 <f_puts>
  memset(data, 0, sizeof(data));
 8000598:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800059c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f005 fb66 	bl	8005c74 <memset>
  strcpy(data, "Hello, World!2\n");
 80005a8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80005ac:	4a13      	ldr	r2, [pc, #76]	@ (80005fc <sd_card_test+0xdc>)
 80005ae:	461c      	mov	r4, r3
 80005b0:	4613      	mov	r3, r2
 80005b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  f_write(&file, data, strlen(data), &write_count);
 80005b8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fdc5 	bl	800014c <strlen>
 80005c2:	4602      	mov	r2, r0
 80005c4:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80005c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <sd_card_test+0xe0>)
 80005ca:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <sd_card_test+0xc4>)
 80005cc:	f004 fee3 	bl	8005396 <f_write>
  f_close(&file);
 80005d0:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <sd_card_test+0xc4>)
 80005d2:	f005 f947 	bl	8005864 <f_close>
  //   HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, sizeof(uart_buffer) - 1, HAL_MAX_DELAY);
  //   while (1);
  // }
  // sprintf(uart_buffer, "File deleted successfully.\n");
  // HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, sizeof(uart_buffer) - 1, HAL_MAX_DELAY);
 80005d6:	bf00      	nop
 80005d8:	f507 7701 	add.w	r7, r7, #516	@ 0x204
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd90      	pop	{r4, r7, pc}
 80005e0:	0800679c 	.word	0x0800679c
 80005e4:	200002c4 	.word	0x200002c4
 80005e8:	200004f0 	.word	0x200004f0
 80005ec:	08006748 	.word	0x08006748
 80005f0:	20000554 	.word	0x20000554
 80005f4:	080067a8 	.word	0x080067a8
 80005f8:	080067cc 	.word	0x080067cc
 80005fc:	080067dc 	.word	0x080067dc
 8000600:	200004f4 	.word	0x200004f4

08000604 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000608:	4b17      	ldr	r3, [pc, #92]	@ (8000668 <MX_SPI1_Init+0x64>)
 800060a:	4a18      	ldr	r2, [pc, #96]	@ (800066c <MX_SPI1_Init+0x68>)
 800060c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800060e:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <MX_SPI1_Init+0x64>)
 8000610:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000614:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000616:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <MX_SPI1_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800061c:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_SPI1_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_SPI1_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_SPI1_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_SPI1_Init+0x64>)
 8000630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000634:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_SPI1_Init+0x64>)
 8000638:	2238      	movs	r2, #56	@ 0x38
 800063a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <MX_SPI1_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_SPI1_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <MX_SPI1_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_SPI1_Init+0x64>)
 8000650:	220a      	movs	r2, #10
 8000652:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_SPI1_Init+0x64>)
 8000656:	f001 f8a1 	bl	800179c <HAL_SPI_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000660:	f7ff fe3b 	bl	80002da <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200004f8 	.word	0x200004f8
 800066c:	40013000 	.word	0x40013000

08000670 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a1b      	ldr	r2, [pc, #108]	@ (80006f8 <HAL_SPI_MspInit+0x88>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d12f      	bne.n	80006f0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000690:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <HAL_SPI_MspInit+0x8c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a19      	ldr	r2, [pc, #100]	@ (80006fc <HAL_SPI_MspInit+0x8c>)
 8000696:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <HAL_SPI_MspInit+0x8c>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <HAL_SPI_MspInit+0x8c>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a13      	ldr	r2, [pc, #76]	@ (80006fc <HAL_SPI_MspInit+0x8c>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <HAL_SPI_MspInit+0x8c>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MOSI_Pin;
 80006c0:	23a0      	movs	r3, #160	@ 0xa0
 80006c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	480b      	ldr	r0, [pc, #44]	@ (8000700 <HAL_SPI_MspInit+0x90>)
 80006d4:	f000 fab6 	bl	8000c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin;
 80006d8:	2340      	movs	r3, #64	@ 0x40
 80006da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	4805      	ldr	r0, [pc, #20]	@ (8000700 <HAL_SPI_MspInit+0x90>)
 80006ec:	f000 faaa 	bl	8000c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40013000 	.word	0x40013000
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010800 	.word	0x40010800

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4a14      	ldr	r2, [pc, #80]	@ (8000760 <HAL_MspInit+0x5c>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <HAL_MspInit+0x5c>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a0e      	ldr	r2, [pc, #56]	@ (8000760 <HAL_MspInit+0x5c>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <HAL_MspInit+0x5c>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <HAL_MspInit+0x60>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <HAL_MspInit+0x60>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000
 8000764:	40010000 	.word	0x40010000

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <NMI_Handler+0x4>

08000770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <MemManage_Handler+0x4>

08000780 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <UsageFault_Handler+0x4>

08000790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f920 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007c8:	4a14      	ldr	r2, [pc, #80]	@ (800081c <_sbrk+0x5c>)
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <_sbrk+0x60>)
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <_sbrk+0x64>)
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <_sbrk+0x68>)
 80007e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d207      	bcs.n	8000800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f0:	f005 fa48 	bl	8005c84 <__errno>
 80007f4:	4603      	mov	r3, r0
 80007f6:	220c      	movs	r2, #12
 80007f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	e009      	b.n	8000814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <_sbrk+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000806:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	4a05      	ldr	r2, [pc, #20]	@ (8000824 <_sbrk+0x64>)
 8000810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000812:	68fb      	ldr	r3, [r7, #12]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20005000 	.word	0x20005000
 8000820:	00000400 	.word	0x00000400
 8000824:	20000550 	.word	0x20000550
 8000828:	20000728 	.word	0x20000728

0800082c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <MX_USART1_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 8000870:	f001 fbbf 	bl	8001ff2 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f7ff fd2e 	bl	80002da <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000554 	.word	0x20000554
 8000888:	40013800 	.word	0x40013800

0800088c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <HAL_UART_MspInit+0x8c>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d131      	bne.n	8000910 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_UART_MspInit+0x90>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a1a      	ldr	r2, [pc, #104]	@ (800091c <HAL_UART_MspInit+0x90>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b18      	ldr	r3, [pc, #96]	@ (800091c <HAL_UART_MspInit+0x90>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <HAL_UART_MspInit+0x90>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a14      	ldr	r2, [pc, #80]	@ (800091c <HAL_UART_MspInit+0x90>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <HAL_UART_MspInit+0x90>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	4619      	mov	r1, r3
 80008f0:	480b      	ldr	r0, [pc, #44]	@ (8000920 <HAL_UART_MspInit+0x94>)
 80008f2:	f000 f9a7 	bl	8000c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4619      	mov	r1, r3
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <HAL_UART_MspInit+0x94>)
 800090c:	f000 f99a 	bl	8000c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40013800 	.word	0x40013800
 800091c:	40021000 	.word	0x40021000
 8000920:	40010800 	.word	0x40010800

08000924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000924:	f7ff ff82 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480b      	ldr	r0, [pc, #44]	@ (8000958 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800092a:	490c      	ldr	r1, [pc, #48]	@ (800095c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800092c:	4a0c      	ldr	r2, [pc, #48]	@ (8000960 <LoopFillZerobss+0x16>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a09      	ldr	r2, [pc, #36]	@ (8000964 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000940:	4c09      	ldr	r4, [pc, #36]	@ (8000968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094e:	f005 f99f 	bl	8005c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000952:	f7ff fc41 	bl	80001d8 <main>
  bx lr
 8000956:	4770      	bx	lr
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000960:	08006920 	.word	0x08006920
  ldr r2, =_sbss
 8000964:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000968:	20000728 	.word	0x20000728

0800096c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_2_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <HAL_Init+0x28>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	@ (8000998 <HAL_Init+0x28>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f92b 	bl	8000bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	200f      	movs	r0, #15
 8000988:	f000 f808 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f7ff feba 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40022000 	.word	0x40022000

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <HAL_InitTick+0x54>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_InitTick+0x58>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f935 	bl	8000c2a <HAL_SYSTICK_Config>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00e      	b.n	80009e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d80a      	bhi.n	80009e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f000 f90b 	bl	8000bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009dc:	4a06      	ldr	r2, [pc, #24]	@ (80009f8 <HAL_InitTick+0x5c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e000      	b.n	80009e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <HAL_IncTick+0x1c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <HAL_IncTick+0x20>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a03      	ldr	r2, [pc, #12]	@ (8000a1c <HAL_IncTick+0x20>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	2000059c 	.word	0x2000059c

08000a20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b02      	ldr	r3, [pc, #8]	@ (8000a30 <HAL_GetTick+0x10>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	2000059c 	.word	0x2000059c

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff fff0 	bl	8000a20 <HAL_GetTick>
 8000a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffe0 	bl	8000a20 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	@ (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	@ (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	@ 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	@ 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ba8:	d301      	bcc.n	8000bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00f      	b.n	8000bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <SysTick_Config+0x40>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f7ff ff90 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <SysTick_Config+0x40>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc6:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <SysTick_Config+0x40>)
 8000bc8:	2207      	movs	r2, #7
 8000bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	e000e010 	.word	0xe000e010

08000bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff49 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c04:	f7ff ff5e 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	f7ff ff90 	bl	8000b34 <NVIC_EncodePriority>
 8000c14:	4602      	mov	r2, r0
 8000c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5f 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ffb0 	bl	8000b98 <SysTick_Config>
 8000c38:	4603      	mov	r3, r0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b08b      	sub	sp, #44	@ 0x2c
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c56:	e169      	b.n	8000f2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f040 8158 	bne.w	8000f26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	4a9a      	ldr	r2, [pc, #616]	@ (8000ee4 <HAL_GPIO_Init+0x2a0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d05e      	beq.n	8000d3e <HAL_GPIO_Init+0xfa>
 8000c80:	4a98      	ldr	r2, [pc, #608]	@ (8000ee4 <HAL_GPIO_Init+0x2a0>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d875      	bhi.n	8000d72 <HAL_GPIO_Init+0x12e>
 8000c86:	4a98      	ldr	r2, [pc, #608]	@ (8000ee8 <HAL_GPIO_Init+0x2a4>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d058      	beq.n	8000d3e <HAL_GPIO_Init+0xfa>
 8000c8c:	4a96      	ldr	r2, [pc, #600]	@ (8000ee8 <HAL_GPIO_Init+0x2a4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d86f      	bhi.n	8000d72 <HAL_GPIO_Init+0x12e>
 8000c92:	4a96      	ldr	r2, [pc, #600]	@ (8000eec <HAL_GPIO_Init+0x2a8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d052      	beq.n	8000d3e <HAL_GPIO_Init+0xfa>
 8000c98:	4a94      	ldr	r2, [pc, #592]	@ (8000eec <HAL_GPIO_Init+0x2a8>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d869      	bhi.n	8000d72 <HAL_GPIO_Init+0x12e>
 8000c9e:	4a94      	ldr	r2, [pc, #592]	@ (8000ef0 <HAL_GPIO_Init+0x2ac>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d04c      	beq.n	8000d3e <HAL_GPIO_Init+0xfa>
 8000ca4:	4a92      	ldr	r2, [pc, #584]	@ (8000ef0 <HAL_GPIO_Init+0x2ac>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d863      	bhi.n	8000d72 <HAL_GPIO_Init+0x12e>
 8000caa:	4a92      	ldr	r2, [pc, #584]	@ (8000ef4 <HAL_GPIO_Init+0x2b0>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d046      	beq.n	8000d3e <HAL_GPIO_Init+0xfa>
 8000cb0:	4a90      	ldr	r2, [pc, #576]	@ (8000ef4 <HAL_GPIO_Init+0x2b0>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d85d      	bhi.n	8000d72 <HAL_GPIO_Init+0x12e>
 8000cb6:	2b12      	cmp	r3, #18
 8000cb8:	d82a      	bhi.n	8000d10 <HAL_GPIO_Init+0xcc>
 8000cba:	2b12      	cmp	r3, #18
 8000cbc:	d859      	bhi.n	8000d72 <HAL_GPIO_Init+0x12e>
 8000cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc4 <HAL_GPIO_Init+0x80>)
 8000cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc4:	08000d3f 	.word	0x08000d3f
 8000cc8:	08000d19 	.word	0x08000d19
 8000ccc:	08000d2b 	.word	0x08000d2b
 8000cd0:	08000d6d 	.word	0x08000d6d
 8000cd4:	08000d73 	.word	0x08000d73
 8000cd8:	08000d73 	.word	0x08000d73
 8000cdc:	08000d73 	.word	0x08000d73
 8000ce0:	08000d73 	.word	0x08000d73
 8000ce4:	08000d73 	.word	0x08000d73
 8000ce8:	08000d73 	.word	0x08000d73
 8000cec:	08000d73 	.word	0x08000d73
 8000cf0:	08000d73 	.word	0x08000d73
 8000cf4:	08000d73 	.word	0x08000d73
 8000cf8:	08000d73 	.word	0x08000d73
 8000cfc:	08000d73 	.word	0x08000d73
 8000d00:	08000d73 	.word	0x08000d73
 8000d04:	08000d73 	.word	0x08000d73
 8000d08:	08000d21 	.word	0x08000d21
 8000d0c:	08000d35 	.word	0x08000d35
 8000d10:	4a79      	ldr	r2, [pc, #484]	@ (8000ef8 <HAL_GPIO_Init+0x2b4>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d013      	beq.n	8000d3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d16:	e02c      	b.n	8000d72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	623b      	str	r3, [r7, #32]
          break;
 8000d1e:	e029      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	3304      	adds	r3, #4
 8000d26:	623b      	str	r3, [r7, #32]
          break;
 8000d28:	e024      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	3308      	adds	r3, #8
 8000d30:	623b      	str	r3, [r7, #32]
          break;
 8000d32:	e01f      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	330c      	adds	r3, #12
 8000d3a:	623b      	str	r3, [r7, #32]
          break;
 8000d3c:	e01a      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d102      	bne.n	8000d4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d46:	2304      	movs	r3, #4
 8000d48:	623b      	str	r3, [r7, #32]
          break;
 8000d4a:	e013      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d105      	bne.n	8000d60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d54:	2308      	movs	r3, #8
 8000d56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	611a      	str	r2, [r3, #16]
          break;
 8000d5e:	e009      	b.n	8000d74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d60:	2308      	movs	r3, #8
 8000d62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	615a      	str	r2, [r3, #20]
          break;
 8000d6a:	e003      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
          break;
 8000d70:	e000      	b.n	8000d74 <HAL_GPIO_Init+0x130>
          break;
 8000d72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	2bff      	cmp	r3, #255	@ 0xff
 8000d78:	d801      	bhi.n	8000d7e <HAL_GPIO_Init+0x13a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	e001      	b.n	8000d82 <HAL_GPIO_Init+0x13e>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3304      	adds	r3, #4
 8000d82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	2bff      	cmp	r3, #255	@ 0xff
 8000d88:	d802      	bhi.n	8000d90 <HAL_GPIO_Init+0x14c>
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	e002      	b.n	8000d96 <HAL_GPIO_Init+0x152>
 8000d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d92:	3b08      	subs	r3, #8
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	210f      	movs	r1, #15
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	401a      	ands	r2, r3
 8000da8:	6a39      	ldr	r1, [r7, #32]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	431a      	orrs	r2, r3
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 80b1 	beq.w	8000f26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8000efc <HAL_GPIO_Init+0x2b8>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a4c      	ldr	r2, [pc, #304]	@ (8000efc <HAL_GPIO_Init+0x2b8>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b4a      	ldr	r3, [pc, #296]	@ (8000efc <HAL_GPIO_Init+0x2b8>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ddc:	4a48      	ldr	r2, [pc, #288]	@ (8000f00 <HAL_GPIO_Init+0x2bc>)
 8000dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	3302      	adds	r3, #2
 8000de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	220f      	movs	r2, #15
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a40      	ldr	r2, [pc, #256]	@ (8000f04 <HAL_GPIO_Init+0x2c0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d013      	beq.n	8000e30 <HAL_GPIO_Init+0x1ec>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f08 <HAL_GPIO_Init+0x2c4>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d00d      	beq.n	8000e2c <HAL_GPIO_Init+0x1e8>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a3e      	ldr	r2, [pc, #248]	@ (8000f0c <HAL_GPIO_Init+0x2c8>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d007      	beq.n	8000e28 <HAL_GPIO_Init+0x1e4>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f10 <HAL_GPIO_Init+0x2cc>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d101      	bne.n	8000e24 <HAL_GPIO_Init+0x1e0>
 8000e20:	2303      	movs	r3, #3
 8000e22:	e006      	b.n	8000e32 <HAL_GPIO_Init+0x1ee>
 8000e24:	2304      	movs	r3, #4
 8000e26:	e004      	b.n	8000e32 <HAL_GPIO_Init+0x1ee>
 8000e28:	2302      	movs	r3, #2
 8000e2a:	e002      	b.n	8000e32 <HAL_GPIO_Init+0x1ee>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <HAL_GPIO_Init+0x1ee>
 8000e30:	2300      	movs	r3, #0
 8000e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e34:	f002 0203 	and.w	r2, r2, #3
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	4093      	lsls	r3, r2
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e42:	492f      	ldr	r1, [pc, #188]	@ (8000f00 <HAL_GPIO_Init+0x2bc>)
 8000e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	492c      	ldr	r1, [pc, #176]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	608b      	str	r3, [r1, #8]
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	4928      	ldr	r1, [pc, #160]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d006      	beq.n	8000e92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e84:	4b23      	ldr	r3, [pc, #140]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	4922      	ldr	r1, [pc, #136]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	60cb      	str	r3, [r1, #12]
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e92:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	491e      	ldr	r1, [pc, #120]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d006      	beq.n	8000eba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	4918      	ldr	r1, [pc, #96]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	604b      	str	r3, [r1, #4]
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	4914      	ldr	r1, [pc, #80]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d021      	beq.n	8000f18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	490e      	ldr	r1, [pc, #56]	@ (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	600b      	str	r3, [r1, #0]
 8000ee0:	e021      	b.n	8000f26 <HAL_GPIO_Init+0x2e2>
 8000ee2:	bf00      	nop
 8000ee4:	10320000 	.word	0x10320000
 8000ee8:	10310000 	.word	0x10310000
 8000eec:	10220000 	.word	0x10220000
 8000ef0:	10210000 	.word	0x10210000
 8000ef4:	10120000 	.word	0x10120000
 8000ef8:	10110000 	.word	0x10110000
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010000 	.word	0x40010000
 8000f04:	40010800 	.word	0x40010800
 8000f08:	40010c00 	.word	0x40010c00
 8000f0c:	40011000 	.word	0x40011000
 8000f10:	40011400 	.word	0x40011400
 8000f14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_GPIO_Init+0x304>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	4909      	ldr	r1, [pc, #36]	@ (8000f48 <HAL_GPIO_Init+0x304>)
 8000f22:	4013      	ands	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f28:	3301      	adds	r3, #1
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f32:	fa22 f303 	lsr.w	r3, r2, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f47f ae8e 	bne.w	8000c58 <HAL_GPIO_Init+0x14>
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	372c      	adds	r7, #44	@ 0x2c
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	40010400 	.word	0x40010400

08000f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f5c:	787b      	ldrb	r3, [r7, #1]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f68:	e003      	b.n	8000f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	041a      	lsls	r2, r3, #16
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	611a      	str	r2, [r3, #16]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e272      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8087 	beq.w	80010aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f9c:	4b92      	ldr	r3, [pc, #584]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 030c 	and.w	r3, r3, #12
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d00c      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fa8:	4b8f      	ldr	r3, [pc, #572]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 030c 	and.w	r3, r3, #12
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d112      	bne.n	8000fda <HAL_RCC_OscConfig+0x5e>
 8000fb4:	4b8c      	ldr	r3, [pc, #560]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc0:	d10b      	bne.n	8000fda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc2:	4b89      	ldr	r3, [pc, #548]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d06c      	beq.n	80010a8 <HAL_RCC_OscConfig+0x12c>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d168      	bne.n	80010a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e24c      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fe2:	d106      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x76>
 8000fe4:	4b80      	ldr	r3, [pc, #512]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a7f      	ldr	r2, [pc, #508]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	e02e      	b.n	8001050 <HAL_RCC_OscConfig+0xd4>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0x98>
 8000ffa:	4b7b      	ldr	r3, [pc, #492]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a7a      	ldr	r2, [pc, #488]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b78      	ldr	r3, [pc, #480]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a77      	ldr	r2, [pc, #476]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800100c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e01d      	b.n	8001050 <HAL_RCC_OscConfig+0xd4>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800101c:	d10c      	bne.n	8001038 <HAL_RCC_OscConfig+0xbc>
 800101e:	4b72      	ldr	r3, [pc, #456]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a71      	ldr	r2, [pc, #452]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001024:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b6f      	ldr	r3, [pc, #444]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a6e      	ldr	r2, [pc, #440]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e00b      	b.n	8001050 <HAL_RCC_OscConfig+0xd4>
 8001038:	4b6b      	ldr	r3, [pc, #428]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a6a      	ldr	r2, [pc, #424]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800103e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b68      	ldr	r3, [pc, #416]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a67      	ldr	r2, [pc, #412]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800104a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800104e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d013      	beq.n	8001080 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff fce2 	bl	8000a20 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fcde 	bl	8000a20 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	@ 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e200      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	4b5d      	ldr	r3, [pc, #372]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0xe4>
 800107e:	e014      	b.n	80010aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fcce 	bl	8000a20 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fcca 	bl	8000a20 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	@ 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e1ec      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	4b53      	ldr	r3, [pc, #332]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0x10c>
 80010a6:	e000      	b.n	80010aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d063      	beq.n	800117e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010b6:	4b4c      	ldr	r3, [pc, #304]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00b      	beq.n	80010da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010c2:	4b49      	ldr	r3, [pc, #292]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d11c      	bne.n	8001108 <HAL_RCC_OscConfig+0x18c>
 80010ce:	4b46      	ldr	r3, [pc, #280]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d116      	bne.n	8001108 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010da:	4b43      	ldr	r3, [pc, #268]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <HAL_RCC_OscConfig+0x176>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d001      	beq.n	80010f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e1c0      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f2:	4b3d      	ldr	r3, [pc, #244]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4939      	ldr	r1, [pc, #228]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001106:	e03a      	b.n	800117e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d020      	beq.n	8001152 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001110:	4b36      	ldr	r3, [pc, #216]	@ (80011ec <HAL_RCC_OscConfig+0x270>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001116:	f7ff fc83 	bl	8000a20 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111e:	f7ff fc7f 	bl	8000a20 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e1a1      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001130:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4927      	ldr	r1, [pc, #156]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800114c:	4313      	orrs	r3, r2
 800114e:	600b      	str	r3, [r1, #0]
 8001150:	e015      	b.n	800117e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001152:	4b26      	ldr	r3, [pc, #152]	@ (80011ec <HAL_RCC_OscConfig+0x270>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fc62 	bl	8000a20 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001160:	f7ff fc5e 	bl	8000a20 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e180      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	2b00      	cmp	r3, #0
 8001188:	d03a      	beq.n	8001200 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d019      	beq.n	80011c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001192:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <HAL_RCC_OscConfig+0x274>)
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001198:	f7ff fc42 	bl	8000a20 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a0:	f7ff fc3e 	bl	8000a20 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e160      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011be:	2001      	movs	r0, #1
 80011c0:	f000 face 	bl	8001760 <RCC_Delay>
 80011c4:	e01c      	b.n	8001200 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <HAL_RCC_OscConfig+0x274>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011cc:	f7ff fc28 	bl	8000a20 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d2:	e00f      	b.n	80011f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d4:	f7ff fc24 	bl	8000a20 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d908      	bls.n	80011f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e146      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000
 80011ec:	42420000 	.word	0x42420000
 80011f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f4:	4b92      	ldr	r3, [pc, #584]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1e9      	bne.n	80011d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 80a6 	beq.w	800135a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001212:	4b8b      	ldr	r3, [pc, #556]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10d      	bne.n	800123a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b88      	ldr	r3, [pc, #544]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a87      	ldr	r2, [pc, #540]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b85      	ldr	r3, [pc, #532]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001236:	2301      	movs	r3, #1
 8001238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123a:	4b82      	ldr	r3, [pc, #520]	@ (8001444 <HAL_RCC_OscConfig+0x4c8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001242:	2b00      	cmp	r3, #0
 8001244:	d118      	bne.n	8001278 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001246:	4b7f      	ldr	r3, [pc, #508]	@ (8001444 <HAL_RCC_OscConfig+0x4c8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a7e      	ldr	r2, [pc, #504]	@ (8001444 <HAL_RCC_OscConfig+0x4c8>)
 800124c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001252:	f7ff fbe5 	bl	8000a20 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125a:	f7ff fbe1 	bl	8000a20 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b64      	cmp	r3, #100	@ 0x64
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e103      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126c:	4b75      	ldr	r3, [pc, #468]	@ (8001444 <HAL_RCC_OscConfig+0x4c8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f0      	beq.n	800125a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x312>
 8001280:	4b6f      	ldr	r3, [pc, #444]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4a6e      	ldr	r2, [pc, #440]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6213      	str	r3, [r2, #32]
 800128c:	e02d      	b.n	80012ea <HAL_RCC_OscConfig+0x36e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x334>
 8001296:	4b6a      	ldr	r3, [pc, #424]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	4a69      	ldr	r2, [pc, #420]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	f023 0301 	bic.w	r3, r3, #1
 80012a0:	6213      	str	r3, [r2, #32]
 80012a2:	4b67      	ldr	r3, [pc, #412]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	4a66      	ldr	r2, [pc, #408]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	f023 0304 	bic.w	r3, r3, #4
 80012ac:	6213      	str	r3, [r2, #32]
 80012ae:	e01c      	b.n	80012ea <HAL_RCC_OscConfig+0x36e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d10c      	bne.n	80012d2 <HAL_RCC_OscConfig+0x356>
 80012b8:	4b61      	ldr	r3, [pc, #388]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4a60      	ldr	r2, [pc, #384]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6213      	str	r3, [r2, #32]
 80012c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4a5d      	ldr	r2, [pc, #372]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6213      	str	r3, [r2, #32]
 80012d0:	e00b      	b.n	80012ea <HAL_RCC_OscConfig+0x36e>
 80012d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	f023 0301 	bic.w	r3, r3, #1
 80012dc:	6213      	str	r3, [r2, #32]
 80012de:	4b58      	ldr	r3, [pc, #352]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4a57      	ldr	r2, [pc, #348]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	f023 0304 	bic.w	r3, r3, #4
 80012e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d015      	beq.n	800131e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fb95 	bl	8000a20 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f8:	e00a      	b.n	8001310 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012fa:	f7ff fb91 	bl	8000a20 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001308:	4293      	cmp	r3, r2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e0b1      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001310:	4b4b      	ldr	r3, [pc, #300]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0ee      	beq.n	80012fa <HAL_RCC_OscConfig+0x37e>
 800131c:	e014      	b.n	8001348 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131e:	f7ff fb7f 	bl	8000a20 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001324:	e00a      	b.n	800133c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f7ff fb7b 	bl	8000a20 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001334:	4293      	cmp	r3, r2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e09b      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133c:	4b40      	ldr	r3, [pc, #256]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1ee      	bne.n	8001326 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d105      	bne.n	800135a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800134e:	4b3c      	ldr	r3, [pc, #240]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a3b      	ldr	r2, [pc, #236]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001358:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 8087 	beq.w	8001472 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001364:	4b36      	ldr	r3, [pc, #216]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b08      	cmp	r3, #8
 800136e:	d061      	beq.n	8001434 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d146      	bne.n	8001406 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001378:	4b33      	ldr	r3, [pc, #204]	@ (8001448 <HAL_RCC_OscConfig+0x4cc>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fb4f 	bl	8000a20 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001386:	f7ff fb4b 	bl	8000a20 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e06d      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001398:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ac:	d108      	bne.n	80013c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ae:	4b24      	ldr	r3, [pc, #144]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	4921      	ldr	r1, [pc, #132]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a19      	ldr	r1, [r3, #32]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d0:	430b      	orrs	r3, r1
 80013d2:	491b      	ldr	r1, [pc, #108]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <HAL_RCC_OscConfig+0x4cc>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fb1f 	bl	8000a20 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff fb1b 	bl	8000a20 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e03d      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x46a>
 8001404:	e035      	b.n	8001472 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_RCC_OscConfig+0x4cc>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fb08 	bl	8000a20 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fb04 	bl	8000a20 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e026      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x498>
 8001432:	e01e      	b.n	8001472 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d107      	bne.n	800144c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e019      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
 8001440:	40021000 	.word	0x40021000
 8001444:	40007000 	.word	0x40007000
 8001448:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800144c:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <HAL_RCC_OscConfig+0x500>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	429a      	cmp	r2, r3
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d001      	beq.n	8001472 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0d0      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001494:	4b6a      	ldr	r3, [pc, #424]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d910      	bls.n	80014c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b67      	ldr	r3, [pc, #412]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 0207 	bic.w	r2, r3, #7
 80014aa:	4965      	ldr	r1, [pc, #404]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b63      	ldr	r3, [pc, #396]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0b8      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d020      	beq.n	8001512 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014dc:	4b59      	ldr	r3, [pc, #356]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4a58      	ldr	r2, [pc, #352]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f4:	4b53      	ldr	r3, [pc, #332]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4a52      	ldr	r2, [pc, #328]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001500:	4b50      	ldr	r3, [pc, #320]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	494d      	ldr	r1, [pc, #308]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d040      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	4b47      	ldr	r3, [pc, #284]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d115      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e07f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153e:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d109      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e073      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154e:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e06b      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155e:	4b39      	ldr	r3, [pc, #228]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f023 0203 	bic.w	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4936      	ldr	r1, [pc, #216]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001570:	f7ff fa56 	bl	8000a20 <HAL_GetTick>
 8001574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001576:	e00a      	b.n	800158e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001578:	f7ff fa52 	bl	8000a20 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e053      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	4b2d      	ldr	r3, [pc, #180]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 020c 	and.w	r2, r3, #12
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	429a      	cmp	r2, r3
 800159e:	d1eb      	bne.n	8001578 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d210      	bcs.n	80015d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 0207 	bic.w	r2, r3, #7
 80015b6:	4922      	ldr	r1, [pc, #136]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e032      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015dc:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	4916      	ldr	r1, [pc, #88]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d009      	beq.n	800160e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	490e      	ldr	r1, [pc, #56]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	4313      	orrs	r3, r2
 800160c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800160e:	f000 f821 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8001612:	4602      	mov	r2, r0
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	490a      	ldr	r1, [pc, #40]	@ (8001648 <HAL_RCC_ClockConfig+0x1c8>)
 8001620:	5ccb      	ldrb	r3, [r1, r3]
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	4a09      	ldr	r2, [pc, #36]	@ (800164c <HAL_RCC_ClockConfig+0x1cc>)
 8001628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <HAL_RCC_ClockConfig+0x1d0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff f9b4 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40022000 	.word	0x40022000
 8001644:	40021000 	.word	0x40021000
 8001648:	08006830 	.word	0x08006830
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800166e:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b04      	cmp	r3, #4
 800167c:	d002      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x30>
 800167e:	2b08      	cmp	r3, #8
 8001680:	d003      	beq.n	800168a <HAL_RCC_GetSysClockFreq+0x36>
 8001682:	e027      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001686:	613b      	str	r3, [r7, #16]
      break;
 8001688:	e027      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	0c9b      	lsrs	r3, r3, #18
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	4a17      	ldr	r2, [pc, #92]	@ (80016f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d010      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	0c5b      	lsrs	r3, r3, #17
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	4a11      	ldr	r2, [pc, #68]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x98>)
 80016b6:	fb03 f202 	mul.w	r2, r3, r2
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e004      	b.n	80016ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a0c      	ldr	r2, [pc, #48]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	613b      	str	r3, [r7, #16]
      break;
 80016d2:	e002      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x98>)
 80016d6:	613b      	str	r3, [r7, #16]
      break;
 80016d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016da:	693b      	ldr	r3, [r7, #16]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	371c      	adds	r7, #28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	007a1200 	.word	0x007a1200
 80016f0:	08006848 	.word	0x08006848
 80016f4:	08006858 	.word	0x08006858
 80016f8:	003d0900 	.word	0x003d0900

080016fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001700:	4b02      	ldr	r3, [pc, #8]	@ (800170c <HAL_RCC_GetHCLKFreq+0x10>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	20000000 	.word	0x20000000

08001710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001714:	f7ff fff2 	bl	80016fc <HAL_RCC_GetHCLKFreq>
 8001718:	4602      	mov	r2, r0
 800171a:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	4903      	ldr	r1, [pc, #12]	@ (8001734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000
 8001734:	08006840 	.word	0x08006840

08001738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800173c:	f7ff ffde 	bl	80016fc <HAL_RCC_GetHCLKFreq>
 8001740:	4602      	mov	r2, r0
 8001742:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	0adb      	lsrs	r3, r3, #11
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	4903      	ldr	r1, [pc, #12]	@ (800175c <HAL_RCC_GetPCLK2Freq+0x24>)
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001754:	4618      	mov	r0, r3
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	08006840 	.word	0x08006840

08001760 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <RCC_Delay+0x34>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <RCC_Delay+0x38>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0a5b      	lsrs	r3, r3, #9
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	fb02 f303 	mul.w	r3, r2, r3
 800177a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800177c:	bf00      	nop
  }
  while (Delay --);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1e5a      	subs	r2, r3, #1
 8001782:	60fa      	str	r2, [r7, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f9      	bne.n	800177c <RCC_Delay+0x1c>
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	20000000 	.word	0x20000000
 8001798:	10624dd3 	.word	0x10624dd3

0800179c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e076      	b.n	800189c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d108      	bne.n	80017c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80017be:	d009      	beq.n	80017d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
 80017c6:	e005      	b.n	80017d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7fe ff3e 	bl	8000670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800180a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001858:	ea42 0103 	orr.w	r1, r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001860:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	0c1a      	lsrs	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f002 0204 	and.w	r2, r2, #4
 800187a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800188a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	4613      	mov	r3, r2
 80018b2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018b4:	f7ff f8b4 	bl	8000a20 <HAL_GetTick>
 80018b8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d001      	beq.n	80018ce <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80018ca:	2302      	movs	r3, #2
 80018cc:	e12a      	b.n	8001b24 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <HAL_SPI_Transmit+0x36>
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e122      	b.n	8001b24 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_SPI_Transmit+0x48>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e11b      	b.n	8001b24 <HAL_SPI_Transmit+0x280>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2203      	movs	r2, #3
 80018f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	88fa      	ldrh	r2, [r7, #6]
 8001912:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800193a:	d10f      	bne.n	800195c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800194a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800195a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001966:	2b40      	cmp	r3, #64	@ 0x40
 8001968:	d007      	beq.n	800197a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001982:	d152      	bne.n	8001a2a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <HAL_SPI_Transmit+0xee>
 800198c:	8b7b      	ldrh	r3, [r7, #26]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d145      	bne.n	8001a1e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	881a      	ldrh	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	1c9a      	adds	r2, r3, #2
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80019b6:	e032      	b.n	8001a1e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d112      	bne.n	80019ec <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	881a      	ldrh	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	1c9a      	adds	r2, r3, #2
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80019ea:	e018      	b.n	8001a1e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019ec:	f7ff f818 	bl	8000a20 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d803      	bhi.n	8001a04 <HAL_SPI_Transmit+0x160>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a02:	d102      	bne.n	8001a0a <HAL_SPI_Transmit+0x166>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e082      	b.n	8001b24 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1c7      	bne.n	80019b8 <HAL_SPI_Transmit+0x114>
 8001a28:	e053      	b.n	8001ad2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HAL_SPI_Transmit+0x194>
 8001a32:	8b7b      	ldrh	r3, [r7, #26]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d147      	bne.n	8001ac8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	330c      	adds	r3, #12
 8001a42:	7812      	ldrb	r2, [r2, #0]
 8001a44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001a5e:	e033      	b.n	8001ac8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d113      	bne.n	8001a96 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	330c      	adds	r3, #12
 8001a78:	7812      	ldrb	r2, [r2, #0]
 8001a7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001a94:	e018      	b.n	8001ac8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a96:	f7fe ffc3 	bl	8000a20 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d803      	bhi.n	8001aae <HAL_SPI_Transmit+0x20a>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d102      	bne.n	8001ab4 <HAL_SPI_Transmit+0x210>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d109      	bne.n	8001ac8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e02d      	b.n	8001b24 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1c6      	bne.n	8001a60 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	6839      	ldr	r1, [r7, #0]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 fa5a 	bl	8001f90 <SPI_EndRxTxTransaction>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10a      	bne.n	8001b06 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001b22:	2300      	movs	r3, #0
  }
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b3e:	f7fe ff6f 	bl	8000a20 <HAL_GetTick>
 8001b42:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001b4a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001b52:	887b      	ldrh	r3, [r7, #2]
 8001b54:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b56:	7ffb      	ldrb	r3, [r7, #31]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d00c      	beq.n	8001b76 <HAL_SPI_TransmitReceive+0x4a>
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b62:	d106      	bne.n	8001b72 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <HAL_SPI_TransmitReceive+0x46>
 8001b6c:	7ffb      	ldrb	r3, [r7, #31]
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d001      	beq.n	8001b76 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001b72:	2302      	movs	r3, #2
 8001b74:	e17f      	b.n	8001e76 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_SPI_TransmitReceive+0x5c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <HAL_SPI_TransmitReceive+0x5c>
 8001b82:	887b      	ldrh	r3, [r7, #2]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e174      	b.n	8001e76 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_SPI_TransmitReceive+0x6e>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e16d      	b.n	8001e76 <HAL_SPI_TransmitReceive+0x34a>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d003      	beq.n	8001bb6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	887a      	ldrh	r2, [r7, #2]
 8001bc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	887a      	ldrh	r2, [r7, #2]
 8001bde:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bf6:	2b40      	cmp	r3, #64	@ 0x40
 8001bf8:	d007      	beq.n	8001c0a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c12:	d17e      	bne.n	8001d12 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <HAL_SPI_TransmitReceive+0xf6>
 8001c1c:	8afb      	ldrh	r3, [r7, #22]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d16c      	bne.n	8001cfc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	881a      	ldrh	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	1c9a      	adds	r2, r3, #2
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c46:	e059      	b.n	8001cfc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d11b      	bne.n	8001c8e <HAL_SPI_TransmitReceive+0x162>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d016      	beq.n	8001c8e <HAL_SPI_TransmitReceive+0x162>
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d113      	bne.n	8001c8e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	881a      	ldrh	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	1c9a      	adds	r2, r3, #2
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d119      	bne.n	8001cd0 <HAL_SPI_TransmitReceive+0x1a4>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d014      	beq.n	8001cd0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb0:	b292      	uxth	r2, r2
 8001cb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb8:	1c9a      	adds	r2, r3, #2
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001cd0:	f7fe fea6 	bl	8000a20 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d80d      	bhi.n	8001cfc <HAL_SPI_TransmitReceive+0x1d0>
 8001ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce6:	d009      	beq.n	8001cfc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0bc      	b.n	8001e76 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1a0      	bne.n	8001c48 <HAL_SPI_TransmitReceive+0x11c>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d19b      	bne.n	8001c48 <HAL_SPI_TransmitReceive+0x11c>
 8001d10:	e082      	b.n	8001e18 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HAL_SPI_TransmitReceive+0x1f4>
 8001d1a:	8afb      	ldrh	r3, [r7, #22]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d171      	bne.n	8001e04 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	330c      	adds	r3, #12
 8001d2a:	7812      	ldrb	r2, [r2, #0]
 8001d2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d46:	e05d      	b.n	8001e04 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d11c      	bne.n	8001d90 <HAL_SPI_TransmitReceive+0x264>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d017      	beq.n	8001d90 <HAL_SPI_TransmitReceive+0x264>
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d114      	bne.n	8001d90 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	330c      	adds	r3, #12
 8001d70:	7812      	ldrb	r2, [r2, #0]
 8001d72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d119      	bne.n	8001dd2 <HAL_SPI_TransmitReceive+0x2a6>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d014      	beq.n	8001dd2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001dd2:	f7fe fe25 	bl	8000a20 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d803      	bhi.n	8001dea <HAL_SPI_TransmitReceive+0x2be>
 8001de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d102      	bne.n	8001df0 <HAL_SPI_TransmitReceive+0x2c4>
 8001dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e038      	b.n	8001e76 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d19c      	bne.n	8001d48 <HAL_SPI_TransmitReceive+0x21c>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d197      	bne.n	8001d48 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e18:	6a3a      	ldr	r2, [r7, #32]
 8001e1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 f8b7 	bl	8001f90 <SPI_EndRxTxTransaction>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e01d      	b.n	8001e76 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10a      	bne.n	8001e58 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8001e74:	2300      	movs	r3, #0
  }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3728      	adds	r7, #40	@ 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e90:	f7fe fdc6 	bl	8000a20 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ea0:	f7fe fdbe 	bl	8000a20 <HAL_GetTick>
 8001ea4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ea6:	4b39      	ldr	r3, [pc, #228]	@ (8001f8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	015b      	lsls	r3, r3, #5
 8001eac:	0d1b      	lsrs	r3, r3, #20
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001eb6:	e054      	b.n	8001f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebe:	d050      	beq.n	8001f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ec0:	f7fe fdae 	bl	8000a20 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d902      	bls.n	8001ed6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d13d      	bne.n	8001f52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001ee4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001eee:	d111      	bne.n	8001f14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ef8:	d004      	beq.n	8001f04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f02:	d107      	bne.n	8001f14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f1c:	d10f      	bne.n	8001f3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e017      	b.n	8001f82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d19b      	bne.n	8001eb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3720      	adds	r7, #32
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000000 	.word	0x20000000

08001f90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff ff6a 	bl	8001e80 <SPI_WaitFlagStateUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb6:	f043 0220 	orr.w	r2, r3, #32
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e013      	b.n	8001fea <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2180      	movs	r1, #128	@ 0x80
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7ff ff57 	bl	8001e80 <SPI_WaitFlagStateUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fdc:	f043 0220 	orr.w	r2, r3, #32
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e000      	b.n	8001fea <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e042      	b.n	800208a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d106      	bne.n	800201e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7fe fc37 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2224      	movs	r2, #36	@ 0x24
 8002022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002034:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f972 	bl	8002320 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800204a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800205a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800206a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b08a      	sub	sp, #40	@ 0x28
 8002096:	af02      	add	r7, sp, #8
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4613      	mov	r3, r2
 80020a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d175      	bne.n	800219e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_UART_Transmit+0x2c>
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e06e      	b.n	80021a0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2221      	movs	r2, #33	@ 0x21
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020d0:	f7fe fca6 	bl	8000a20 <HAL_GetTick>
 80020d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	88fa      	ldrh	r2, [r7, #6]
 80020da:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	88fa      	ldrh	r2, [r7, #6]
 80020e0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ea:	d108      	bne.n	80020fe <HAL_UART_Transmit+0x6c>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d104      	bne.n	80020fe <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	e003      	b.n	8002106 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002106:	e02e      	b.n	8002166 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2200      	movs	r2, #0
 8002110:	2180      	movs	r1, #128	@ 0x80
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f848 	bl	80021a8 <UART_WaitOnFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e03a      	b.n	80021a0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10b      	bne.n	8002148 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800213e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	3302      	adds	r3, #2
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	e007      	b.n	8002158 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3301      	adds	r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1cb      	bne.n	8002108 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2200      	movs	r2, #0
 8002178:	2140      	movs	r1, #64	@ 0x40
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f814 	bl	80021a8 <UART_WaitOnFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e006      	b.n	80021a0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800219e:	2302      	movs	r3, #2
  }
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3720      	adds	r7, #32
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	4613      	mov	r3, r2
 80021b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021b8:	e03b      	b.n	8002232 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c0:	d037      	beq.n	8002232 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c2:	f7fe fc2d 	bl	8000a20 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	6a3a      	ldr	r2, [r7, #32]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d302      	bcc.n	80021d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e03a      	b.n	8002252 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d023      	beq.n	8002232 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b80      	cmp	r3, #128	@ 0x80
 80021ee:	d020      	beq.n	8002232 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b40      	cmp	r3, #64	@ 0x40
 80021f4:	d01d      	beq.n	8002232 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b08      	cmp	r3, #8
 8002202:	d116      	bne.n	8002232 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f81d 	bl	800225a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2208      	movs	r2, #8
 8002224:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4013      	ands	r3, r2
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	429a      	cmp	r2, r3
 8002240:	bf0c      	ite	eq
 8002242:	2301      	moveq	r3, #1
 8002244:	2300      	movne	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	429a      	cmp	r2, r3
 800224e:	d0b4      	beq.n	80021ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800225a:	b480      	push	{r7}
 800225c:	b095      	sub	sp, #84	@ 0x54
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	330c      	adds	r3, #12
 8002268:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226c:	e853 3f00 	ldrex	r3, [r3]
 8002270:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002278:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	330c      	adds	r3, #12
 8002280:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002282:	643a      	str	r2, [r7, #64]	@ 0x40
 8002284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002286:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002288:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800228a:	e841 2300 	strex	r3, r2, [r1]
 800228e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1e5      	bne.n	8002262 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3314      	adds	r3, #20
 800229c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	e853 3f00 	ldrex	r3, [r3]
 80022a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3314      	adds	r3, #20
 80022b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022be:	e841 2300 	strex	r3, r2, [r1]
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1e5      	bne.n	8002296 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d119      	bne.n	8002306 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	330c      	adds	r3, #12
 80022d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	e853 3f00 	ldrex	r3, [r3]
 80022e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f023 0310 	bic.w	r3, r3, #16
 80022e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	330c      	adds	r3, #12
 80022f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022f2:	61ba      	str	r2, [r7, #24]
 80022f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f6:	6979      	ldr	r1, [r7, #20]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	e841 2300 	strex	r3, r2, [r1]
 80022fe:	613b      	str	r3, [r7, #16]
   return(result);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1e5      	bne.n	80022d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002314:	bf00      	nop
 8002316:	3754      	adds	r7, #84	@ 0x54
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
	...

08002320 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800235a:	f023 030c 	bic.w	r3, r3, #12
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	430b      	orrs	r3, r1
 8002366:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a2c      	ldr	r2, [pc, #176]	@ (8002434 <UART_SetConfig+0x114>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d103      	bne.n	8002390 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002388:	f7ff f9d6 	bl	8001738 <HAL_RCC_GetPCLK2Freq>
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	e002      	b.n	8002396 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002390:	f7ff f9be 	bl	8001710 <HAL_RCC_GetPCLK1Freq>
 8002394:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	009a      	lsls	r2, r3, #2
 80023a0:	441a      	add	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	4a22      	ldr	r2, [pc, #136]	@ (8002438 <UART_SetConfig+0x118>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	0119      	lsls	r1, r3, #4
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	009a      	lsls	r2, r3, #2
 80023c0:	441a      	add	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <UART_SetConfig+0x118>)
 80023ce:	fba3 0302 	umull	r0, r3, r3, r2
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2064      	movs	r0, #100	@ 0x64
 80023d6:	fb00 f303 	mul.w	r3, r0, r3
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	3332      	adds	r3, #50	@ 0x32
 80023e0:	4a15      	ldr	r2, [pc, #84]	@ (8002438 <UART_SetConfig+0x118>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023ec:	4419      	add	r1, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	009a      	lsls	r2, r3, #2
 80023f8:	441a      	add	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	fbb2 f2f3 	udiv	r2, r2, r3
 8002404:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <UART_SetConfig+0x118>)
 8002406:	fba3 0302 	umull	r0, r3, r3, r2
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2064      	movs	r0, #100	@ 0x64
 800240e:	fb00 f303 	mul.w	r3, r0, r3
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	3332      	adds	r3, #50	@ 0x32
 8002418:	4a07      	ldr	r2, [pc, #28]	@ (8002438 <UART_SetConfig+0x118>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	f003 020f 	and.w	r2, r3, #15
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	440a      	add	r2, r1
 800242a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40013800 	.word	0x40013800
 8002438:	51eb851f 	.word	0x51eb851f

0800243c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002440:	4904      	ldr	r1, [pc, #16]	@ (8002454 <MX_FATFS_Init+0x18>)
 8002442:	4805      	ldr	r0, [pc, #20]	@ (8002458 <MX_FATFS_Init+0x1c>)
 8002444:	f003 fbe4 	bl	8005c10 <FATFS_LinkDriver>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	4b03      	ldr	r3, [pc, #12]	@ (800245c <MX_FATFS_Init+0x20>)
 800244e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	200005a4 	.word	0x200005a4
 8002458:	2000000c 	.word	0x2000000c
 800245c:	200005a0 	.word	0x200005a0

08002460 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002464:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
    return USER_SPI_initialize(pdrv);
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f9d2 	bl	8002824 <USER_SPI_initialize>
 8002480:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
    return USER_SPI_status(pdrv);
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fab0 	bl	80029fc <USER_SPI_status>
 800249c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4603      	mov	r3, r0
 80024b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count);
 80024b6:	7bf8      	ldrb	r0, [r7, #15]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	f000 fab1 	bl	8002a24 <USER_SPI_read>
 80024c2:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	4603      	mov	r3, r0
 80024da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count);
 80024dc:	7bf8      	ldrb	r0, [r7, #15]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	f000 fb04 	bl	8002af0 <USER_SPI_write>
 80024e8:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	603a      	str	r2, [r7, #0]
 80024fc:	71fb      	strb	r3, [r7, #7]
 80024fe:	460b      	mov	r3, r1
 8002500:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8002502:	79b9      	ldrb	r1, [r7, #6]
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fb6d 	bl	8002be8 <USER_SPI_ioctl>
 800250e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002520:	f7fe fa7e 	bl	8000a20 <HAL_GetTick>
 8002524:	4603      	mov	r3, r0
 8002526:	4a04      	ldr	r2, [pc, #16]	@ (8002538 <SPI_Timer_On+0x20>)
 8002528:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800252a:	4a04      	ldr	r2, [pc, #16]	@ (800253c <SPI_Timer_On+0x24>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200005ac 	.word	0x200005ac
 800253c:	200005b0 	.word	0x200005b0

08002540 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002544:	f7fe fa6c 	bl	8000a20 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <SPI_Timer_Status+0x24>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	1ad2      	subs	r2, r2, r3
 8002550:	4b05      	ldr	r3, [pc, #20]	@ (8002568 <SPI_Timer_Status+0x28>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	bf34      	ite	cc
 8002558:	2301      	movcc	r3, #1
 800255a:	2300      	movcs	r3, #0
 800255c:	b2db      	uxtb	r3, r3
}
 800255e:	4618      	mov	r0, r3
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200005ac 	.word	0x200005ac
 8002568:	200005b0 	.word	0x200005b0

0800256c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af02      	add	r7, sp, #8
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002576:	f107 020f 	add.w	r2, r7, #15
 800257a:	1df9      	adds	r1, r7, #7
 800257c:	2332      	movs	r3, #50	@ 0x32
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	2301      	movs	r3, #1
 8002582:	4804      	ldr	r0, [pc, #16]	@ (8002594 <xchg_spi+0x28>)
 8002584:	f7ff fad2 	bl	8001b2c <HAL_SPI_TransmitReceive>
    return rxDat;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200004f8 	.word	0x200004f8

08002598 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e00a      	b.n	80025be <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	18d4      	adds	r4, r2, r3
 80025ae:	20ff      	movs	r0, #255	@ 0xff
 80025b0:	f7ff ffdc 	bl	800256c <xchg_spi>
 80025b4:	4603      	mov	r3, r0
 80025b6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3301      	adds	r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d3f0      	bcc.n	80025a8 <rcvr_spi_multi+0x10>
	}
}
 80025c6:	bf00      	nop
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd90      	pop	{r4, r7, pc}

080025d0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4803      	ldr	r0, [pc, #12]	@ (80025f4 <xmit_spi_multi+0x24>)
 80025e6:	f7ff f95d 	bl	80018a4 <HAL_SPI_Transmit>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200004f8 	.word	0x200004f8

080025f8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002600:	f7fe fa0e 	bl	8000a20 <HAL_GetTick>
 8002604:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800260a:	20ff      	movs	r0, #255	@ 0xff
 800260c:	f7ff ffae 	bl	800256c <xchg_spi>
 8002610:	4603      	mov	r3, r0
 8002612:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2bff      	cmp	r3, #255	@ 0xff
 8002618:	d007      	beq.n	800262a <wait_ready+0x32>
 800261a:	f7fe fa01 	bl	8000a20 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	429a      	cmp	r2, r3
 8002628:	d8ef      	bhi.n	800260a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2bff      	cmp	r3, #255	@ 0xff
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002644:	2201      	movs	r2, #1
 8002646:	2110      	movs	r1, #16
 8002648:	4803      	ldr	r0, [pc, #12]	@ (8002658 <despiselect+0x18>)
 800264a:	f7fe fc7f 	bl	8000f4c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800264e:	20ff      	movs	r0, #255	@ 0xff
 8002650:	f7ff ff8c 	bl	800256c <xchg_spi>

}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40010800 	.word	0x40010800

0800265c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002660:	2200      	movs	r2, #0
 8002662:	2110      	movs	r1, #16
 8002664:	4809      	ldr	r0, [pc, #36]	@ (800268c <spiselect+0x30>)
 8002666:	f7fe fc71 	bl	8000f4c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800266a:	20ff      	movs	r0, #255	@ 0xff
 800266c:	f7ff ff7e 	bl	800256c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002670:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002674:	f7ff ffc0 	bl	80025f8 <wait_ready>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <spiselect+0x26>
 800267e:	2301      	movs	r3, #1
 8002680:	e002      	b.n	8002688 <spiselect+0x2c>

	despiselect();
 8002682:	f7ff ffdd 	bl	8002640 <despiselect>
	return 0;	/* Timeout */
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40010800 	.word	0x40010800

08002690 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800269a:	20c8      	movs	r0, #200	@ 0xc8
 800269c:	f7ff ff3c 	bl	8002518 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80026a0:	20ff      	movs	r0, #255	@ 0xff
 80026a2:	f7ff ff63 	bl	800256c <xchg_spi>
 80026a6:	4603      	mov	r3, r0
 80026a8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	2bff      	cmp	r3, #255	@ 0xff
 80026ae:	d104      	bne.n	80026ba <rcvr_datablock+0x2a>
 80026b0:	f7ff ff46 	bl	8002540 <SPI_Timer_Status>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f2      	bne.n	80026a0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80026be:	d001      	beq.n	80026c4 <rcvr_datablock+0x34>
 80026c0:	2300      	movs	r3, #0
 80026c2:	e00a      	b.n	80026da <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80026c4:	6839      	ldr	r1, [r7, #0]
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ff66 	bl	8002598 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80026cc:	20ff      	movs	r0, #255	@ 0xff
 80026ce:	f7ff ff4d 	bl	800256c <xchg_spi>
 80026d2:	20ff      	movs	r0, #255	@ 0xff
 80026d4:	f7ff ff4a 	bl	800256c <xchg_spi>

	return 1;						/* Function succeeded */
 80026d8:	2301      	movs	r3, #1
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80026ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026f2:	f7ff ff81 	bl	80025f8 <wait_ready>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <xmit_datablock+0x1e>
 80026fc:	2300      	movs	r3, #0
 80026fe:	e01e      	b.n	800273e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ff32 	bl	800256c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	2bfd      	cmp	r3, #253	@ 0xfd
 800270c:	d016      	beq.n	800273c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800270e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff ff5c 	bl	80025d0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002718:	20ff      	movs	r0, #255	@ 0xff
 800271a:	f7ff ff27 	bl	800256c <xchg_spi>
 800271e:	20ff      	movs	r0, #255	@ 0xff
 8002720:	f7ff ff24 	bl	800256c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002724:	20ff      	movs	r0, #255	@ 0xff
 8002726:	f7ff ff21 	bl	800256c <xchg_spi>
 800272a:	4603      	mov	r3, r0
 800272c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	2b05      	cmp	r3, #5
 8002736:	d001      	beq.n	800273c <xmit_datablock+0x5a>
 8002738:	2300      	movs	r3, #0
 800273a:	e000      	b.n	800273e <xmit_datablock+0x5c>
	}
	return 1;
 800273c:	2301      	movs	r3, #1
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	6039      	str	r1, [r7, #0]
 8002750:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	da0e      	bge.n	8002778 <send_cmd+0x32>
		cmd &= 0x7F;
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002760:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002762:	2100      	movs	r1, #0
 8002764:	2037      	movs	r0, #55	@ 0x37
 8002766:	f7ff ffee 	bl	8002746 <send_cmd>
 800276a:	4603      	mov	r3, r0
 800276c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800276e:	7bbb      	ldrb	r3, [r7, #14]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d901      	bls.n	8002778 <send_cmd+0x32>
 8002774:	7bbb      	ldrb	r3, [r7, #14]
 8002776:	e051      	b.n	800281c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	2b0c      	cmp	r3, #12
 800277c:	d008      	beq.n	8002790 <send_cmd+0x4a>
		despiselect();
 800277e:	f7ff ff5f 	bl	8002640 <despiselect>
		if (!spiselect()) return 0xFF;
 8002782:	f7ff ff6b 	bl	800265c <spiselect>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <send_cmd+0x4a>
 800278c:	23ff      	movs	r3, #255	@ 0xff
 800278e:	e045      	b.n	800281c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002796:	b2db      	uxtb	r3, r3
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fee7 	bl	800256c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	0e1b      	lsrs	r3, r3, #24
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fee1 	bl	800256c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fedb 	bl	800256c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fed5 	bl	800256c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fed0 	bl	800256c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <send_cmd+0x94>
 80027d6:	2395      	movs	r3, #149	@ 0x95
 80027d8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d101      	bne.n	80027e4 <send_cmd+0x9e>
 80027e0:	2387      	movs	r3, #135	@ 0x87
 80027e2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fec0 	bl	800256c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d102      	bne.n	80027f8 <send_cmd+0xb2>
 80027f2:	20ff      	movs	r0, #255	@ 0xff
 80027f4:	f7ff feba 	bl	800256c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80027f8:	230a      	movs	r3, #10
 80027fa:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80027fc:	20ff      	movs	r0, #255	@ 0xff
 80027fe:	f7ff feb5 	bl	800256c <xchg_spi>
 8002802:	4603      	mov	r3, r0
 8002804:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800280a:	2b00      	cmp	r3, #0
 800280c:	da05      	bge.n	800281a <send_cmd+0xd4>
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	3b01      	subs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <send_cmd+0xb6>

	return res;							/* Return received response */
 800281a:	7bbb      	ldrb	r3, [r7, #14]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <USER_SPI_initialize+0x14>
 8002834:	2301      	movs	r3, #1
 8002836:	e0d6      	b.n	80029e6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002838:	4b6d      	ldr	r3, [pc, #436]	@ (80029f0 <USER_SPI_initialize+0x1cc>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <USER_SPI_initialize+0x2a>
 8002846:	4b6a      	ldr	r3, [pc, #424]	@ (80029f0 <USER_SPI_initialize+0x1cc>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	e0cb      	b.n	80029e6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800284e:	4b69      	ldr	r3, [pc, #420]	@ (80029f4 <USER_SPI_initialize+0x1d0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8002858:	4b66      	ldr	r3, [pc, #408]	@ (80029f4 <USER_SPI_initialize+0x1d0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8002860:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002862:	230a      	movs	r3, #10
 8002864:	73fb      	strb	r3, [r7, #15]
 8002866:	e005      	b.n	8002874 <USER_SPI_initialize+0x50>
 8002868:	20ff      	movs	r0, #255	@ 0xff
 800286a:	f7ff fe7f 	bl	800256c <xchg_spi>
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	3b01      	subs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f6      	bne.n	8002868 <USER_SPI_initialize+0x44>

	ty = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800287e:	2100      	movs	r1, #0
 8002880:	2000      	movs	r0, #0
 8002882:	f7ff ff60 	bl	8002746 <send_cmd>
 8002886:	4603      	mov	r3, r0
 8002888:	2b01      	cmp	r3, #1
 800288a:	f040 808b 	bne.w	80029a4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800288e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002892:	f7ff fe41 	bl	8002518 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002896:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800289a:	2008      	movs	r0, #8
 800289c:	f7ff ff53 	bl	8002746 <send_cmd>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d151      	bne.n	800294a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	e00d      	b.n	80028c8 <USER_SPI_initialize+0xa4>
 80028ac:	7bfc      	ldrb	r4, [r7, #15]
 80028ae:	20ff      	movs	r0, #255	@ 0xff
 80028b0:	f7ff fe5c 	bl	800256c <xchg_spi>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461a      	mov	r2, r3
 80028b8:	f104 0310 	add.w	r3, r4, #16
 80028bc:	443b      	add	r3, r7
 80028be:	f803 2c08 	strb.w	r2, [r3, #-8]
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	3301      	adds	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d9ee      	bls.n	80028ac <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80028ce:	7abb      	ldrb	r3, [r7, #10]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d167      	bne.n	80029a4 <USER_SPI_initialize+0x180>
 80028d4:	7afb      	ldrb	r3, [r7, #11]
 80028d6:	2baa      	cmp	r3, #170	@ 0xaa
 80028d8:	d164      	bne.n	80029a4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80028da:	bf00      	nop
 80028dc:	f7ff fe30 	bl	8002540 <SPI_Timer_Status>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <USER_SPI_initialize+0xd2>
 80028e6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80028ea:	20a9      	movs	r0, #169	@ 0xa9
 80028ec:	f7ff ff2b 	bl	8002746 <send_cmd>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f2      	bne.n	80028dc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80028f6:	f7ff fe23 	bl	8002540 <SPI_Timer_Status>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d051      	beq.n	80029a4 <USER_SPI_initialize+0x180>
 8002900:	2100      	movs	r1, #0
 8002902:	203a      	movs	r0, #58	@ 0x3a
 8002904:	f7ff ff1f 	bl	8002746 <send_cmd>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d14a      	bne.n	80029a4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	e00d      	b.n	8002930 <USER_SPI_initialize+0x10c>
 8002914:	7bfc      	ldrb	r4, [r7, #15]
 8002916:	20ff      	movs	r0, #255	@ 0xff
 8002918:	f7ff fe28 	bl	800256c <xchg_spi>
 800291c:	4603      	mov	r3, r0
 800291e:	461a      	mov	r2, r3
 8002920:	f104 0310 	add.w	r3, r4, #16
 8002924:	443b      	add	r3, r7
 8002926:	f803 2c08 	strb.w	r2, [r3, #-8]
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	3301      	adds	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b03      	cmp	r3, #3
 8002934:	d9ee      	bls.n	8002914 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002936:	7a3b      	ldrb	r3, [r7, #8]
 8002938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <USER_SPI_initialize+0x120>
 8002940:	230c      	movs	r3, #12
 8002942:	e000      	b.n	8002946 <USER_SPI_initialize+0x122>
 8002944:	2304      	movs	r3, #4
 8002946:	737b      	strb	r3, [r7, #13]
 8002948:	e02c      	b.n	80029a4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800294a:	2100      	movs	r1, #0
 800294c:	20a9      	movs	r0, #169	@ 0xa9
 800294e:	f7ff fefa 	bl	8002746 <send_cmd>
 8002952:	4603      	mov	r3, r0
 8002954:	2b01      	cmp	r3, #1
 8002956:	d804      	bhi.n	8002962 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002958:	2302      	movs	r3, #2
 800295a:	737b      	strb	r3, [r7, #13]
 800295c:	23a9      	movs	r3, #169	@ 0xa9
 800295e:	73bb      	strb	r3, [r7, #14]
 8002960:	e003      	b.n	800296a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002962:	2301      	movs	r3, #1
 8002964:	737b      	strb	r3, [r7, #13]
 8002966:	2301      	movs	r3, #1
 8002968:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800296a:	bf00      	nop
 800296c:	f7ff fde8 	bl	8002540 <SPI_Timer_Status>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <USER_SPI_initialize+0x162>
 8002976:	7bbb      	ldrb	r3, [r7, #14]
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fee3 	bl	8002746 <send_cmd>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f2      	bne.n	800296c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002986:	f7ff fddb 	bl	8002540 <SPI_Timer_Status>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <USER_SPI_initialize+0x17c>
 8002990:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002994:	2010      	movs	r0, #16
 8002996:	f7ff fed6 	bl	8002746 <send_cmd>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <USER_SPI_initialize+0x180>
				ty = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80029a4:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <USER_SPI_initialize+0x1d4>)
 80029a6:	7b7b      	ldrb	r3, [r7, #13]
 80029a8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80029aa:	f7ff fe49 	bl	8002640 <despiselect>

	if (ty) {			/* OK */
 80029ae:	7b7b      	ldrb	r3, [r7, #13]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d012      	beq.n	80029da <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80029b4:	4b0f      	ldr	r3, [pc, #60]	@ (80029f4 <USER_SPI_initialize+0x1d0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80029be:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <USER_SPI_initialize+0x1d0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0210 	orr.w	r2, r2, #16
 80029c6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80029c8:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <USER_SPI_initialize+0x1cc>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <USER_SPI_initialize+0x1cc>)
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e002      	b.n	80029e0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80029da:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <USER_SPI_initialize+0x1cc>)
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80029e0:	4b03      	ldr	r3, [pc, #12]	@ (80029f0 <USER_SPI_initialize+0x1cc>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	b2db      	uxtb	r3, r3
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd90      	pop	{r4, r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000020 	.word	0x20000020
 80029f4:	200004f8 	.word	0x200004f8
 80029f8:	200005a8 	.word	0x200005a8

080029fc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <USER_SPI_status+0x14>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e002      	b.n	8002a16 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002a10:	4b03      	ldr	r3, [pc, #12]	@ (8002a20 <USER_SPI_status+0x24>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b2db      	uxtb	r3, r3
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	20000020 	.word	0x20000020

08002a24 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	4603      	mov	r3, r0
 8002a32:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <USER_SPI_read+0x1c>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <USER_SPI_read+0x20>
 8002a40:	2304      	movs	r3, #4
 8002a42:	e04d      	b.n	8002ae0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002a44:	4b28      	ldr	r3, [pc, #160]	@ (8002ae8 <USER_SPI_read+0xc4>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <USER_SPI_read+0x32>
 8002a52:	2303      	movs	r3, #3
 8002a54:	e044      	b.n	8002ae0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002a56:	4b25      	ldr	r3, [pc, #148]	@ (8002aec <USER_SPI_read+0xc8>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <USER_SPI_read+0x44>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	025b      	lsls	r3, r3, #9
 8002a66:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d111      	bne.n	8002a92 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	2011      	movs	r0, #17
 8002a72:	f7ff fe68 	bl	8002746 <send_cmd>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d129      	bne.n	8002ad0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002a7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a80:	68b8      	ldr	r0, [r7, #8]
 8002a82:	f7ff fe05 	bl	8002690 <rcvr_datablock>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d021      	beq.n	8002ad0 <USER_SPI_read+0xac>
			count = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	e01e      	b.n	8002ad0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	2012      	movs	r0, #18
 8002a96:	f7ff fe56 	bl	8002746 <send_cmd>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d117      	bne.n	8002ad0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002aa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002aa4:	68b8      	ldr	r0, [r7, #8]
 8002aa6:	f7ff fdf3 	bl	8002690 <rcvr_datablock>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <USER_SPI_read+0xa2>
				buff += 512;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ab6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ed      	bne.n	8002aa0 <USER_SPI_read+0x7c>
 8002ac4:	e000      	b.n	8002ac8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002ac6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002ac8:	2100      	movs	r1, #0
 8002aca:	200c      	movs	r0, #12
 8002acc:	f7ff fe3b 	bl	8002746 <send_cmd>
		}
	}
	despiselect();
 8002ad0:	f7ff fdb6 	bl	8002640 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000020 	.word	0x20000020
 8002aec:	200005a8 	.word	0x200005a8

08002af0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4603      	mov	r3, r0
 8002afe:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <USER_SPI_write+0x1c>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <USER_SPI_write+0x20>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	e063      	b.n	8002bd8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002b10:	4b33      	ldr	r3, [pc, #204]	@ (8002be0 <USER_SPI_write+0xf0>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <USER_SPI_write+0x32>
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e05a      	b.n	8002bd8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002b22:	4b2f      	ldr	r3, [pc, #188]	@ (8002be0 <USER_SPI_write+0xf0>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <USER_SPI_write+0x44>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e051      	b.n	8002bd8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002b34:	4b2b      	ldr	r3, [pc, #172]	@ (8002be4 <USER_SPI_write+0xf4>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <USER_SPI_write+0x56>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	025b      	lsls	r3, r3, #9
 8002b44:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d110      	bne.n	8002b6e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	2018      	movs	r0, #24
 8002b50:	f7ff fdf9 	bl	8002746 <send_cmd>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d136      	bne.n	8002bc8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002b5a:	21fe      	movs	r1, #254	@ 0xfe
 8002b5c:	68b8      	ldr	r0, [r7, #8]
 8002b5e:	f7ff fdc0 	bl	80026e2 <xmit_datablock>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d02f      	beq.n	8002bc8 <USER_SPI_write+0xd8>
			count = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	e02c      	b.n	8002bc8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002be4 <USER_SPI_write+0xf4>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	f003 0306 	and.w	r3, r3, #6
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <USER_SPI_write+0x92>
 8002b7a:	6839      	ldr	r1, [r7, #0]
 8002b7c:	2097      	movs	r0, #151	@ 0x97
 8002b7e:	f7ff fde2 	bl	8002746 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	2019      	movs	r0, #25
 8002b86:	f7ff fdde 	bl	8002746 <send_cmd>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d11b      	bne.n	8002bc8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002b90:	21fc      	movs	r1, #252	@ 0xfc
 8002b92:	68b8      	ldr	r0, [r7, #8]
 8002b94:	f7ff fda5 	bl	80026e2 <xmit_datablock>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <USER_SPI_write+0xc4>
				buff += 512;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ba4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ee      	bne.n	8002b90 <USER_SPI_write+0xa0>
 8002bb2:	e000      	b.n	8002bb6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002bb4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002bb6:	21fd      	movs	r1, #253	@ 0xfd
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7ff fd92 	bl	80026e2 <xmit_datablock>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <USER_SPI_write+0xd8>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002bc8:	f7ff fd3a 	bl	8002640 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf14      	ite	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	2300      	moveq	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000020 	.word	0x20000020
 8002be4:	200005a8 	.word	0x200005a8

08002be8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08c      	sub	sp, #48	@ 0x30
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	603a      	str	r2, [r7, #0]
 8002bf2:	71fb      	strb	r3, [r7, #7]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <USER_SPI_ioctl+0x1a>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	e15a      	b.n	8002eb8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002c02:	4baf      	ldr	r3, [pc, #700]	@ (8002ec0 <USER_SPI_ioctl+0x2d8>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <USER_SPI_ioctl+0x2c>
 8002c10:	2303      	movs	r3, #3
 8002c12:	e151      	b.n	8002eb8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8002c1a:	79bb      	ldrb	r3, [r7, #6]
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	f200 8136 	bhi.w	8002e8e <USER_SPI_ioctl+0x2a6>
 8002c22:	a201      	add	r2, pc, #4	@ (adr r2, 8002c28 <USER_SPI_ioctl+0x40>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002c3d 	.word	0x08002c3d
 8002c2c:	08002c51 	.word	0x08002c51
 8002c30:	08002e8f 	.word	0x08002e8f
 8002c34:	08002cfd 	.word	0x08002cfd
 8002c38:	08002df3 	.word	0x08002df3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002c3c:	f7ff fd0e 	bl	800265c <spiselect>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8127 	beq.w	8002e96 <USER_SPI_ioctl+0x2ae>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8002c4e:	e122      	b.n	8002e96 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002c50:	2100      	movs	r1, #0
 8002c52:	2009      	movs	r0, #9
 8002c54:	f7ff fd77 	bl	8002746 <send_cmd>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f040 811d 	bne.w	8002e9a <USER_SPI_ioctl+0x2b2>
 8002c60:	f107 030c 	add.w	r3, r7, #12
 8002c64:	2110      	movs	r1, #16
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fd12 	bl	8002690 <rcvr_datablock>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8113 	beq.w	8002e9a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002c74:	7b3b      	ldrb	r3, [r7, #12]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d111      	bne.n	8002ca2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002c7e:	7d7b      	ldrb	r3, [r7, #21]
 8002c80:	461a      	mov	r2, r3
 8002c82:	7d3b      	ldrb	r3, [r7, #20]
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	4413      	add	r3, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	7cfb      	ldrb	r3, [r7, #19]
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8002c92:	4413      	add	r3, r2
 8002c94:	3301      	adds	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	029a      	lsls	r2, r3, #10
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e028      	b.n	8002cf4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002ca2:	7c7b      	ldrb	r3, [r7, #17]
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	7dbb      	ldrb	r3, [r7, #22]
 8002cac:	09db      	lsrs	r3, r3, #7
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	7d7b      	ldrb	r3, [r7, #21]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f003 0306 	and.w	r3, r3, #6
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002cca:	7d3b      	ldrb	r3, [r7, #20]
 8002ccc:	099b      	lsrs	r3, r3, #6
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	441a      	add	r2, r3
 8002cd8:	7cbb      	ldrb	r3, [r7, #18]
 8002cda:	029b      	lsls	r3, r3, #10
 8002cdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002ce6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002cea:	3b09      	subs	r3, #9
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8002cfa:	e0ce      	b.n	8002e9a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002cfc:	4b71      	ldr	r3, [pc, #452]	@ (8002ec4 <USER_SPI_ioctl+0x2dc>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d031      	beq.n	8002d6c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002d08:	2100      	movs	r1, #0
 8002d0a:	208d      	movs	r0, #141	@ 0x8d
 8002d0c:	f7ff fd1b 	bl	8002746 <send_cmd>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 80c3 	bne.w	8002e9e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002d18:	20ff      	movs	r0, #255	@ 0xff
 8002d1a:	f7ff fc27 	bl	800256c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002d1e:	f107 030c 	add.w	r3, r7, #12
 8002d22:	2110      	movs	r1, #16
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fcb3 	bl	8002690 <rcvr_datablock>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80b6 	beq.w	8002e9e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002d32:	2330      	movs	r3, #48	@ 0x30
 8002d34:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002d38:	e007      	b.n	8002d4a <USER_SPI_ioctl+0x162>
 8002d3a:	20ff      	movs	r0, #255	@ 0xff
 8002d3c:	f7ff fc16 	bl	800256c <xchg_spi>
 8002d40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002d44:	3b01      	subs	r3, #1
 8002d46:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002d4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f3      	bne.n	8002d3a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002d52:	7dbb      	ldrb	r3, [r7, #22]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	fa03 f202 	lsl.w	r2, r3, r2
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002d6a:	e098      	b.n	8002e9e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	2009      	movs	r0, #9
 8002d70:	f7ff fce9 	bl	8002746 <send_cmd>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f040 8091 	bne.w	8002e9e <USER_SPI_ioctl+0x2b6>
 8002d7c:	f107 030c 	add.w	r3, r7, #12
 8002d80:	2110      	movs	r1, #16
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fc84 	bl	8002690 <rcvr_datablock>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8087 	beq.w	8002e9e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002d90:	4b4c      	ldr	r3, [pc, #304]	@ (8002ec4 <USER_SPI_ioctl+0x2dc>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d012      	beq.n	8002dc2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002d9c:	7dbb      	ldrb	r3, [r7, #22]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002da4:	7dfa      	ldrb	r2, [r7, #23]
 8002da6:	09d2      	lsrs	r2, r2, #7
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	4413      	add	r3, r2
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	7e7b      	ldrb	r3, [r7, #25]
 8002db0:	099b      	lsrs	r3, r3, #6
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e013      	b.n	8002dea <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002dc2:	7dbb      	ldrb	r3, [r7, #22]
 8002dc4:	109b      	asrs	r3, r3, #2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	3301      	adds	r3, #1
 8002dce:	7dfa      	ldrb	r2, [r7, #23]
 8002dd0:	00d2      	lsls	r2, r2, #3
 8002dd2:	f002 0218 	and.w	r2, r2, #24
 8002dd6:	7df9      	ldrb	r1, [r7, #23]
 8002dd8:	0949      	lsrs	r1, r1, #5
 8002dda:	b2c9      	uxtb	r1, r1
 8002ddc:	440a      	add	r2, r1
 8002dde:	3201      	adds	r2, #1
 8002de0:	fb02 f303 	mul.w	r3, r2, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8002df0:	e055      	b.n	8002e9e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002df2:	4b34      	ldr	r3, [pc, #208]	@ (8002ec4 <USER_SPI_ioctl+0x2dc>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	f003 0306 	and.w	r3, r3, #6
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d051      	beq.n	8002ea2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002dfe:	f107 020c 	add.w	r2, r7, #12
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	210b      	movs	r1, #11
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff feee 	bl	8002be8 <USER_SPI_ioctl>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d149      	bne.n	8002ea6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002e12:	7b3b      	ldrb	r3, [r7, #12]
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d104      	bne.n	8002e26 <USER_SPI_ioctl+0x23e>
 8002e1c:	7dbb      	ldrb	r3, [r7, #22]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d041      	beq.n	8002eaa <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	623b      	str	r3, [r7, #32]
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8002e36:	4b23      	ldr	r3, [pc, #140]	@ (8002ec4 <USER_SPI_ioctl+0x2dc>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d105      	bne.n	8002e4e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e44:	025b      	lsls	r3, r3, #9
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	025b      	lsls	r3, r3, #9
 8002e4c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002e4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e50:	2020      	movs	r0, #32
 8002e52:	f7ff fc78 	bl	8002746 <send_cmd>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d128      	bne.n	8002eae <USER_SPI_ioctl+0x2c6>
 8002e5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e5e:	2021      	movs	r0, #33	@ 0x21
 8002e60:	f7ff fc71 	bl	8002746 <send_cmd>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d121      	bne.n	8002eae <USER_SPI_ioctl+0x2c6>
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2026      	movs	r0, #38	@ 0x26
 8002e6e:	f7ff fc6a 	bl	8002746 <send_cmd>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d11a      	bne.n	8002eae <USER_SPI_ioctl+0x2c6>
 8002e78:	f247 5030 	movw	r0, #30000	@ 0x7530
 8002e7c:	f7ff fbbc 	bl	80025f8 <wait_ready>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d013      	beq.n	8002eae <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8002e8c:	e00f      	b.n	8002eae <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002e8e:	2304      	movs	r3, #4
 8002e90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002e94:	e00c      	b.n	8002eb0 <USER_SPI_ioctl+0x2c8>
		break;
 8002e96:	bf00      	nop
 8002e98:	e00a      	b.n	8002eb0 <USER_SPI_ioctl+0x2c8>
		break;
 8002e9a:	bf00      	nop
 8002e9c:	e008      	b.n	8002eb0 <USER_SPI_ioctl+0x2c8>
		break;
 8002e9e:	bf00      	nop
 8002ea0:	e006      	b.n	8002eb0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002ea2:	bf00      	nop
 8002ea4:	e004      	b.n	8002eb0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002ea6:	bf00      	nop
 8002ea8:	e002      	b.n	8002eb0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <USER_SPI_ioctl+0x2c8>
		break;
 8002eae:	bf00      	nop
	}

	despiselect();
 8002eb0:	f7ff fbc6 	bl	8002640 <despiselect>

	return res;
 8002eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3730      	adds	r7, #48	@ 0x30
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000020 	.word	0x20000020
 8002ec4:	200005a8 	.word	0x200005a8

08002ec8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	4a08      	ldr	r2, [pc, #32]	@ (8002ef8 <disk_status+0x30>)
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	79fa      	ldrb	r2, [r7, #7]
 8002ee0:	4905      	ldr	r1, [pc, #20]	@ (8002ef8 <disk_status+0x30>)
 8002ee2:	440a      	add	r2, r1
 8002ee4:	7a12      	ldrb	r2, [r2, #8]
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4798      	blx	r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	200005d4 	.word	0x200005d4

08002efc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f44 <disk_initialize+0x48>)
 8002f0e:	5cd3      	ldrb	r3, [r2, r3]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d111      	bne.n	8002f38 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	4a0b      	ldr	r2, [pc, #44]	@ (8002f44 <disk_initialize+0x48>)
 8002f18:	2101      	movs	r1, #1
 8002f1a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	4a09      	ldr	r2, [pc, #36]	@ (8002f44 <disk_initialize+0x48>)
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	79fa      	ldrb	r2, [r7, #7]
 8002f2a:	4906      	ldr	r1, [pc, #24]	@ (8002f44 <disk_initialize+0x48>)
 8002f2c:	440a      	add	r2, r1
 8002f2e:	7a12      	ldrb	r2, [r2, #8]
 8002f30:	4610      	mov	r0, r2
 8002f32:	4798      	blx	r3
 8002f34:	4603      	mov	r3, r0
 8002f36:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200005d4 	.word	0x200005d4

08002f48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	4603      	mov	r3, r0
 8002f56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <disk_read+0x3c>)
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	689c      	ldr	r4, [r3, #8]
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	4a07      	ldr	r2, [pc, #28]	@ (8002f84 <disk_read+0x3c>)
 8002f68:	4413      	add	r3, r2
 8002f6a:	7a18      	ldrb	r0, [r3, #8]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	47a0      	blx	r4
 8002f74:	4603      	mov	r3, r0
 8002f76:	75fb      	strb	r3, [r7, #23]
  return res;
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd90      	pop	{r4, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	200005d4 	.word	0x200005d4

08002f88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	4603      	mov	r3, r0
 8002f96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc4 <disk_write+0x3c>)
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	68dc      	ldr	r4, [r3, #12]
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	4a07      	ldr	r2, [pc, #28]	@ (8002fc4 <disk_write+0x3c>)
 8002fa8:	4413      	add	r3, r2
 8002faa:	7a18      	ldrb	r0, [r3, #8]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	47a0      	blx	r4
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd90      	pop	{r4, r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200005d4 	.word	0x200005d4

08002fc8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	603a      	str	r2, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	4a09      	ldr	r2, [pc, #36]	@ (8003000 <disk_ioctl+0x38>)
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	79fa      	ldrb	r2, [r7, #7]
 8002fe6:	4906      	ldr	r1, [pc, #24]	@ (8003000 <disk_ioctl+0x38>)
 8002fe8:	440a      	add	r2, r1
 8002fea:	7a10      	ldrb	r0, [r2, #8]
 8002fec:	79b9      	ldrb	r1, [r7, #6]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	4798      	blx	r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	73fb      	strb	r3, [r7, #15]
  return res;
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	200005d4 	.word	0x200005d4

08003004 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003018:	e007      	b.n	800302a <mem_cpy+0x26>
		*d++ = *s++;
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	1c53      	adds	r3, r2, #1
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	1c59      	adds	r1, r3, #1
 8003024:	6179      	str	r1, [r7, #20]
 8003026:	7812      	ldrb	r2, [r2, #0]
 8003028:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	1e5a      	subs	r2, r3, #1
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f2      	bne.n	800301a <mem_cpy+0x16>
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003050:	e005      	b.n	800305e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	617a      	str	r2, [r7, #20]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	1e5a      	subs	r2, r3, #1
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f4      	bne.n	8003052 <mem_set+0x12>
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	@ 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800308c:	bf00      	nop
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	1e5a      	subs	r2, r3, #1
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <mem_cmp+0x40>
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	61fa      	str	r2, [r7, #28]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	4619      	mov	r1, r3
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	61ba      	str	r2, [r7, #24]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	1acb      	subs	r3, r1, r3
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ec      	beq.n	800308e <mem_cmp+0x1a>
	return r;
 80030b4:	697b      	ldr	r3, [r7, #20]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	@ 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80030ca:	e002      	b.n	80030d2 <chk_chr+0x12>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3301      	adds	r3, #1
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <chk_chr+0x26>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d1f2      	bne.n	80030cc <chk_chr+0xc>
	return *str;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	781b      	ldrb	r3, [r3, #0]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	e038      	b.n	800317a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8003108:	492f      	ldr	r1, [pc, #188]	@ (80031c8 <chk_lock+0xd4>)
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d029      	beq.n	8003170 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800311c:	492a      	ldr	r1, [pc, #168]	@ (80031c8 <chk_lock+0xd4>)
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003132:	429a      	cmp	r2, r3
 8003134:	d11e      	bne.n	8003174 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8003136:	4924      	ldr	r1, [pc, #144]	@ (80031c8 <chk_lock+0xd4>)
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	3304      	adds	r3, #4
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800314e:	429a      	cmp	r2, r3
 8003150:	d110      	bne.n	8003174 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8003152:	491d      	ldr	r1, [pc, #116]	@ (80031c8 <chk_lock+0xd4>)
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	3308      	adds	r3, #8
 8003162:	881a      	ldrh	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 800316a:	429a      	cmp	r2, r3
 800316c:	d102      	bne.n	8003174 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800316e:	e007      	b.n	8003180 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8003170:	2301      	movs	r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3301      	adds	r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d9c3      	bls.n	8003108 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d109      	bne.n	800319a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <chk_lock+0x9e>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d101      	bne.n	8003196 <chk_lock+0xa2>
 8003192:	2300      	movs	r3, #0
 8003194:	e013      	b.n	80031be <chk_lock+0xca>
 8003196:	2312      	movs	r3, #18
 8003198:	e011      	b.n	80031be <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10b      	bne.n	80031b8 <chk_lock+0xc4>
 80031a0:	4909      	ldr	r1, [pc, #36]	@ (80031c8 <chk_lock+0xd4>)
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	330a      	adds	r3, #10
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b6:	d101      	bne.n	80031bc <chk_lock+0xc8>
 80031b8:	2310      	movs	r3, #16
 80031ba:	e000      	b.n	80031be <chk_lock+0xca>
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	200005bc 	.word	0x200005bc

080031cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	e002      	b.n	80031de <enq_lock+0x12>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3301      	adds	r3, #1
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d809      	bhi.n	80031f8 <enq_lock+0x2c>
 80031e4:	490a      	ldr	r1, [pc, #40]	@ (8003210 <enq_lock+0x44>)
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1ef      	bne.n	80031d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	bf14      	ite	ne
 80031fe:	2301      	movne	r3, #1
 8003200:	2300      	moveq	r3, #0
 8003202:	b2db      	uxtb	r3, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	200005bc 	.word	0x200005bc

08003214 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e02b      	b.n	800327c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8003224:	4955      	ldr	r1, [pc, #340]	@ (800337c <inc_lock+0x168>)
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800323a:	429a      	cmp	r2, r3
 800323c:	d11b      	bne.n	8003276 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800323e:	494f      	ldr	r1, [pc, #316]	@ (800337c <inc_lock+0x168>)
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	3304      	adds	r3, #4
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 8003256:	429a      	cmp	r2, r3
 8003258:	d10d      	bne.n	8003276 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800325a:	4948      	ldr	r1, [pc, #288]	@ (800337c <inc_lock+0x168>)
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4613      	mov	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	3308      	adds	r3, #8
 800326a:	881a      	ldrh	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 8003272:	429a      	cmp	r2, r3
 8003274:	d006      	beq.n	8003284 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3301      	adds	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d9d0      	bls.n	8003224 <inc_lock+0x10>
 8003282:	e000      	b.n	8003286 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8003284:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d145      	bne.n	8003318 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e002      	b.n	8003298 <inc_lock+0x84>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3301      	adds	r3, #1
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d809      	bhi.n	80032b2 <inc_lock+0x9e>
 800329e:	4937      	ldr	r1, [pc, #220]	@ (800337c <inc_lock+0x168>)
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1ef      	bne.n	8003292 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d101      	bne.n	80032bc <inc_lock+0xa8>
 80032b8:	2300      	movs	r3, #0
 80032ba:	e05a      	b.n	8003372 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 80032c2:	482e      	ldr	r0, [pc, #184]	@ (800337c <inc_lock+0x168>)
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4613      	mov	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4403      	add	r3, r0
 80032d0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 80032d8:	4828      	ldr	r0, [pc, #160]	@ (800337c <inc_lock+0x168>)
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4403      	add	r3, r0
 80032e6:	3304      	adds	r3, #4
 80032e8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 80032f0:	4922      	ldr	r1, [pc, #136]	@ (800337c <inc_lock+0x168>)
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4613      	mov	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	3308      	adds	r3, #8
 8003300:	4602      	mov	r2, r0
 8003302:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003304:	491d      	ldr	r1, [pc, #116]	@ (800337c <inc_lock+0x168>)
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	330a      	adds	r3, #10
 8003314:	2200      	movs	r2, #0
 8003316:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00c      	beq.n	8003338 <inc_lock+0x124>
 800331e:	4917      	ldr	r1, [pc, #92]	@ (800337c <inc_lock+0x168>)
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	330a      	adds	r3, #10
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <inc_lock+0x124>
 8003334:	2300      	movs	r3, #0
 8003336:	e01c      	b.n	8003372 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10b      	bne.n	8003356 <inc_lock+0x142>
 800333e:	490f      	ldr	r1, [pc, #60]	@ (800337c <inc_lock+0x168>)
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	330a      	adds	r3, #10
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	b299      	uxth	r1, r3
 8003354:	e001      	b.n	800335a <inc_lock+0x146>
 8003356:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800335a:	4808      	ldr	r0, [pc, #32]	@ (800337c <inc_lock+0x168>)
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4403      	add	r3, r0
 8003368:	330a      	adds	r3, #10
 800336a:	460a      	mov	r2, r1
 800336c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3301      	adds	r3, #1
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	200005bc 	.word	0x200005bc

08003380 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d82e      	bhi.n	80033f2 <dec_lock+0x72>
		n = Files[i].ctr;
 8003394:	491b      	ldr	r1, [pc, #108]	@ (8003404 <dec_lock+0x84>)
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	330a      	adds	r3, #10
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80033a8:	89fb      	ldrh	r3, [r7, #14]
 80033aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ae:	d101      	bne.n	80033b4 <dec_lock+0x34>
 80033b0:	2300      	movs	r3, #0
 80033b2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80033b4:	89fb      	ldrh	r3, [r7, #14]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <dec_lock+0x40>
 80033ba:	89fb      	ldrh	r3, [r7, #14]
 80033bc:	3b01      	subs	r3, #1
 80033be:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80033c0:	4910      	ldr	r1, [pc, #64]	@ (8003404 <dec_lock+0x84>)
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	330a      	adds	r3, #10
 80033d0:	89fa      	ldrh	r2, [r7, #14]
 80033d2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80033d4:	89fb      	ldrh	r3, [r7, #14]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d108      	bne.n	80033ec <dec_lock+0x6c>
 80033da:	490a      	ldr	r1, [pc, #40]	@ (8003404 <dec_lock+0x84>)
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	737b      	strb	r3, [r7, #13]
 80033f0:	e001      	b.n	80033f6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80033f2:	2302      	movs	r3, #2
 80033f4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80033f6:	7b7b      	ldrb	r3, [r7, #13]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	200005bc 	.word	0x200005bc

08003408 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e016      	b.n	8003444 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003416:	4910      	ldr	r1, [pc, #64]	@ (8003458 <clear_lock+0x50>)
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	429a      	cmp	r2, r3
 800342a:	d108      	bne.n	800343e <clear_lock+0x36>
 800342c:	490a      	ldr	r1, [pc, #40]	@ (8003458 <clear_lock+0x50>)
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3301      	adds	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d9e5      	bls.n	8003416 <clear_lock+0xe>
	}
}
 800344a:	bf00      	nop
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	200005bc 	.word	0x200005bc

0800345c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 800346e:	2b00      	cmp	r3, #0
 8003470:	d038      	beq.n	80034e4 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8003478:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	2301      	movs	r3, #1
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	f7ff fd7f 	bl	8002f88 <disk_write>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	e026      	b.n	80034e4 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	1ad2      	subs	r2, r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d218      	bcs.n	80034e4 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	e010      	b.n	80034de <sync_window+0x82>
					wsect += fs->fsize;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4413      	add	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	2301      	movs	r3, #1
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	f7ff fd58 	bl	8002f88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	3b01      	subs	r3, #1
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d8eb      	bhi.n	80034bc <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d01b      	beq.n	8003540 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ffa7 	bl	800345c <sync_window>
 800350e:	4603      	mov	r3, r0
 8003510:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d113      	bne.n	8003540 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	2301      	movs	r3, #1
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	f7ff fd10 	bl	8002f48 <disk_read>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d004      	beq.n	8003538 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
 8003532:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
		}
	}
	return res;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ff82 	bl	800345c <sync_window>
 8003558:	4603      	mov	r3, r0
 800355a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 809b 	bne.w	800369a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800356a:	2b03      	cmp	r3, #3
 800356c:	f040 8088 	bne.w	8003680 <sync_fs+0x136>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8003576:	2b01      	cmp	r3, #1
 8003578:	f040 8082 	bne.w	8003680 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fd5b 	bl	8003040 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2255      	movs	r2, #85	@ 0x55
 800358e:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	22aa      	movs	r2, #170	@ 0xaa
 8003596:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2252      	movs	r2, #82	@ 0x52
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2252      	movs	r2, #82	@ 0x52
 80035a4:	705a      	strb	r2, [r3, #1]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2261      	movs	r2, #97	@ 0x61
 80035aa:	709a      	strb	r2, [r3, #2]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2241      	movs	r2, #65	@ 0x41
 80035b0:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2272      	movs	r2, #114	@ 0x72
 80035b6:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2272      	movs	r2, #114	@ 0x72
 80035be:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2241      	movs	r2, #65	@ 0x41
 80035c6:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2261      	movs	r2, #97	@ 0x61
 80035ce:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80035fa:	0c1b      	lsrs	r3, r3, #16
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800360a:	0e1b      	lsrs	r3, r3, #24
 800360c:	b2da      	uxtb	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800361a:	b2da      	uxtb	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003628:	b29b      	uxth	r3, r3
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	b29b      	uxth	r3, r3
 800362e:	b2da      	uxtb	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	b2da      	uxtb	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800364c:	0e1b      	lsrs	r3, r3, #24
 800364e:	b2da      	uxtb	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 8003672:	2301      	movs	r3, #1
 8003674:	f7ff fc88 	bl	8002f88 <disk_write>
			fs->fsi_flag = 0;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8003686:	2200      	movs	r2, #0
 8003688:	2100      	movs	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fc9c 	bl	8002fc8 <disk_ioctl>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <sync_fs+0x150>
			res = FR_DISK_ERR;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	3b02      	subs	r3, #2
 80036b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80036ba:	3b02      	subs	r3, #2
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d301      	bcc.n	80036c6 <clust2sect+0x22>
 80036c2:	2300      	movs	r3, #0
 80036c4:	e00a      	b.n	80036dc <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80036cc:	461a      	mov	r2, r3
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	fb03 f202 	mul.w	r2, r3, r2
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80036da:	4413      	add	r3, r2
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b086      	sub	sp, #24
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d905      	bls.n	8003702 <get_fat+0x1c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <get_fat+0x22>
		val = 1;	/* Internal error */
 8003702:	2301      	movs	r3, #1
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e0a3      	b.n	8003850 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003708:	f04f 33ff 	mov.w	r3, #4294967295
 800370c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8003714:	2b03      	cmp	r3, #3
 8003716:	d068      	beq.n	80037ea <get_fat+0x104>
 8003718:	2b03      	cmp	r3, #3
 800371a:	f300 808f 	bgt.w	800383c <get_fat+0x156>
 800371e:	2b01      	cmp	r3, #1
 8003720:	d002      	beq.n	8003728 <get_fat+0x42>
 8003722:	2b02      	cmp	r3, #2
 8003724:	d03f      	beq.n	80037a6 <get_fat+0xc0>
 8003726:	e089      	b.n	800383c <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	0a5b      	lsrs	r3, r3, #9
 8003740:	4413      	add	r3, r2
 8003742:	4619      	mov	r1, r3
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff fed2 	bl	80034ee <move_window>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d178      	bne.n	8003842 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	60fa      	str	r2, [r7, #12]
 8003756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	0a5b      	lsrs	r3, r3, #9
 800376a:	4413      	add	r3, r2
 800376c:	4619      	mov	r1, r3
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff febd 	bl	80034ee <move_window>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d165      	bne.n	8003846 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	5cd3      	ldrb	r3, [r2, r3]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	4313      	orrs	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <get_fat+0xb6>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	e002      	b.n	80037a2 <get_fat+0xbc>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a2:	617b      	str	r3, [r7, #20]
			break;
 80037a4:	e054      	b.n	8003850 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	0a1b      	lsrs	r3, r3, #8
 80037b0:	4413      	add	r3, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff fe9a 	bl	80034ee <move_window>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d144      	bne.n	800384a <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	3301      	adds	r3, #1
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	b21b      	sxth	r3, r3
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	b21a      	sxth	r2, r3
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	b21b      	sxth	r3, r3
 80037e0:	4313      	orrs	r3, r2
 80037e2:	b21b      	sxth	r3, r3
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	617b      	str	r3, [r7, #20]
			break;
 80037e8:	e032      	b.n	8003850 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	09db      	lsrs	r3, r3, #7
 80037f4:	4413      	add	r3, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fe78 	bl	80034ee <move_window>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d124      	bne.n	800384e <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4413      	add	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	3303      	adds	r3, #3
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	061a      	lsls	r2, r3, #24
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	3302      	adds	r3, #2
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	041b      	lsls	r3, r3, #16
 8003822:	431a      	orrs	r2, r3
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	3301      	adds	r3, #1
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	4313      	orrs	r3, r2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	7812      	ldrb	r2, [r2, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003838:	617b      	str	r3, [r7, #20]
			break;
 800383a:	e009      	b.n	8003850 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800383c:	2301      	movs	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e006      	b.n	8003850 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003842:	bf00      	nop
 8003844:	e004      	b.n	8003850 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003846:	bf00      	nop
 8003848:	e002      	b.n	8003850 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800384e:	bf00      	nop
		}
	}

	return val;
 8003850:	697b      	ldr	r3, [r7, #20]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b088      	sub	sp, #32
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d905      	bls.n	8003878 <put_fat+0x1e>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <put_fat+0x24>
		res = FR_INT_ERR;
 8003878:	2302      	movs	r3, #2
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e0f6      	b.n	8003a6c <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8003884:	2b03      	cmp	r3, #3
 8003886:	f000 809e 	beq.w	80039c6 <put_fat+0x16c>
 800388a:	2b03      	cmp	r3, #3
 800388c:	f300 80e4 	bgt.w	8003a58 <put_fat+0x1fe>
 8003890:	2b01      	cmp	r3, #1
 8003892:	d002      	beq.n	800389a <put_fat+0x40>
 8003894:	2b02      	cmp	r3, #2
 8003896:	d06f      	beq.n	8003978 <put_fat+0x11e>
 8003898:	e0de      	b.n	8003a58 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4413      	add	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	0a5b      	lsrs	r3, r3, #9
 80038b2:	4413      	add	r3, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7ff fe19 	bl	80034ee <move_window>
 80038bc:	4603      	mov	r3, r0
 80038be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80038c0:	7ffb      	ldrb	r3, [r7, #31]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f040 80cb 	bne.w	8003a5e <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	617a      	str	r2, [r7, #20]
 80038ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00d      	beq.n	80038fe <put_fat+0xa4>
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b25b      	sxtb	r3, r3
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	b25a      	sxtb	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	b25b      	sxtb	r3, r3
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	4313      	orrs	r3, r2
 80038f8:	b25b      	sxtb	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e001      	b.n	8003902 <put_fat+0xa8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	0a5b      	lsrs	r3, r3, #9
 8003918:	4413      	add	r3, r2
 800391a:	4619      	mov	r1, r3
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff fde6 	bl	80034ee <move_window>
 8003922:	4603      	mov	r3, r0
 8003924:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003926:	7ffb      	ldrb	r3, [r7, #31]
 8003928:	2b00      	cmp	r3, #0
 800392a:	f040 809a 	bne.w	8003a62 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <put_fat+0xf2>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e00e      	b.n	800396a <put_fat+0x110>
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	b25b      	sxtb	r3, r3
 8003952:	f023 030f 	bic.w	r3, r3, #15
 8003956:	b25a      	sxtb	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	b25b      	sxtb	r3, r3
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	b25b      	sxtb	r3, r3
 8003964:	4313      	orrs	r3, r2
 8003966:	b25b      	sxtb	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8003976:	e079      	b.n	8003a6c <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	4413      	add	r3, r2
 8003984:	4619      	mov	r1, r3
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f7ff fdb1 	bl	80034ee <move_window>
 800398c:	4603      	mov	r3, r0
 800398e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003990:	7ffb      	ldrb	r3, [r7, #31]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d167      	bne.n	8003a66 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	3301      	adds	r3, #1
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 80039c4:	e052      	b.n	8003a6c <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	09db      	lsrs	r3, r3, #7
 80039d0:	4413      	add	r3, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7ff fd8a 	bl	80034ee <move_window>
 80039da:	4603      	mov	r3, r0
 80039dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80039de:	7ffb      	ldrb	r3, [r7, #31]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d142      	bne.n	8003a6a <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	3303      	adds	r3, #3
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	061a      	lsls	r2, r3, #24
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	3302      	adds	r3, #2
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	041b      	lsls	r3, r3, #16
 8003a02:	431a      	orrs	r2, r3
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	3301      	adds	r3, #1
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	7812      	ldrb	r2, [r2, #0]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	3301      	adds	r3, #1
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	0c1a      	lsrs	r2, r3, #16
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	0e1a      	lsrs	r2, r3, #24
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	3303      	adds	r3, #3
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8003a56:	e009      	b.n	8003a6c <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	e006      	b.n	8003a6c <put_fat+0x212>
			if (res != FR_OK) break;
 8003a5e:	bf00      	nop
 8003a60:	e004      	b.n	8003a6c <put_fat+0x212>
			if (res != FR_OK) break;
 8003a62:	bf00      	nop
 8003a64:	e002      	b.n	8003a6c <put_fat+0x212>
			if (res != FR_OK) break;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <put_fat+0x212>
			if (res != FR_OK) break;
 8003a6a:	bf00      	nop
		}
	}

	return res;
 8003a6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d905      	bls.n	8003a92 <remove_chain+0x1c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d302      	bcc.n	8003a98 <remove_chain+0x22>
		res = FR_INT_ERR;
 8003a92:	2302      	movs	r3, #2
 8003a94:	73fb      	strb	r3, [r7, #15]
 8003a96:	e043      	b.n	8003b20 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003a9c:	e036      	b.n	8003b0c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003a9e:	6839      	ldr	r1, [r7, #0]
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff fe20 	bl	80036e6 <get_fat>
 8003aa6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d035      	beq.n	8003b1a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d102      	bne.n	8003aba <remove_chain+0x44>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	e032      	b.n	8003b20 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d102      	bne.n	8003ac8 <remove_chain+0x52>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	e02b      	b.n	8003b20 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003ac8:	2200      	movs	r2, #0
 8003aca:	6839      	ldr	r1, [r7, #0]
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fec4 	bl	800385a <put_fat>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d120      	bne.n	8003b1e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d00f      	beq.n	8003b08 <remove_chain+0x92>
				fs->free_clust++;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				fs->fsi_flag |= 1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d3c2      	bcc.n	8003a9e <remove_chain+0x28>
 8003b18:	e002      	b.n	8003b20 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8003b1a:	bf00      	nop
 8003b1c:	e000      	b.n	8003b20 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8003b1e:	bf00      	nop
		}
	}

	return res;
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10f      	bne.n	8003b5a <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003b40:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <create_chain+0x2a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d31c      	bcc.n	8003b8e <create_chain+0x64>
 8003b54:	2301      	movs	r3, #1
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	e019      	b.n	8003b8e <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003b5a:	6839      	ldr	r1, [r7, #0]
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fdc2 	bl	80036e6 <get_fat>
 8003b62:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d801      	bhi.n	8003b6e <create_chain+0x44>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e076      	b.n	8003c5c <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d101      	bne.n	8003b7a <create_chain+0x50>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	e070      	b.n	8003c5c <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d201      	bcs.n	8003b8a <create_chain+0x60>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	e068      	b.n	8003c5c <create_chain+0x132>
		scl = clst;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	3301      	adds	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d307      	bcc.n	8003bb4 <create_chain+0x8a>
			ncl = 2;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d901      	bls.n	8003bb4 <create_chain+0x8a>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e053      	b.n	8003c5c <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003bb4:	6979      	ldr	r1, [r7, #20]
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff fd95 	bl	80036e6 <get_fat>
 8003bbc:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00e      	beq.n	8003be2 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bca:	d002      	beq.n	8003bd2 <create_chain+0xa8>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <create_chain+0xac>
			return cs;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	e042      	b.n	8003c5c <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d1d9      	bne.n	8003b92 <create_chain+0x68>
 8003bde:	2300      	movs	r3, #0
 8003be0:	e03c      	b.n	8003c5c <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8003be2:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003be4:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8003be8:	6979      	ldr	r1, [r7, #20]
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fe35 	bl	800385a <put_fat>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <create_chain+0xe4>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d006      	beq.n	8003c0e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	6839      	ldr	r1, [r7, #0]
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff fe28 	bl	800385a <put_fat>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d11a      	bne.n	8003c4a <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d018      	beq.n	8003c5a <create_chain+0x130>
			fs->free_clust--;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8003c2e:	1e5a      	subs	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fs->fsi_flag |= 1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 8003c48:	e007      	b.n	8003c5a <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d102      	bne.n	8003c56 <create_chain+0x12c>
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	e000      	b.n	8003c58 <create_chain+0x12e>
 8003c56:	2301      	movs	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003c5a:	697b      	ldr	r3, [r7, #20]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8003c74:	3304      	adds	r3, #4
 8003c76:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	0a5b      	lsrs	r3, r3, #9
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8003c82:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8003c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1d1a      	adds	r2, r3, #4
 8003c90:	613a      	str	r2, [r7, #16]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <clmt_clust+0x3c>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e010      	b.n	8003cc2 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d307      	bcc.n	8003cb8 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003cb6:	e7e9      	b.n	8003c8c <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8003cb8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4413      	add	r3, r2
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8003ce6:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d007      	beq.n	8003cfe <dir_sdi+0x32>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003cf4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d301      	bcc.n	8003d02 <dir_sdi+0x36>
		return FR_INT_ERR;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e074      	b.n	8003dec <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10c      	bne.n	8003d22 <dir_sdi+0x56>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003d0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d105      	bne.n	8003d22 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003d1c:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8003d20:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d111      	bne.n	8003d4c <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003d2e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8003d32:	461a      	mov	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d301      	bcc.n	8003d3e <dir_sdi+0x72>
			return FR_INT_ERR;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e056      	b.n	8003dec <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003d44:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	e032      	b.n	8003db2 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003d52:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8003d5a:	e01e      	b.n	8003d9a <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003d62:	6979      	ldr	r1, [r7, #20]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fcbe 	bl	80036e6 <get_fat>
 8003d6a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d101      	bne.n	8003d78 <dir_sdi+0xac>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e039      	b.n	8003dec <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d907      	bls.n	8003d8e <dir_sdi+0xc2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003d84:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d301      	bcc.n	8003d92 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e02c      	b.n	8003dec <dir_sdi+0x120>
			idx -= ic;
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d2dc      	bcs.n	8003d5c <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003da8:	6979      	ldr	r1, [r7, #20]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fc7a 	bl	80036a4 <clust2sect>
 8003db0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <dir_sdi+0xf8>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e013      	b.n	8003dec <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	091a      	lsrs	r2, r3, #4
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	441a      	add	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003dd8:	461a      	mov	r2, r3
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	015b      	lsls	r3, r3, #5
 8003de2:	441a      	add	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8003e04:	3301      	adds	r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d004      	beq.n	8003e1a <dir_next+0x26>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <dir_next+0x2a>
		return FR_NO_FILE;
 8003e1a:	2304      	movs	r3, #4
 8003e1c:	e0dd      	b.n	8003fda <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f040 80c6 	bne.w	8003fb6 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10b      	bne.n	8003e5a <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003e48:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4293      	cmp	r3, r2
 8003e52:	f0c0 80b0 	bcc.w	8003fb6 <dir_next+0x1c2>
				return FR_NO_FILE;
 8003e56:	2304      	movs	r3, #4
 8003e58:	e0bf      	b.n	8003fda <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8003e64:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f040 80a2 	bne.w	8003fb6 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4610      	mov	r0, r2
 8003e82:	f7ff fc30 	bl	80036e6 <get_fat>
 8003e86:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d801      	bhi.n	8003e92 <dir_next+0x9e>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0a3      	b.n	8003fda <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e98:	d101      	bne.n	8003e9e <dir_next+0xaa>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e09d      	b.n	8003fda <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003ea4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d374      	bcc.n	8003f98 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <dir_next+0xc4>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	e090      	b.n	8003fda <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f7ff fe2f 	bl	8003b2a <create_chain>
 8003ecc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <dir_next+0xe4>
 8003ed4:	2307      	movs	r3, #7
 8003ed6:	e080      	b.n	8003fda <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <dir_next+0xee>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e07b      	b.n	8003fda <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d101      	bne.n	8003eee <dir_next+0xfa>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e075      	b.n	8003fda <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff fab1 	bl	800345c <sync_window>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <dir_next+0x110>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e06a      	b.n	8003fda <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff f895 	bl	8003040 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 8003f22:	6979      	ldr	r1, [r7, #20]
 8003f24:	4610      	mov	r0, r2
 8003f26:	f7ff fbbd 	bl	80036a4 <clust2sect>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	e01b      	b.n	8003f6e <dir_next+0x17a>
						dp->fs->wflag = 1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fa87 	bl	800345c <sync_window>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <dir_next+0x164>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e040      	b.n	8003fda <dir_next+0x1e6>
						dp->fs->winsect++;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f5e:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 8003f62:	3201      	adds	r2, #1
 8003f64:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f74:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8003f78:	461a      	mov	r2, r3
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d3da      	bcc.n	8003f36 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f86:	f8d3 1230 	ldr.w	r1, [r3, #560]	@ 0x230
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	1a8a      	subs	r2, r1, r2
 8003f94:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003fa6:	6979      	ldr	r1, [r7, #20]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fb7b 	bl	80036a4 <clust2sect>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	015b      	lsls	r3, r3, #5
 8003fd0:	441a      	add	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd90      	pop	{r4, r7, pc}

08003fe2 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8003fec:	2100      	movs	r1, #0
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fe6c 	bl	8003ccc <dir_sdi>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d131      	bne.n	8004062 <dir_alloc+0x80>
		n = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f7ff fa6c 	bl	80034ee <move_window>
 8004016:	4603      	mov	r3, r0
 8004018:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d11f      	bne.n	8004060 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2be5      	cmp	r3, #229	@ 0xe5
 800402a:	d005      	beq.n	8004038 <dir_alloc+0x56>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d107      	bne.n	8004048 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3301      	adds	r3, #1
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d102      	bne.n	800404c <dir_alloc+0x6a>
 8004046:	e00c      	b.n	8004062 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004048:	2300      	movs	r3, #0
 800404a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800404c:	2101      	movs	r1, #1
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff fed0 	bl	8003df4 <dir_next>
 8004054:	4603      	mov	r3, r0
 8004056:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0d1      	beq.n	8004002 <dir_alloc+0x20>
 800405e:	e000      	b.n	8004062 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8004060:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	2b04      	cmp	r3, #4
 8004066:	d101      	bne.n	800406c <dir_alloc+0x8a>
 8004068:	2307      	movs	r3, #7
 800406a:	73fb      	strb	r3, [r7, #15]
	return res;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004076:	b480      	push	{r7}
 8004078:	b085      	sub	sp, #20
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	331b      	adds	r3, #27
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	b21b      	sxth	r3, r3
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	b21a      	sxth	r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	331a      	adds	r3, #26
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	b21b      	sxth	r3, r3
 8004094:	4313      	orrs	r3, r2
 8004096:	b21b      	sxth	r3, r3
 8004098:	b29b      	uxth	r3, r3
 800409a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d110      	bne.n	80040c8 <ld_clust+0x52>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	3315      	adds	r3, #21
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b21b      	sxth	r3, r3
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	b21a      	sxth	r2, r3
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	3314      	adds	r3, #20
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b21b      	sxth	r3, r3
 80040ba:	4313      	orrs	r3, r2
 80040bc:	b21b      	sxth	r3, r3
 80040be:	b29b      	uxth	r3, r3
 80040c0:	041b      	lsls	r3, r3, #16
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

	return cl;
 80040c8:	68fb      	ldr	r3, [r7, #12]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	331a      	adds	r3, #26
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	701a      	strb	r2, [r3, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	0a1b      	lsrs	r3, r3, #8
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	331b      	adds	r3, #27
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	0c1a      	lsrs	r2, r3, #16
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3314      	adds	r3, #20
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	0c1b      	lsrs	r3, r3, #16
 8004108:	b29b      	uxth	r3, r3
 800410a:	0a1b      	lsrs	r3, r3, #8
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3315      	adds	r3, #21
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004128:	2100      	movs	r1, #0
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff fdce 	bl	8003ccc <dir_sdi>
 8004130:	4603      	mov	r3, r0
 8004132:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004134:	7dfb      	ldrb	r3, [r7, #23]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <dir_find+0x1e>
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	e03b      	b.n	80041b6 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f7ff f9ce 	bl	80034ee <move_window>
 8004152:	4603      	mov	r3, r0
 8004154:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d128      	bne.n	80041ae <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004162:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d102      	bne.n	8004176 <dir_find+0x56>
 8004170:	2304      	movs	r3, #4
 8004172:	75fb      	strb	r3, [r7, #23]
 8004174:	e01e      	b.n	80041b4 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	330b      	adds	r3, #11
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <dir_find+0x7a>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800418a:	220b      	movs	r2, #11
 800418c:	4619      	mov	r1, r3
 800418e:	6938      	ldr	r0, [r7, #16]
 8004190:	f7fe ff70 	bl	8003074 <mem_cmp>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00b      	beq.n	80041b2 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800419a:	2100      	movs	r1, #0
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fe29 	bl	8003df4 <dir_next>
 80041a2:	4603      	mov	r3, r0
 80041a4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0c8      	beq.n	800413e <dir_find+0x1e>
 80041ac:	e002      	b.n	80041b4 <dir_find+0x94>
		if (res != FR_OK) break;
 80041ae:	bf00      	nop
 80041b0:	e000      	b.n	80041b4 <dir_find+0x94>
			break;
 80041b2:	bf00      	nop

	return res;
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 80041c8:	2304      	movs	r3, #4
 80041ca:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 80041cc:	e03c      	b.n	8004248 <dir_read+0x8a>
		res = move_window(dp->fs, dp->sect);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80041da:	4619      	mov	r1, r3
 80041dc:	4610      	mov	r0, r2
 80041de:	f7ff f986 	bl	80034ee <move_window>
 80041e2:	4603      	mov	r3, r0
 80041e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d133      	bne.n	8004254 <dir_read+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80041f2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d102      	bne.n	8004206 <dir_read+0x48>
 8004200:	2304      	movs	r3, #4
 8004202:	75fb      	strb	r3, [r7, #23]
 8004204:	e02b      	b.n	800425e <dir_read+0xa0>
		a = dir[DIR_Attr] & AM_MASK;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	330b      	adds	r3, #11
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004210:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2be5      	cmp	r3, #229	@ 0xe5
 8004216:	d00e      	beq.n	8004236 <dir_read+0x78>
 8004218:	7bbb      	ldrb	r3, [r7, #14]
 800421a:	2b0f      	cmp	r3, #15
 800421c:	d00b      	beq.n	8004236 <dir_read+0x78>
 800421e:	7bbb      	ldrb	r3, [r7, #14]
 8004220:	f023 0320 	bic.w	r3, r3, #32
 8004224:	2b08      	cmp	r3, #8
 8004226:	bf0c      	ite	eq
 8004228:	2301      	moveq	r3, #1
 800422a:	2300      	movne	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	4293      	cmp	r3, r2
 8004234:	d010      	beq.n	8004258 <dir_read+0x9a>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8004236:	2100      	movs	r1, #0
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff fddb 	bl	8003df4 <dir_next>
 800423e:	4603      	mov	r3, r0
 8004240:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004242:	7dfb      	ldrb	r3, [r7, #23]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <dir_read+0x9e>
	while (dp->sect) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1bd      	bne.n	80041ce <dir_read+0x10>
 8004252:	e004      	b.n	800425e <dir_read+0xa0>
		if (res != FR_OK) break;
 8004254:	bf00      	nop
 8004256:	e002      	b.n	800425e <dir_read+0xa0>
			break;
 8004258:	bf00      	nop
 800425a:	e000      	b.n	800425e <dir_read+0xa0>
		if (res != FR_OK) break;
 800425c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800425e:	7dfb      	ldrb	r3, [r7, #23]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <dir_read+0xae>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

	return res;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800427e:	2101      	movs	r1, #1
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff feae 	bl	8003fe2 <dir_alloc>
 8004286:	4603      	mov	r3, r0
 8004288:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d126      	bne.n	80042de <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f7ff f925 	bl	80034ee <move_window>
 80042a4:	4603      	mov	r3, r0
 80042a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d117      	bne.n	80042de <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80042b4:	2220      	movs	r2, #32
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe fec1 	bl	8003040 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80042ca:	220b      	movs	r2, #11
 80042cc:	4619      	mov	r1, r3
 80042ce:	f7fe fe99 	bl	8003004 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 80042de:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	3309      	adds	r3, #9
 80042f6:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d05d      	beq.n	80043be <get_fileinfo+0xd6>
		dir = dp->dir;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004308:	60bb      	str	r3, [r7, #8]
		i = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 800430e:	e01d      	b.n	800434c <get_fileinfo+0x64>
			c = (TCHAR)dir[i++];
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	617a      	str	r2, [r7, #20]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	4413      	add	r3, r2
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	2b20      	cmp	r3, #32
 8004322:	d012      	beq.n	800434a <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b05      	cmp	r3, #5
 8004328:	d101      	bne.n	800432e <get_fileinfo+0x46>
 800432a:	23e5      	movs	r3, #229	@ 0xe5
 800432c:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b09      	cmp	r3, #9
 8004332:	d104      	bne.n	800433e <get_fileinfo+0x56>
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	613a      	str	r2, [r7, #16]
 800433a:	222e      	movs	r2, #46	@ 0x2e
 800433c:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	613a      	str	r2, [r7, #16]
 8004344:	7bfa      	ldrb	r2, [r7, #15]
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	e000      	b.n	800434c <get_fileinfo+0x64>
			if (c == ' ') continue;				/* Skip padding spaces */
 800434a:	bf00      	nop
		while (i < 11) {		/* Copy name body and extension */
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b0a      	cmp	r3, #10
 8004350:	d9de      	bls.n	8004310 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	7ada      	ldrb	r2, [r3, #11]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	331f      	adds	r3, #31
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	061a      	lsls	r2, r3, #24
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	331e      	adds	r3, #30
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	431a      	orrs	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	331d      	adds	r3, #29
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	4313      	orrs	r3, r2
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	321c      	adds	r2, #28
 800437a:	7812      	ldrb	r2, [r2, #0]
 800437c:	431a      	orrs	r2, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3319      	adds	r3, #25
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	b21b      	sxth	r3, r3
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	b21a      	sxth	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3318      	adds	r3, #24
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	b21b      	sxth	r3, r3
 8004396:	4313      	orrs	r3, r2
 8004398:	b21b      	sxth	r3, r3
 800439a:	b29a      	uxth	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	3317      	adds	r3, #23
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	b21b      	sxth	r3, r3
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	b21a      	sxth	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	3316      	adds	r3, #22
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	b21b      	sxth	r3, r3
 80043b4:	4313      	orrs	r3, r2
 80043b6:	b21b      	sxth	r3, r3
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 80043c4:	bf00      	nop
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr
	...

080043d0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	e002      	b.n	80043e8 <create_name+0x18>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80043ee:	d0f8      	beq.n	80043e2 <create_name+0x12>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80043f6:	d0f4      	beq.n	80043e2 <create_name+0x12>
	sfn = dp->fn;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80043fe:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004400:	220b      	movs	r2, #11
 8004402:	2120      	movs	r1, #32
 8004404:	68b8      	ldr	r0, [r7, #8]
 8004406:	f7fe fe1b 	bl	8003040 <mem_set>
	si = i = b = 0; ni = 8;
 800440a:	2300      	movs	r3, #0
 800440c:	77fb      	strb	r3, [r7, #31]
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	2308      	movs	r3, #8
 8004418:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	4413      	add	r3, r2
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b2e      	cmp	r3, #46	@ 0x2e
 8004424:	d12f      	bne.n	8004486 <create_name+0xb6>
		for (;;) {
			c = (BYTE)p[si++];
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	617a      	str	r2, [r7, #20]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	77bb      	strb	r3, [r7, #30]
			if (c != '.' || si >= 3) break;
 8004434:	7fbb      	ldrb	r3, [r7, #30]
 8004436:	2b2e      	cmp	r3, #46	@ 0x2e
 8004438:	d10a      	bne.n	8004450 <create_name+0x80>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d807      	bhi.n	8004450 <create_name+0x80>
			sfn[i++] = c;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	613a      	str	r2, [r7, #16]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	4413      	add	r3, r2
 800444a:	7fba      	ldrb	r2, [r7, #30]
 800444c:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800444e:	e7ea      	b.n	8004426 <create_name+0x56>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8004450:	7fbb      	ldrb	r3, [r7, #30]
 8004452:	2b2f      	cmp	r3, #47	@ 0x2f
 8004454:	d007      	beq.n	8004466 <create_name+0x96>
 8004456:	7fbb      	ldrb	r3, [r7, #30]
 8004458:	2b5c      	cmp	r3, #92	@ 0x5c
 800445a:	d004      	beq.n	8004466 <create_name+0x96>
 800445c:	7fbb      	ldrb	r3, [r7, #30]
 800445e:	2b20      	cmp	r3, #32
 8004460:	d901      	bls.n	8004466 <create_name+0x96>
 8004462:	2306      	movs	r3, #6
 8004464:	e0a2      	b.n	80045ac <create_name+0x1dc>
		*path = &p[si];									/* Return pointer to the next segment */
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	441a      	add	r2, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 8004470:	7fbb      	ldrb	r3, [r7, #30]
 8004472:	2b20      	cmp	r3, #32
 8004474:	d801      	bhi.n	800447a <create_name+0xaa>
 8004476:	2224      	movs	r2, #36	@ 0x24
 8004478:	e000      	b.n	800447c <create_name+0xac>
 800447a:	2220      	movs	r2, #32
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	330b      	adds	r3, #11
 8004480:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e092      	b.n	80045ac <create_name+0x1dc>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	617a      	str	r2, [r7, #20]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8004494:	7fbb      	ldrb	r3, [r7, #30]
 8004496:	2b20      	cmp	r3, #32
 8004498:	d953      	bls.n	8004542 <create_name+0x172>
 800449a:	7fbb      	ldrb	r3, [r7, #30]
 800449c:	2b2f      	cmp	r3, #47	@ 0x2f
 800449e:	d050      	beq.n	8004542 <create_name+0x172>
 80044a0:	7fbb      	ldrb	r3, [r7, #30]
 80044a2:	2b5c      	cmp	r3, #92	@ 0x5c
 80044a4:	d04d      	beq.n	8004542 <create_name+0x172>
		if (c == '.' || i >= ni) {
 80044a6:	7fbb      	ldrb	r3, [r7, #30]
 80044a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80044aa:	d003      	beq.n	80044b4 <create_name+0xe4>
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d30f      	bcc.n	80044d4 <create_name+0x104>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d102      	bne.n	80044c0 <create_name+0xf0>
 80044ba:	7fbb      	ldrb	r3, [r7, #30]
 80044bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80044be:	d001      	beq.n	80044c4 <create_name+0xf4>
 80044c0:	2306      	movs	r3, #6
 80044c2:	e073      	b.n	80045ac <create_name+0x1dc>
			i = 8; ni = 11;
 80044c4:	2308      	movs	r3, #8
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	230b      	movs	r3, #11
 80044ca:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80044cc:	7ffb      	ldrb	r3, [r7, #31]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	77fb      	strb	r3, [r7, #31]
 80044d2:	e035      	b.n	8004540 <create_name+0x170>
		}
		if (c >= 0x80) {				/* Extended character? */
 80044d4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	da08      	bge.n	80044ee <create_name+0x11e>
			b |= 3;						/* Eliminate NT flag */
 80044dc:	7ffb      	ldrb	r3, [r7, #31]
 80044de:	f043 0303 	orr.w	r3, r3, #3
 80044e2:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80044e4:	7fbb      	ldrb	r3, [r7, #30]
 80044e6:	3b80      	subs	r3, #128	@ 0x80
 80044e8:	4a32      	ldr	r2, [pc, #200]	@ (80045b4 <create_name+0x1e4>)
 80044ea:	5cd3      	ldrb	r3, [r2, r3]
 80044ec:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80044ee:	7fbb      	ldrb	r3, [r7, #30]
 80044f0:	4619      	mov	r1, r3
 80044f2:	4831      	ldr	r0, [pc, #196]	@ (80045b8 <create_name+0x1e8>)
 80044f4:	f7fe fde4 	bl	80030c0 <chk_chr>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <create_name+0x132>
				return FR_INVALID_NAME;
 80044fe:	2306      	movs	r3, #6
 8004500:	e054      	b.n	80045ac <create_name+0x1dc>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8004502:	7fbb      	ldrb	r3, [r7, #30]
 8004504:	2b40      	cmp	r3, #64	@ 0x40
 8004506:	d907      	bls.n	8004518 <create_name+0x148>
 8004508:	7fbb      	ldrb	r3, [r7, #30]
 800450a:	2b5a      	cmp	r3, #90	@ 0x5a
 800450c:	d804      	bhi.n	8004518 <create_name+0x148>
				b |= 2;
 800450e:	7ffb      	ldrb	r3, [r7, #31]
 8004510:	f043 0302 	orr.w	r3, r3, #2
 8004514:	77fb      	strb	r3, [r7, #31]
 8004516:	e00c      	b.n	8004532 <create_name+0x162>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8004518:	7fbb      	ldrb	r3, [r7, #30]
 800451a:	2b60      	cmp	r3, #96	@ 0x60
 800451c:	d909      	bls.n	8004532 <create_name+0x162>
 800451e:	7fbb      	ldrb	r3, [r7, #30]
 8004520:	2b7a      	cmp	r3, #122	@ 0x7a
 8004522:	d806      	bhi.n	8004532 <create_name+0x162>
					b |= 1; c -= 0x20;
 8004524:	7ffb      	ldrb	r3, [r7, #31]
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	7fbb      	ldrb	r3, [r7, #30]
 800452e:	3b20      	subs	r3, #32
 8004530:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	613a      	str	r2, [r7, #16]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	4413      	add	r3, r2
 800453c:	7fba      	ldrb	r2, [r7, #30]
 800453e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004540:	e7a1      	b.n	8004486 <create_name+0xb6>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	441a      	add	r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800454c:	7fbb      	ldrb	r3, [r7, #30]
 800454e:	2b20      	cmp	r3, #32
 8004550:	d801      	bhi.n	8004556 <create_name+0x186>
 8004552:	2304      	movs	r3, #4
 8004554:	e000      	b.n	8004558 <create_name+0x188>
 8004556:	2300      	movs	r3, #0
 8004558:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <create_name+0x194>
 8004560:	2306      	movs	r3, #6
 8004562:	e023      	b.n	80045ac <create_name+0x1dc>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2be5      	cmp	r3, #229	@ 0xe5
 800456a:	d102      	bne.n	8004572 <create_name+0x1a2>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2205      	movs	r2, #5
 8004570:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d102      	bne.n	800457e <create_name+0x1ae>
 8004578:	7ffb      	ldrb	r3, [r7, #31]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800457e:	7ffb      	ldrb	r3, [r7, #31]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d103      	bne.n	8004590 <create_name+0x1c0>
 8004588:	7fbb      	ldrb	r3, [r7, #30]
 800458a:	f043 0310 	orr.w	r3, r3, #16
 800458e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004590:	7ffb      	ldrb	r3, [r7, #31]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b04      	cmp	r3, #4
 8004598:	d103      	bne.n	80045a2 <create_name+0x1d2>
 800459a:	7fbb      	ldrb	r3, [r7, #30]
 800459c:	f043 0308 	orr.w	r3, r3, #8
 80045a0:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	330b      	adds	r3, #11
 80045a6:	7fba      	ldrb	r2, [r7, #30]
 80045a8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80045aa:	2300      	movs	r3, #0
#endif
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3720      	adds	r7, #32
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	0800685c 	.word	0x0800685c
 80045b8:	080067ec 	.word	0x080067ec

080045bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80045cc:	d003      	beq.n	80045d6 <follow_path+0x1a>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b5c      	cmp	r3, #92	@ 0x5c
 80045d4:	d107      	bne.n	80045e6 <follow_path+0x2a>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	3301      	adds	r3, #1
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 80045e4:	e007      	b.n	80045f6 <follow_path+0x3a>
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80045ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b1f      	cmp	r3, #31
 80045fc:	d80a      	bhi.n	8004614 <follow_path+0x58>
		res = dir_sdi(dp, 0);
 80045fe:	2100      	movs	r1, #0
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff fb63 	bl	8003ccc <dir_sdi>
 8004606:	4603      	mov	r3, r0
 8004608:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004612:	e05c      	b.n	80046ce <follow_path+0x112>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004614:	463b      	mov	r3, r7
 8004616:	4619      	mov	r1, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff fed9 	bl	80043d0 <create_name>
 800461e:	4603      	mov	r3, r0
 8004620:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d14d      	bne.n	80046c4 <follow_path+0x108>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff fd79 	bl	8004120 <dir_find>
 800462e:	4603      	mov	r3, r0
 8004630:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004638:	7adb      	ldrb	r3, [r3, #11]
 800463a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d01f      	beq.n	8004682 <follow_path+0xc6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	2b04      	cmp	r3, #4
 8004646:	d13f      	bne.n	80046c8 <follow_path+0x10c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 8004648:	7bbb      	ldrb	r3, [r7, #14]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00f      	beq.n	8004672 <follow_path+0xb6>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8004662:	7bbb      	ldrb	r3, [r7, #14]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d029      	beq.n	80046c0 <follow_path+0x104>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
 800466c:	2300      	movs	r3, #0
 800466e:	73fb      	strb	r3, [r7, #15]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8004670:	e02a      	b.n	80046c8 <follow_path+0x10c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004672:	7bbb      	ldrb	r3, [r7, #14]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d125      	bne.n	80046c8 <follow_path+0x10c>
 800467c:	2305      	movs	r3, #5
 800467e:	73fb      	strb	r3, [r7, #15]
				break;
 8004680:	e022      	b.n	80046c8 <follow_path+0x10c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004682:	7bbb      	ldrb	r3, [r7, #14]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11f      	bne.n	80046cc <follow_path+0x110>
			dir = dp->dir;						/* Follow the sub-directory */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004692:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	330b      	adds	r3, #11
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d102      	bne.n	80046a8 <follow_path+0xec>
				res = FR_NO_PATH; break;
 80046a2:	2305      	movs	r3, #5
 80046a4:	73fb      	strb	r3, [r7, #15]
 80046a6:	e012      	b.n	80046ce <follow_path+0x112>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff fce0 	bl	8004076 <ld_clust>
 80046b6:	4602      	mov	r2, r0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 80046be:	e7a9      	b.n	8004614 <follow_path+0x58>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80046c0:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80046c2:	e7a7      	b.n	8004614 <follow_path+0x58>
			if (res != FR_OK) break;
 80046c4:	bf00      	nop
 80046c6:	e002      	b.n	80046ce <follow_path+0x112>
				break;
 80046c8:	bf00      	nop
 80046ca:	e000      	b.n	80046ce <follow_path+0x112>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80046cc:	bf00      	nop
		}
	}

	return res;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80046e0:	f04f 33ff 	mov.w	r3, #4294967295
 80046e4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d031      	beq.n	8004752 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	e002      	b.n	80046fc <get_ldnumber+0x24>
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	3301      	adds	r3, #1
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b20      	cmp	r3, #32
 8004702:	d903      	bls.n	800470c <get_ldnumber+0x34>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b3a      	cmp	r3, #58	@ 0x3a
 800470a:	d1f4      	bne.n	80046f6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b3a      	cmp	r3, #58	@ 0x3a
 8004712:	d11c      	bne.n	800474e <get_ldnumber+0x76>
			tp = *path;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	60fa      	str	r2, [r7, #12]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	3b30      	subs	r3, #48	@ 0x30
 8004724:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b09      	cmp	r3, #9
 800472a:	d80e      	bhi.n	800474a <get_ldnumber+0x72>
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	429a      	cmp	r2, r3
 8004732:	d10a      	bne.n	800474a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d107      	bne.n	800474a <get_ldnumber+0x72>
					vol = (int)i;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	3301      	adds	r3, #1
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	e002      	b.n	8004754 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004752:	693b      	ldr	r3, [r7, #16]
}
 8004754:	4618      	mov	r0, r3
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr
	...

08004760 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f04f 32ff 	mov.w	r2, #4294967295
 8004778:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fe feb5 	bl	80034ee <move_window>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <check_fs+0x2e>
		return 3;
 800478a:	2303      	movs	r3, #3
 800478c:	e04b      	b.n	8004826 <check_fs+0xc6>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004794:	3301      	adds	r3, #1
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	b21b      	sxth	r3, r3
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	b21a      	sxth	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80047a4:	b21b      	sxth	r3, r3
 80047a6:	4313      	orrs	r3, r2
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	4a21      	ldr	r2, [pc, #132]	@ (8004830 <check_fs+0xd0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d001      	beq.n	80047b4 <check_fs+0x54>
		return 2;
 80047b0:	2302      	movs	r3, #2
 80047b2:	e038      	b.n	8004826 <check_fs+0xc6>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3336      	adds	r3, #54	@ 0x36
 80047b8:	3303      	adds	r3, #3
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	061a      	lsls	r2, r3, #24
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3336      	adds	r3, #54	@ 0x36
 80047c2:	3302      	adds	r3, #2
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	041b      	lsls	r3, r3, #16
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3336      	adds	r3, #54	@ 0x36
 80047ce:	3301      	adds	r3, #1
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	4313      	orrs	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 80047dc:	4313      	orrs	r3, r2
 80047de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047e2:	4a14      	ldr	r2, [pc, #80]	@ (8004834 <check_fs+0xd4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d101      	bne.n	80047ec <check_fs+0x8c>
		return 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e01c      	b.n	8004826 <check_fs+0xc6>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3352      	adds	r3, #82	@ 0x52
 80047f0:	3303      	adds	r3, #3
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	061a      	lsls	r2, r3, #24
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3352      	adds	r3, #82	@ 0x52
 80047fa:	3302      	adds	r3, #2
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	041b      	lsls	r3, r3, #16
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3352      	adds	r3, #82	@ 0x52
 8004806:	3301      	adds	r3, #1
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	4313      	orrs	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8004814:	4313      	orrs	r3, r2
 8004816:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800481a:	4a06      	ldr	r2, [pc, #24]	@ (8004834 <check_fs+0xd4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d101      	bne.n	8004824 <check_fs+0xc4>
		return 0;
 8004820:	2300      	movs	r3, #0
 8004822:	e000      	b.n	8004826 <check_fs+0xc6>

	return 1;
 8004824:	2301      	movs	r3, #1
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	ffffaa55 	.word	0xffffaa55
 8004834:	00544146 	.word	0x00544146

08004838 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b096      	sub	sp, #88	@ 0x58
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	4613      	mov	r3, r2
 8004844:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800484c:	68b8      	ldr	r0, [r7, #8]
 800484e:	f7ff ff43 	bl	80046d8 <get_ldnumber>
 8004852:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004856:	2b00      	cmp	r3, #0
 8004858:	da01      	bge.n	800485e <find_volume+0x26>
 800485a:	230b      	movs	r3, #11
 800485c:	e29d      	b.n	8004d9a <find_volume+0x562>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800485e:	4a9e      	ldr	r2, [pc, #632]	@ (8004ad8 <find_volume+0x2a0>)
 8004860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004866:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <find_volume+0x3a>
 800486e:	230c      	movs	r3, #12
 8004870:	e293      	b.n	8004d9a <find_volume+0x562>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004876:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01b      	beq.n	80048ba <find_volume+0x82>
		stat = disk_status(fs->drv);
 8004882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004884:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004888:	4618      	mov	r0, r3
 800488a:	f7fe fb1d 	bl	8002ec8 <disk_status>
 800488e:	4603      	mov	r3, r0
 8004890:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004894:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10c      	bne.n	80048ba <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <find_volume+0x7e>
 80048a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80048b2:	230a      	movs	r3, #10
 80048b4:	e271      	b.n	8004d9a <find_volume+0x562>
			return FR_OK;				/* The file system object is valid */
 80048b6:	2300      	movs	r3, #0
 80048b8:	e26f      	b.n	8004d9a <find_volume+0x562>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80048ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80048c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80048cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fb12 	bl	8002efc <disk_initialize>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80048de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80048ea:	2303      	movs	r3, #3
 80048ec:	e255      	b.n	8004d9a <find_volume+0x562>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <find_volume+0xcc>
 80048f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8004900:	230a      	movs	r3, #10
 8004902:	e24a      	b.n	8004d9a <find_volume+0x562>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004908:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800490a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800490c:	f7ff ff28 	bl	8004760 <check_fs>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004916:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800491a:	2b01      	cmp	r3, #1
 800491c:	d153      	bne.n	80049c6 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800491e:	2300      	movs	r3, #0
 8004920:	643b      	str	r3, [r7, #64]	@ 0x40
 8004922:	e028      	b.n	8004976 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004924:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800492e:	4413      	add	r3, r2
 8004930:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004934:	3304      	adds	r3, #4
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d012      	beq.n	8004962 <find_volume+0x12a>
 800493c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493e:	330b      	adds	r3, #11
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	061a      	lsls	r2, r3, #24
 8004944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004946:	330a      	adds	r3, #10
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	431a      	orrs	r2, r3
 800494e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004950:	3309      	adds	r3, #9
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	4313      	orrs	r3, r2
 8004958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800495a:	3208      	adds	r2, #8
 800495c:	7812      	ldrb	r2, [r2, #0]
 800495e:	431a      	orrs	r2, r3
 8004960:	e000      	b.n	8004964 <find_volume+0x12c>
 8004962:	2200      	movs	r2, #0
 8004964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	3358      	adds	r3, #88	@ 0x58
 800496a:	443b      	add	r3, r7
 800496c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004972:	3301      	adds	r3, #1
 8004974:	643b      	str	r3, [r7, #64]	@ 0x40
 8004976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004978:	2b03      	cmp	r3, #3
 800497a:	d9d3      	bls.n	8004924 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800497c:	2300      	movs	r3, #0
 800497e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <find_volume+0x154>
 8004986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004988:	3b01      	subs	r3, #1
 800498a:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800498c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	3358      	adds	r3, #88	@ 0x58
 8004992:	443b      	add	r3, r7
 8004994:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004998:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800499a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <find_volume+0x174>
 80049a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80049a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80049a4:	f7ff fedc 	bl	8004760 <check_fs>
 80049a8:	4603      	mov	r3, r0
 80049aa:	e000      	b.n	80049ae <find_volume+0x176>
 80049ac:	2302      	movs	r3, #2
 80049ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80049b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <find_volume+0x18e>
 80049ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049bc:	3301      	adds	r3, #1
 80049be:	643b      	str	r3, [r7, #64]	@ 0x40
 80049c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d9e2      	bls.n	800498c <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80049c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d101      	bne.n	80049d2 <find_volume+0x19a>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e1e3      	b.n	8004d9a <find_volume+0x562>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80049d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <find_volume+0x1a6>
 80049da:	230d      	movs	r3, #13
 80049dc:	e1dd      	b.n	8004d9a <find_volume+0x562>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80049de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e0:	7b1b      	ldrb	r3, [r3, #12]
 80049e2:	b21b      	sxth	r3, r3
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	b21a      	sxth	r2, r3
 80049e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ea:	7adb      	ldrb	r3, [r3, #11]
 80049ec:	b21b      	sxth	r3, r3
 80049ee:	4313      	orrs	r3, r2
 80049f0:	b21b      	sxth	r3, r3
 80049f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f6:	d001      	beq.n	80049fc <find_volume+0x1c4>
		return FR_NO_FILESYSTEM;
 80049f8:	230d      	movs	r3, #13
 80049fa:	e1ce      	b.n	8004d9a <find_volume+0x562>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80049fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fe:	7ddb      	ldrb	r3, [r3, #23]
 8004a00:	b21b      	sxth	r3, r3
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	b21a      	sxth	r2, r3
 8004a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a08:	7d9b      	ldrb	r3, [r3, #22]
 8004a0a:	b21b      	sxth	r3, r3
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	b21b      	sxth	r3, r3
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d112      	bne.n	8004a40 <find_volume+0x208>
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8004a20:	061a      	lsls	r2, r3, #24
 8004a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a24:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	4313      	orrs	r3, r2
 8004a36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a38:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8004a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a44:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4a:	7c1a      	ldrb	r2, [r3, #16]
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4e:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a54:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d006      	beq.n	8004a6a <find_volume+0x232>
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5e:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d001      	beq.n	8004a6a <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8004a66:	230d      	movs	r3, #13
 8004a68:	e197      	b.n	8004d9a <find_volume+0x562>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6c:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8004a70:	461a      	mov	r2, r3
 8004a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a74:	fb02 f303 	mul.w	r3, r2, r3
 8004a78:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7c:	7b5a      	ldrb	r2, [r3, #13]
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a80:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a86:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <find_volume+0x26c>
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a90:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8004a94:	461a      	mov	r2, r3
 8004a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a98:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8004aa4:	230d      	movs	r3, #13
 8004aa6:	e178      	b.n	8004d9a <find_volume+0x562>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aaa:	7c9b      	ldrb	r3, [r3, #18]
 8004aac:	b21b      	sxth	r3, r3
 8004aae:	021b      	lsls	r3, r3, #8
 8004ab0:	b21a      	sxth	r2, r3
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab4:	7c5b      	ldrb	r3, [r3, #17]
 8004ab6:	b21b      	sxth	r3, r3
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	b21b      	sxth	r3, r3
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac0:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8004ad4:	230d      	movs	r3, #13
 8004ad6:	e160      	b.n	8004d9a <find_volume+0x562>
 8004ad8:	200005b4 	.word	0x200005b4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ade:	7d1b      	ldrb	r3, [r3, #20]
 8004ae0:	b21b      	sxth	r3, r3
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	b21a      	sxth	r2, r3
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae8:	7cdb      	ldrb	r3, [r3, #19]
 8004aea:	b21b      	sxth	r3, r3
 8004aec:	4313      	orrs	r3, r2
 8004aee:	b21b      	sxth	r3, r3
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004af4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d112      	bne.n	8004b20 <find_volume+0x2e8>
 8004afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8004b00:	061a      	lsls	r2, r3, #24
 8004b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b04:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	4313      	orrs	r3, r2
 8004b16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b18:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b22:	7bdb      	ldrb	r3, [r3, #15]
 8004b24:	b21b      	sxth	r3, r3
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	b21a      	sxth	r2, r3
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2c:	7b9b      	ldrb	r3, [r3, #14]
 8004b2e:	b21b      	sxth	r3, r3
 8004b30:	4313      	orrs	r3, r2
 8004b32:	b21b      	sxth	r3, r3
 8004b34:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004b36:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <find_volume+0x308>
 8004b3c:	230d      	movs	r3, #13
 8004b3e:	e12c      	b.n	8004d9a <find_volume+0x562>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004b40:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b44:	4413      	add	r3, r2
 8004b46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b48:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 8004b4c:	0912      	lsrs	r2, r2, #4
 8004b4e:	b292      	uxth	r2, r2
 8004b50:	4413      	add	r3, r2
 8004b52:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004b54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d201      	bcs.n	8004b60 <find_volume+0x328>
 8004b5c:	230d      	movs	r3, #13
 8004b5e:	e11c      	b.n	8004d9a <find_volume+0x562>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004b60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b68:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8004b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b70:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <find_volume+0x344>
 8004b78:	230d      	movs	r3, #13
 8004b7a:	e10e      	b.n	8004d9a <find_volume+0x562>
	fmt = FS_FAT12;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d902      	bls.n	8004b92 <find_volume+0x35a>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d902      	bls.n	8004ba2 <find_volume+0x36a>
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	1c9a      	adds	r2, r3, #2
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8004bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004bb0:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004bb4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb8:	441a      	add	r2, r3
 8004bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbc:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8004bc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc4:	441a      	add	r2, r3
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc8:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (fmt == FS_FAT32) {
 8004bcc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d121      	bne.n	8004c18 <find_volume+0x3e0>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <find_volume+0x3aa>
 8004bde:	230d      	movs	r3, #13
 8004be0:	e0db      	b.n	8004d9a <find_volume+0x562>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004be8:	061a      	lsls	r2, r3, #24
 8004bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bec:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004bf0:	041b      	lsls	r3, r3, #16
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c00:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8004c04:	431a      	orrs	r2, r3
 8004c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c08:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c16:	e025      	b.n	8004c64 <find_volume+0x42c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <find_volume+0x3ee>
 8004c22:	230d      	movs	r3, #13
 8004c24:	e0b9      	b.n	8004d9a <find_volume+0x562>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c28:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 8004c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c2e:	441a      	add	r2, r3
 8004c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c32:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004c36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d104      	bne.n	8004c48 <find_volume+0x410>
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c40:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	e00c      	b.n	8004c62 <find_volume+0x42a>
 8004c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4a:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8004c4e:	4613      	mov	r3, r2
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	4413      	add	r3, r2
 8004c54:	085a      	lsrs	r2, r3, #1
 8004c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c58:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8004c62:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c66:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c6c:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8004c70:	0a5b      	lsrs	r3, r3, #9
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d201      	bcs.n	8004c7a <find_volume+0x442>
		return FR_NO_FILESYSTEM;
 8004c76:	230d      	movs	r3, #13
 8004c78:	e08f      	b.n	8004d9a <find_volume+0x562>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c80:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 8004c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c86:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c92:	2280      	movs	r2, #128	@ 0x80
 8004c94:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004c98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d164      	bne.n	8004d6a <find_volume+0x532>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ca6:	b21b      	sxth	r3, r3
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	b21a      	sxth	r2, r3
 8004cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004cb2:	b21b      	sxth	r3, r3
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	b21b      	sxth	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d156      	bne.n	8004d6a <find_volume+0x532>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004cc4:	f7fe fc13 	bl	80034ee <move_window>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d14d      	bne.n	8004d6a <find_volume+0x532>
	{
		fs->fsi_flag = 0;
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd8:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8004cdc:	b21b      	sxth	r3, r3
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	b21a      	sxth	r2, r3
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce4:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8004ce8:	b21b      	sxth	r3, r3
 8004cea:	4313      	orrs	r3, r2
 8004cec:	b21b      	sxth	r3, r3
 8004cee:	4a2d      	ldr	r2, [pc, #180]	@ (8004da4 <find_volume+0x56c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d13a      	bne.n	8004d6a <find_volume+0x532>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf6:	78db      	ldrb	r3, [r3, #3]
 8004cf8:	061a      	lsls	r2, r3, #24
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	789b      	ldrb	r3, [r3, #2]
 8004cfe:	041b      	lsls	r3, r3, #16
 8004d00:	431a      	orrs	r2, r3
 8004d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d04:	785b      	ldrb	r3, [r3, #1]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d0c:	7812      	ldrb	r2, [r2, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	4a25      	ldr	r2, [pc, #148]	@ (8004da8 <find_volume+0x570>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d129      	bne.n	8004d6a <find_volume+0x532>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8004d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d18:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8004d1c:	061a      	lsls	r2, r3, #24
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d20:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8004d24:	041b      	lsls	r3, r3, #16
 8004d26:	431a      	orrs	r2, r3
 8004d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2a:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8004d2e:	021b      	lsls	r3, r3, #8
 8004d30:	4313      	orrs	r3, r2
 8004d32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d34:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004dac <find_volume+0x574>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d114      	bne.n	8004d6a <find_volume+0x532>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d42:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8004d46:	061a      	lsls	r2, r3, #24
 8004d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4a:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8004d4e:	041b      	lsls	r3, r3, #16
 8004d50:	431a      	orrs	r2, r3
 8004d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d54:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d5e:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8004d62:	431a      	orrs	r2, r3
 8004d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d66:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004d70:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8004d74:	4b0e      	ldr	r3, [pc, #56]	@ (8004db0 <find_volume+0x578>)
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004db0 <find_volume+0x578>)
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	4b0b      	ldr	r3, [pc, #44]	@ (8004db0 <find_volume+0x578>)
 8004d82:	881a      	ldrh	r2, [r3, #0]
 8004d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d86:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8004d92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d94:	f7fe fb38 	bl	8003408 <clear_lock>
#endif

	return FR_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3758      	adds	r7, #88	@ 0x58
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	ffffaa55 	.word	0xffffaa55
 8004da8:	41615252 	.word	0x41615252
 8004dac:	61417272 	.word	0x61417272
 8004db0:	200005b8 	.word	0x200005b8

08004db4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d022      	beq.n	8004e0c <validate+0x58>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01d      	beq.n	8004e0c <validate+0x58>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004dd6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <validate+0x58>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004de4:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d10c      	bne.n	8004e0c <validate+0x58>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004df8:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe f863 	bl	8002ec8 <disk_status>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8004e0c:	2309      	movs	r3, #9
 8004e0e:	e000      	b.n	8004e12 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	4613      	mov	r3, r2
 8004e28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8004e2e:	f107 0310 	add.w	r3, r7, #16
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fc50 	bl	80046d8 <get_ldnumber>
 8004e38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	da01      	bge.n	8004e44 <f_mount+0x28>
 8004e40:	230b      	movs	r3, #11
 8004e42:	e02d      	b.n	8004ea0 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004e44:	4a18      	ldr	r2, [pc, #96]	@ (8004ea8 <f_mount+0x8c>)
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d006      	beq.n	8004e62 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8004e54:	69b8      	ldr	r0, [r7, #24]
 8004e56:	f7fe fad7 	bl	8003408 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	490d      	ldr	r1, [pc, #52]	@ (8004ea8 <f_mount+0x8c>)
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <f_mount+0x6a>
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d001      	beq.n	8004e8a <f_mount+0x6e>
 8004e86:	2300      	movs	r3, #0
 8004e88:	e00a      	b.n	8004ea0 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8004e8a:	f107 0108 	add.w	r1, r7, #8
 8004e8e:	f107 030c 	add.w	r3, r7, #12
 8004e92:	2200      	movs	r2, #0
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fccf 	bl	8004838 <find_volume>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3720      	adds	r7, #32
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	200005b4 	.word	0x200005b4

08004eac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004eb8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8004ebc:	6018      	str	r0, [r3, #0]
 8004ebe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004ec2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8004ec6:	6019      	str	r1, [r3, #0]
 8004ec8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004ecc:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8004ed0:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8004ed2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004ed6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <f_open+0x38>
 8004ee0:	2309      	movs	r3, #9
 8004ee2:	e253      	b.n	800538c <f_open+0x4e0>
	fp->fs = 0;			/* Clear file object */
 8004ee4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004ee8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8004ef4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004ef8:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8004efc:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8004f00:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8004f04:	7812      	ldrb	r2, [r2, #0]
 8004f06:	f002 021f 	and.w	r2, r2, #31
 8004f0a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8004f0c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004f10:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	f107 0108 	add.w	r1, r7, #8
 8004f20:	f107 0320 	add.w	r3, r7, #32
 8004f24:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fc85 	bl	8004838 <find_volume>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8004f34:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f040 8225 	bne.w	8005388 <f_open+0x4dc>
		INIT_BUF(dj);
 8004f3e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004f42:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8004f46:	f107 0214 	add.w	r2, r7, #20
 8004f4a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8004f4e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004f52:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	f107 0320 	add.w	r3, r7, #32
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fb2c 	bl	80045bc <follow_path>
 8004f64:	4603      	mov	r3, r0
 8004f66:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		dir = dj.dir;
 8004f6a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004f6e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8004f72:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004f76:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004f7a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d11b      	bne.n	8004fba <f_open+0x10e>
			if (!dir)	/* Default directory itself */
 8004f82:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d103      	bne.n	8004f92 <f_open+0xe6>
				res = FR_INVALID_NAME;
 8004f8a:	2306      	movs	r3, #6
 8004f8c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8004f90:	e013      	b.n	8004fba <f_open+0x10e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004f92:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004f96:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	bf8c      	ite	hi
 8004fa0:	2301      	movhi	r3, #1
 8004fa2:	2300      	movls	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f107 0320 	add.w	r3, r7, #32
 8004fac:	4611      	mov	r1, r2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe f8a0 	bl	80030f4 <chk_lock>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004fba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004fbe:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	f003 031c 	and.w	r3, r3, #28
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80e6 	beq.w	800519a <f_open+0x2ee>
			if (res != FR_OK) {					/* No file, create new */
 8004fce:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d027      	beq.n	8005026 <f_open+0x17a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8004fd6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d10e      	bne.n	8004ffc <f_open+0x150>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004fde:	f7fe f8f5 	bl	80031cc <enq_lock>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <f_open+0x14a>
 8004fe8:	f107 0320 	add.w	r3, r7, #32
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff f942 	bl	8004276 <dir_register>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	e000      	b.n	8004ff8 <f_open+0x14c>
 8004ff6:	2312      	movs	r3, #18
 8004ff8:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004ffc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005000:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005004:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8005008:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 800500c:	7812      	ldrb	r2, [r2, #0]
 800500e:	f042 0208 	orr.w	r2, r2, #8
 8005012:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8005014:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005018:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800501c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005020:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8005024:	e017      	b.n	8005056 <f_open+0x1aa>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005026:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800502a:	330b      	adds	r3, #11
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	f003 0311 	and.w	r3, r3, #17
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <f_open+0x192>
					res = FR_DENIED;
 8005036:	2307      	movs	r3, #7
 8005038:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 800503c:	e00b      	b.n	8005056 <f_open+0x1aa>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800503e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005042:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <f_open+0x1aa>
						res = FR_EXIST;
 8005050:	2308      	movs	r3, #8
 8005052:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005056:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 80c1 	bne.w	80051e2 <f_open+0x336>
 8005060:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005064:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 80b7 	beq.w	80051e2 <f_open+0x336>
				dw = GET_FATTIME();				/* Created time */
 8005074:	f7fd f9f4 	bl	8002460 <get_fattime>
 8005078:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800507c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005080:	330e      	adds	r3, #14
 8005082:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800508e:	b29b      	uxth	r3, r3
 8005090:	0a1b      	lsrs	r3, r3, #8
 8005092:	b29a      	uxth	r2, r3
 8005094:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005098:	330f      	adds	r3, #15
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80050a2:	0c1a      	lsrs	r2, r3, #16
 80050a4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80050a8:	3310      	adds	r3, #16
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80050b2:	0e1a      	lsrs	r2, r3, #24
 80050b4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80050b8:	3311      	adds	r3, #17
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80050be:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80050c2:	330b      	adds	r3, #11
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80050c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80050cc:	331c      	adds	r3, #28
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80050d6:	331d      	adds	r3, #29
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80050e0:	331e      	adds	r3, #30
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80050ea:	331f      	adds	r3, #31
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80050f0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80050f4:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80050f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80050fc:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8005100:	4618      	mov	r0, r3
 8005102:	f7fe ffb8 	bl	8004076 <ld_clust>
 8005106:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800510a:	2100      	movs	r1, #0
 800510c:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8005110:	f7fe ffe0 	bl	80040d4 <st_clust>
				dj.fs->wflag = 1;
 8005114:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005118:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800511c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8005126:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800512a:	2b00      	cmp	r3, #0
 800512c:	d059      	beq.n	80051e2 <f_open+0x336>
					dw = dj.fs->winsect;
 800512e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005132:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8005136:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800513a:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800513e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
					res = remove_chain(dj.fs, cl);
 8005142:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005146:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800514a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800514e:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe fc8f 	bl	8003a76 <remove_chain>
 8005158:	4603      	mov	r3, r0
 800515a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
					if (res == FR_OK) {
 800515e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8005162:	2b00      	cmp	r3, #0
 8005164:	d13d      	bne.n	80051e2 <f_open+0x336>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005166:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800516a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800516e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005172:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8005176:	3a01      	subs	r2, #1
 8005178:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
						res = move_window(dj.fs, dw);
 800517c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005180:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8005184:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005188:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 800518c:	4618      	mov	r0, r3
 800518e:	f7fe f9ae 	bl	80034ee <move_window>
 8005192:	4603      	mov	r3, r0
 8005194:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8005198:	e023      	b.n	80051e2 <f_open+0x336>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800519a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d11f      	bne.n	80051e2 <f_open+0x336>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80051a2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80051a6:	330b      	adds	r3, #11
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <f_open+0x30e>
					res = FR_NO_FILE;
 80051b2:	2304      	movs	r3, #4
 80051b4:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80051b8:	e013      	b.n	80051e2 <f_open+0x336>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80051ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80051be:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <f_open+0x336>
 80051cc:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80051d0:	330b      	adds	r3, #11
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <f_open+0x336>
						res = FR_DENIED;
 80051dc:	2307      	movs	r3, #7
 80051de:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80051e2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d151      	bne.n	800528e <f_open+0x3e2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80051ea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80051ee:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <f_open+0x368>
				mode |= FA__WRITTEN;
 80051fc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005200:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005204:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8005208:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	f042 0220 	orr.w	r2, r2, #32
 8005212:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005214:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005218:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800521c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005220:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 8005224:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005228:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 8005232:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005236:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8005240:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005244:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005248:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b01      	cmp	r3, #1
 8005250:	bf8c      	ite	hi
 8005252:	2301      	movhi	r3, #1
 8005254:	2300      	movls	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	f107 0320 	add.w	r3, r7, #32
 800525e:	4611      	mov	r1, r2
 8005260:	4618      	mov	r0, r3
 8005262:	f7fd ffd7 	bl	8003214 <inc_lock>
 8005266:	4602      	mov	r2, r0
 8005268:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800526c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8005276:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800527a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <f_open+0x3e2>
 8005288:	2302      	movs	r3, #2
 800528a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800528e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8005292:	2b00      	cmp	r3, #0
 8005294:	d178      	bne.n	8005388 <f_open+0x4dc>
			fp->flag = mode;					/* File access mode */
 8005296:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800529a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80052a4:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 80052a8:	7812      	ldrb	r2, [r2, #0]
 80052aa:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 80052ae:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80052b2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80052be:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80052c2:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80052c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80052ca:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe fed1 	bl	8004076 <ld_clust>
 80052d4:	4602      	mov	r2, r0
 80052d6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80052da:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80052e4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80052e8:	331f      	adds	r3, #31
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	061a      	lsls	r2, r3, #24
 80052ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80052f2:	331e      	adds	r3, #30
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	431a      	orrs	r2, r3
 80052fa:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80052fe:	331d      	adds	r3, #29
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	4313      	orrs	r3, r2
 8005306:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 800530a:	321c      	adds	r2, #28
 800530c:	7812      	ldrb	r2, [r2, #0]
 800530e:	431a      	orrs	r2, r3
 8005310:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005314:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 800531e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005322:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2200      	movs	r2, #0
 800532a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 800532e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005332:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2200      	movs	r2, #0
 800533a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800533e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005342:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2200      	movs	r2, #0
 800534a:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800534e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005352:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8005356:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800535a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800535e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 8005368:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800536c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005376:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800537a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800537e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8005388:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 800538c:	4618      	mov	r0, r3
 800538e:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b08a      	sub	sp, #40	@ 0x28
 800539a:	af00      	add	r7, sp, #0
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	607a      	str	r2, [r7, #4]
 80053a2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff fd00 	bl	8004db4 <validate>
 80053b4:	4603      	mov	r3, r0
 80053b6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <f_write+0x2c>
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	e192      	b.n	80056e8 <f_write+0x352>
	if (fp->err)							/* Check error */
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80053d2:	e189      	b.n	80056e8 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80053e2:	2307      	movs	r3, #7
 80053e4:	e180      	b.n	80056e8 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	441a      	add	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80053f6:	429a      	cmp	r2, r3
 80053f8:	f080 8158 	bcs.w	80056ac <f_write+0x316>
 80053fc:	2300      	movs	r3, #0
 80053fe:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005400:	e154      	b.n	80056ac <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8005408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540c:	2b00      	cmp	r3, #0
 800540e:	f040 8114 	bne.w	800563a <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8005418:	0a5b      	lsrs	r3, r3, #9
 800541a:	b2da      	uxtb	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005422:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8005426:	3b01      	subs	r3, #1
 8005428:	b2db      	uxtb	r3, r3
 800542a:	4013      	ands	r3, r2
 800542c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800542e:	7dbb      	ldrb	r3, [r7, #22]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d151      	bne.n	80054d8 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10f      	bne.n	800545e <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d121      	bne.n	8005490 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005452:	2100      	movs	r1, #0
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe fb68 	bl	8003b2a <create_chain>
 800545a:	6278      	str	r0, [r7, #36]	@ 0x24
 800545c:	e018      	b.n	8005490 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800546e:	4619      	mov	r1, r3
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f7fe fbf7 	bl	8003c64 <clmt_clust>
 8005476:	6278      	str	r0, [r7, #36]	@ 0x24
 8005478:	e00a      	b.n	8005490 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f7fe fb4e 	bl	8003b2a <create_chain>
 800548e:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 810f 	beq.w	80056b6 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	2b01      	cmp	r3, #1
 800549c:	d105      	bne.n	80054aa <f_write+0x114>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80054a6:	2302      	movs	r3, #2
 80054a8:	e11e      	b.n	80056e8 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d105      	bne.n	80054be <f_write+0x128>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80054ba:	2301      	movs	r3, #1
 80054bc:	e114      	b.n	80056e8 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d103      	bne.n	80054d8 <f_write+0x142>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80054de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01d      	beq.n	8005522 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80054ec:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80054f0:	68f9      	ldr	r1, [r7, #12]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80054f8:	2301      	movs	r3, #1
 80054fa:	f7fd fd45 	bl	8002f88 <disk_write>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800550c:	2301      	movs	r3, #1
 800550e:	e0eb      	b.n	80056e8 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8005516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800551a:	b2da      	uxtb	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f7fe f8b7 	bl	80036a4 <clust2sect>
 8005536:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d105      	bne.n	800554a <f_write+0x1b4>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2202      	movs	r2, #2
 8005542:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8005546:	2302      	movs	r3, #2
 8005548:	e0ce      	b.n	80056e8 <f_write+0x352>
			sect += csect;
 800554a:	7dbb      	ldrb	r3, [r7, #22]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4413      	add	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	0a5b      	lsrs	r3, r3, #9
 8005556:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d048      	beq.n	80055f0 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800555e:	7dba      	ldrb	r2, [r7, #22]
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	4413      	add	r3, r2
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800556a:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800556e:	4293      	cmp	r3, r2
 8005570:	d908      	bls.n	8005584 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005578:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800557c:	461a      	mov	r2, r3
 800557e:	7dbb      	ldrb	r3, [r7, #22]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800558a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	69b9      	ldr	r1, [r7, #24]
 8005594:	f7fd fcf8 	bl	8002f88 <disk_write>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80055a6:	2301      	movs	r3, #1
 80055a8:	e09e      	b.n	80056e8 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d916      	bls.n	80055e8 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	025b      	lsls	r3, r3, #9
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4413      	add	r3, r2
 80055cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055d0:	4619      	mov	r1, r3
 80055d2:	f7fd fd17 	bl	8003004 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80055dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	025b      	lsls	r3, r3, #9
 80055ec:	623b      	str	r3, [r7, #32]
				continue;
 80055ee:	e047      	b.n	8005680 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d01a      	beq.n	8005632 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005608:	429a      	cmp	r2, r3
 800560a:	d212      	bcs.n	8005632 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005612:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	2301      	movs	r3, #1
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	f7fd fc94 	bl	8002f48 <disk_read>
 8005620:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800562e:	2301      	movs	r3, #1
 8005630:	e05a      	b.n	80056e8 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8005640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005644:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005648:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800564a:	6a3a      	ldr	r2, [r7, #32]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	429a      	cmp	r2, r3
 8005650:	d901      	bls.n	8005656 <f_write+0x2c0>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800565c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	6a3a      	ldr	r2, [r7, #32]
 8005666:	69b9      	ldr	r1, [r7, #24]
 8005668:	4618      	mov	r0, r3
 800566a:	f7fd fccb 	bl	8003004 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8005674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005678:	b2da      	uxtb	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	4413      	add	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	441a      	add	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	441a      	add	r2, r3
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f47f aea7 	bne.w	8005402 <f_write+0x6c>
 80056b4:	e000      	b.n	80056b8 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80056b6:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d905      	bls.n	80056d4 <f_write+0x33e>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80056da:	f043 0320 	orr.w	r3, r3, #32
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3728      	adds	r7, #40	@ 0x28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff fb5b 	bl	8004db4 <validate>
 80056fe:	4603      	mov	r3, r0
 8005700:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	2b00      	cmp	r3, #0
 8005706:	f040 80a8 	bne.w	800585a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80a0 	beq.w	800585a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8005720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	d019      	beq.n	800575c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800572e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800573a:	2301      	movs	r3, #1
 800573c:	f7fd fc24 	bl	8002f88 <disk_write>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005746:	2301      	movs	r3, #1
 8005748:	e088      	b.n	800585c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8005750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005754:	b2da      	uxtb	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f7fd febf 	bl	80034ee <move_window>
 8005770:	4603      	mov	r3, r0
 8005772:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d16f      	bne.n	800585a <f_sync+0x16a>
				dir = fp->dir_ptr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005780:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	330b      	adds	r3, #11
 8005786:	781a      	ldrb	r2, [r3, #0]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	330b      	adds	r3, #11
 800578c:	f042 0220 	orr.w	r2, r2, #32
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	331c      	adds	r3, #28
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	0a1b      	lsrs	r3, r3, #8
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	331d      	adds	r3, #29
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80057bc:	0c1a      	lsrs	r2, r3, #16
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	331e      	adds	r3, #30
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80057cc:	0e1a      	lsrs	r2, r3, #24
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	331f      	adds	r3, #31
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80057dc:	4619      	mov	r1, r3
 80057de:	6938      	ldr	r0, [r7, #16]
 80057e0:	f7fe fc78 	bl	80040d4 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80057e4:	f7fc fe3c 	bl	8002460 <get_fattime>
 80057e8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	3316      	adds	r3, #22
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	0a1b      	lsrs	r3, r3, #8
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	3317      	adds	r3, #23
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	0c1a      	lsrs	r2, r3, #16
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	3318      	adds	r3, #24
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	0e1a      	lsrs	r2, r3, #24
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	3319      	adds	r3, #25
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	3312      	adds	r3, #18
 8005820:	2200      	movs	r2, #0
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	3313      	adds	r3, #19
 8005828:	2200      	movs	r2, #0
 800582a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8005832:	f023 0320 	bic.w	r3, r3, #32
 8005836:	b2da      	uxtb	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005850:	4618      	mov	r0, r3
 8005852:	f7fd fe7a 	bl	800354a <sync_fs>
 8005856:	4603      	mov	r3, r0
 8005858:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800585a:	7dfb      	ldrb	r3, [r7, #23]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff ff3f 	bl	80056f0 <f_sync>
 8005872:	4603      	mov	r3, r0
 8005874:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d116      	bne.n	80058aa <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff fa99 	bl	8004db4 <validate>
 8005882:	4603      	mov	r3, r0
 8005884:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10e      	bne.n	80058aa <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8005892:	4618      	mov	r0, r3
 8005894:	f7fd fd74 	bl	8003380 <dec_lock>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d103      	bne.n	80058aa <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <f_opendir+0x14>
 80058c4:	2309      	movs	r3, #9
 80058c6:	e073      	b.n	80059b0 <f_opendir+0xfc>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 80058c8:	4639      	mov	r1, r7
 80058ca:	f107 0318 	add.w	r3, r7, #24
 80058ce:	2200      	movs	r2, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fe ffb1 	bl	8004838 <find_volume>
 80058d6:	4603      	mov	r3, r0
 80058d8:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 80058da:	7ffb      	ldrb	r3, [r7, #31]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d15f      	bne.n	80059a0 <f_opendir+0xec>
		dp->fs = fs;
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
		INIT_BUF(*dp);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f107 020c 	add.w	r2, r7, #12
 80058ee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fe fe60 	bl	80045bc <follow_path>
 80058fc:	4603      	mov	r3, r0
 80058fe:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8005900:	7ffb      	ldrb	r3, [r7, #31]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d147      	bne.n	8005996 <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800590c:	2b00      	cmp	r3, #0
 800590e:	d017      	beq.n	8005940 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005916:	330b      	adds	r3, #11
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00c      	beq.n	800593c <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f7fe fba2 	bl	8004076 <ld_clust>
 8005932:	4602      	mov	r2, r0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800593a:	e001      	b.n	8005940 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800593c:	2305      	movs	r3, #5
 800593e:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8005940:	7ffb      	ldrb	r3, [r7, #31]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d127      	bne.n	8005996 <f_opendir+0xe2>
				dp->id = fs->id;
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8005952:	2100      	movs	r1, #0
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fe f9b9 	bl	8003ccc <dir_sdi>
 800595a:	4603      	mov	r3, r0
 800595c:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 800595e:	7ffb      	ldrb	r3, [r7, #31]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d118      	bne.n	8005996 <f_opendir+0xe2>
					if (dp->sclust) {
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00f      	beq.n	800598e <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800596e:	2100      	movs	r1, #0
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7fd fc4f 	bl	8003214 <inc_lock>
 8005976:	4602      	mov	r2, r0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
						if (!dp->lockid)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 8005988:	2312      	movs	r3, #18
 800598a:	77fb      	strb	r3, [r7, #31]
 800598c:	e003      	b.n	8005996 <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005996:	7ffb      	ldrb	r3, [r7, #31]
 8005998:	2b04      	cmp	r3, #4
 800599a:	d101      	bne.n	80059a0 <f_opendir+0xec>
 800599c:	2305      	movs	r3, #5
 800599e:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 80059a0:	7ffb      	ldrb	r3, [r7, #31]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <f_opendir+0xfa>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	LEAVE_FF(fs, res);
 80059ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff f9f7 	bl	8004db4 <validate>
 80059c6:	4603      	mov	r3, r0
 80059c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d113      	bne.n	80059f8 <f_closedir+0x40>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <f_closedir+0x32>
			res = dec_lock(dp->lockid);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fd fccd 	bl	8003380 <dec_lock>
 80059e6:	4603      	mov	r3, r0
 80059e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d103      	bne.n	80059f8 <f_closedir+0x40>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b086      	sub	sp, #24
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff f9d1 	bl	8004db4 <validate>
 8005a12:	4603      	mov	r3, r0
 8005a14:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d133      	bne.n	8005a84 <f_readdir+0x82>
		if (!fno) {
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8005a22:	2100      	movs	r1, #0
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7fe f951 	bl	8003ccc <dir_sdi>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	75fb      	strb	r3, [r7, #23]
 8005a2e:	e029      	b.n	8005a84 <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f107 0208 	add.w	r2, r7, #8
 8005a36:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
			res = dir_read(dp, 0);			/* Read an item */
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fe fbbe 	bl	80041be <dir_read>
 8005a42:	4603      	mov	r3, r0
 8005a44:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d105      	bne.n	8005a58 <f_readdir+0x56>
				dp->sect = 0;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				res = FR_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d112      	bne.n	8005a84 <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7fe fc41 	bl	80042e8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8005a66:	2100      	movs	r1, #0
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7fe f9c3 	bl	8003df4 <dir_next>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d105      	bne.n	8005a84 <f_readdir+0x82>
					dp->sect = 0;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
					res = FR_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	2b0a      	cmp	r3, #10
 8005a9e:	d103      	bne.n	8005aa8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8005aa0:	210d      	movs	r1, #13
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff fff3 	bl	8005a8e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	db25      	blt.n	8005b00 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	60fa      	str	r2, [r7, #12]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	4413      	add	r3, r2
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b3c      	cmp	r3, #60	@ 0x3c
 8005ac6:	dd12      	ble.n	8005aee <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f103 010c 	add.w	r1, r3, #12
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	f107 0308 	add.w	r3, r7, #8
 8005ad8:	f7ff fc5d 	bl	8005396 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d101      	bne.n	8005ae8 <putc_bfd+0x5a>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e001      	b.n	8005aec <putc_bfd+0x5e>
 8005ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aec:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	609a      	str	r2, [r3, #8]
 8005afe:	e000      	b.n	8005b02 <putc_bfd+0x74>
	if (i < 0) return;
 8005b00:	bf00      	nop
}
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b097      	sub	sp, #92	@ 0x5c
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8005b1e:	e009      	b.n	8005b34 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	781a      	ldrb	r2, [r3, #0]
 8005b28:	f107 030c 	add.w	r3, r7, #12
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff ffad 	bl	8005a8e <putc_bfd>
	while (*str)			/* Put the string */
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f1      	bne.n	8005b20 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	db15      	blt.n	8005b6e <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	461c      	mov	r4, r3
 8005b48:	f107 0208 	add.w	r2, r7, #8
 8005b4c:	f107 030c 	add.w	r3, r7, #12
 8005b50:	f103 010c 	add.w	r1, r3, #12
 8005b54:	4613      	mov	r3, r2
 8005b56:	4622      	mov	r2, r4
 8005b58:	f7ff fc1d 	bl	8005396 <f_write>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d101      	bne.n	8005b6e <f_puts+0x66>
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	e001      	b.n	8005b72 <f_puts+0x6a>
	return EOF;
 8005b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	375c      	adds	r7, #92	@ 0x5c
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd90      	pop	{r4, r7, pc}
	...

08005b7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	4613      	mov	r3, r2
 8005b88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8005b92:	4b1e      	ldr	r3, [pc, #120]	@ (8005c0c <FATFS_LinkDriverEx+0x90>)
 8005b94:	7a5b      	ldrb	r3, [r3, #9]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d831      	bhi.n	8005c00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c0c <FATFS_LinkDriverEx+0x90>)
 8005b9e:	7a5b      	ldrb	r3, [r3, #9]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4b19      	ldr	r3, [pc, #100]	@ (8005c0c <FATFS_LinkDriverEx+0x90>)
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005baa:	4b18      	ldr	r3, [pc, #96]	@ (8005c0c <FATFS_LinkDriverEx+0x90>)
 8005bac:	7a5b      	ldrb	r3, [r3, #9]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	4a16      	ldr	r2, [pc, #88]	@ (8005c0c <FATFS_LinkDriverEx+0x90>)
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8005bba:	4b14      	ldr	r3, [pc, #80]	@ (8005c0c <FATFS_LinkDriverEx+0x90>)
 8005bbc:	7a5b      	ldrb	r3, [r3, #9]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4b12      	ldr	r3, [pc, #72]	@ (8005c0c <FATFS_LinkDriverEx+0x90>)
 8005bc4:	4413      	add	r3, r2
 8005bc6:	79fa      	ldrb	r2, [r7, #7]
 8005bc8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005bca:	4b10      	ldr	r3, [pc, #64]	@ (8005c0c <FATFS_LinkDriverEx+0x90>)
 8005bcc:	7a5b      	ldrb	r3, [r3, #9]
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	b2d1      	uxtb	r1, r2
 8005bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8005c0c <FATFS_LinkDriverEx+0x90>)
 8005bd6:	7251      	strb	r1, [r2, #9]
 8005bd8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005bda:	7dbb      	ldrb	r3, [r7, #22]
 8005bdc:	3330      	adds	r3, #48	@ 0x30
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	3301      	adds	r3, #1
 8005be8:	223a      	movs	r2, #58	@ 0x3a
 8005bea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	3302      	adds	r3, #2
 8005bf0:	222f      	movs	r2, #47	@ 0x2f
 8005bf2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	3303      	adds	r3, #3
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr
 8005c0c:	200005d4 	.word	0x200005d4

08005c10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff ffac 	bl	8005b7c <FATFS_LinkDriverEx>
 8005c24:	4603      	mov	r3, r0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <siprintf>:
 8005c30:	b40e      	push	{r1, r2, r3}
 8005c32:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005c36:	b510      	push	{r4, lr}
 8005c38:	2400      	movs	r4, #0
 8005c3a:	b09d      	sub	sp, #116	@ 0x74
 8005c3c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005c3e:	9002      	str	r0, [sp, #8]
 8005c40:	9006      	str	r0, [sp, #24]
 8005c42:	9107      	str	r1, [sp, #28]
 8005c44:	9104      	str	r1, [sp, #16]
 8005c46:	4809      	ldr	r0, [pc, #36]	@ (8005c6c <siprintf+0x3c>)
 8005c48:	4909      	ldr	r1, [pc, #36]	@ (8005c70 <siprintf+0x40>)
 8005c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c4e:	9105      	str	r1, [sp, #20]
 8005c50:	6800      	ldr	r0, [r0, #0]
 8005c52:	a902      	add	r1, sp, #8
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005c58:	f000 f992 	bl	8005f80 <_svfiprintf_r>
 8005c5c:	9b02      	ldr	r3, [sp, #8]
 8005c5e:	701c      	strb	r4, [r3, #0]
 8005c60:	b01d      	add	sp, #116	@ 0x74
 8005c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c66:	b003      	add	sp, #12
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20000024 	.word	0x20000024
 8005c70:	ffff0208 	.word	0xffff0208

08005c74 <memset>:
 8005c74:	4603      	mov	r3, r0
 8005c76:	4402      	add	r2, r0
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d100      	bne.n	8005c7e <memset+0xa>
 8005c7c:	4770      	bx	lr
 8005c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c82:	e7f9      	b.n	8005c78 <memset+0x4>

08005c84 <__errno>:
 8005c84:	4b01      	ldr	r3, [pc, #4]	@ (8005c8c <__errno+0x8>)
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000024 	.word	0x20000024

08005c90 <__libc_init_array>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	2600      	movs	r6, #0
 8005c94:	4d0c      	ldr	r5, [pc, #48]	@ (8005cc8 <__libc_init_array+0x38>)
 8005c96:	4c0d      	ldr	r4, [pc, #52]	@ (8005ccc <__libc_init_array+0x3c>)
 8005c98:	1b64      	subs	r4, r4, r5
 8005c9a:	10a4      	asrs	r4, r4, #2
 8005c9c:	42a6      	cmp	r6, r4
 8005c9e:	d109      	bne.n	8005cb4 <__libc_init_array+0x24>
 8005ca0:	f000 fc76 	bl	8006590 <_init>
 8005ca4:	2600      	movs	r6, #0
 8005ca6:	4d0a      	ldr	r5, [pc, #40]	@ (8005cd0 <__libc_init_array+0x40>)
 8005ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8005cd4 <__libc_init_array+0x44>)
 8005caa:	1b64      	subs	r4, r4, r5
 8005cac:	10a4      	asrs	r4, r4, #2
 8005cae:	42a6      	cmp	r6, r4
 8005cb0:	d105      	bne.n	8005cbe <__libc_init_array+0x2e>
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb8:	4798      	blx	r3
 8005cba:	3601      	adds	r6, #1
 8005cbc:	e7ee      	b.n	8005c9c <__libc_init_array+0xc>
 8005cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc2:	4798      	blx	r3
 8005cc4:	3601      	adds	r6, #1
 8005cc6:	e7f2      	b.n	8005cae <__libc_init_array+0x1e>
 8005cc8:	08006918 	.word	0x08006918
 8005ccc:	08006918 	.word	0x08006918
 8005cd0:	08006918 	.word	0x08006918
 8005cd4:	0800691c 	.word	0x0800691c

08005cd8 <__retarget_lock_acquire_recursive>:
 8005cd8:	4770      	bx	lr

08005cda <__retarget_lock_release_recursive>:
 8005cda:	4770      	bx	lr

08005cdc <_free_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	4605      	mov	r5, r0
 8005ce0:	2900      	cmp	r1, #0
 8005ce2:	d040      	beq.n	8005d66 <_free_r+0x8a>
 8005ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ce8:	1f0c      	subs	r4, r1, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	bfb8      	it	lt
 8005cee:	18e4      	addlt	r4, r4, r3
 8005cf0:	f000 f8de 	bl	8005eb0 <__malloc_lock>
 8005cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d68 <_free_r+0x8c>)
 8005cf6:	6813      	ldr	r3, [r2, #0]
 8005cf8:	b933      	cbnz	r3, 8005d08 <_free_r+0x2c>
 8005cfa:	6063      	str	r3, [r4, #4]
 8005cfc:	6014      	str	r4, [r2, #0]
 8005cfe:	4628      	mov	r0, r5
 8005d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d04:	f000 b8da 	b.w	8005ebc <__malloc_unlock>
 8005d08:	42a3      	cmp	r3, r4
 8005d0a:	d908      	bls.n	8005d1e <_free_r+0x42>
 8005d0c:	6820      	ldr	r0, [r4, #0]
 8005d0e:	1821      	adds	r1, r4, r0
 8005d10:	428b      	cmp	r3, r1
 8005d12:	bf01      	itttt	eq
 8005d14:	6819      	ldreq	r1, [r3, #0]
 8005d16:	685b      	ldreq	r3, [r3, #4]
 8005d18:	1809      	addeq	r1, r1, r0
 8005d1a:	6021      	streq	r1, [r4, #0]
 8005d1c:	e7ed      	b.n	8005cfa <_free_r+0x1e>
 8005d1e:	461a      	mov	r2, r3
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	b10b      	cbz	r3, 8005d28 <_free_r+0x4c>
 8005d24:	42a3      	cmp	r3, r4
 8005d26:	d9fa      	bls.n	8005d1e <_free_r+0x42>
 8005d28:	6811      	ldr	r1, [r2, #0]
 8005d2a:	1850      	adds	r0, r2, r1
 8005d2c:	42a0      	cmp	r0, r4
 8005d2e:	d10b      	bne.n	8005d48 <_free_r+0x6c>
 8005d30:	6820      	ldr	r0, [r4, #0]
 8005d32:	4401      	add	r1, r0
 8005d34:	1850      	adds	r0, r2, r1
 8005d36:	4283      	cmp	r3, r0
 8005d38:	6011      	str	r1, [r2, #0]
 8005d3a:	d1e0      	bne.n	8005cfe <_free_r+0x22>
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	4408      	add	r0, r1
 8005d42:	6010      	str	r0, [r2, #0]
 8005d44:	6053      	str	r3, [r2, #4]
 8005d46:	e7da      	b.n	8005cfe <_free_r+0x22>
 8005d48:	d902      	bls.n	8005d50 <_free_r+0x74>
 8005d4a:	230c      	movs	r3, #12
 8005d4c:	602b      	str	r3, [r5, #0]
 8005d4e:	e7d6      	b.n	8005cfe <_free_r+0x22>
 8005d50:	6820      	ldr	r0, [r4, #0]
 8005d52:	1821      	adds	r1, r4, r0
 8005d54:	428b      	cmp	r3, r1
 8005d56:	bf01      	itttt	eq
 8005d58:	6819      	ldreq	r1, [r3, #0]
 8005d5a:	685b      	ldreq	r3, [r3, #4]
 8005d5c:	1809      	addeq	r1, r1, r0
 8005d5e:	6021      	streq	r1, [r4, #0]
 8005d60:	6063      	str	r3, [r4, #4]
 8005d62:	6054      	str	r4, [r2, #4]
 8005d64:	e7cb      	b.n	8005cfe <_free_r+0x22>
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	20000724 	.word	0x20000724

08005d6c <sbrk_aligned>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	4e0f      	ldr	r6, [pc, #60]	@ (8005dac <sbrk_aligned+0x40>)
 8005d70:	460c      	mov	r4, r1
 8005d72:	6831      	ldr	r1, [r6, #0]
 8005d74:	4605      	mov	r5, r0
 8005d76:	b911      	cbnz	r1, 8005d7e <sbrk_aligned+0x12>
 8005d78:	f000 fba8 	bl	80064cc <_sbrk_r>
 8005d7c:	6030      	str	r0, [r6, #0]
 8005d7e:	4621      	mov	r1, r4
 8005d80:	4628      	mov	r0, r5
 8005d82:	f000 fba3 	bl	80064cc <_sbrk_r>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	d103      	bne.n	8005d92 <sbrk_aligned+0x26>
 8005d8a:	f04f 34ff 	mov.w	r4, #4294967295
 8005d8e:	4620      	mov	r0, r4
 8005d90:	bd70      	pop	{r4, r5, r6, pc}
 8005d92:	1cc4      	adds	r4, r0, #3
 8005d94:	f024 0403 	bic.w	r4, r4, #3
 8005d98:	42a0      	cmp	r0, r4
 8005d9a:	d0f8      	beq.n	8005d8e <sbrk_aligned+0x22>
 8005d9c:	1a21      	subs	r1, r4, r0
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 fb94 	bl	80064cc <_sbrk_r>
 8005da4:	3001      	adds	r0, #1
 8005da6:	d1f2      	bne.n	8005d8e <sbrk_aligned+0x22>
 8005da8:	e7ef      	b.n	8005d8a <sbrk_aligned+0x1e>
 8005daa:	bf00      	nop
 8005dac:	20000720 	.word	0x20000720

08005db0 <_malloc_r>:
 8005db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db4:	1ccd      	adds	r5, r1, #3
 8005db6:	f025 0503 	bic.w	r5, r5, #3
 8005dba:	3508      	adds	r5, #8
 8005dbc:	2d0c      	cmp	r5, #12
 8005dbe:	bf38      	it	cc
 8005dc0:	250c      	movcc	r5, #12
 8005dc2:	2d00      	cmp	r5, #0
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	db01      	blt.n	8005dcc <_malloc_r+0x1c>
 8005dc8:	42a9      	cmp	r1, r5
 8005dca:	d904      	bls.n	8005dd6 <_malloc_r+0x26>
 8005dcc:	230c      	movs	r3, #12
 8005dce:	6033      	str	r3, [r6, #0]
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005eac <_malloc_r+0xfc>
 8005dda:	f000 f869 	bl	8005eb0 <__malloc_lock>
 8005dde:	f8d8 3000 	ldr.w	r3, [r8]
 8005de2:	461c      	mov	r4, r3
 8005de4:	bb44      	cbnz	r4, 8005e38 <_malloc_r+0x88>
 8005de6:	4629      	mov	r1, r5
 8005de8:	4630      	mov	r0, r6
 8005dea:	f7ff ffbf 	bl	8005d6c <sbrk_aligned>
 8005dee:	1c43      	adds	r3, r0, #1
 8005df0:	4604      	mov	r4, r0
 8005df2:	d158      	bne.n	8005ea6 <_malloc_r+0xf6>
 8005df4:	f8d8 4000 	ldr.w	r4, [r8]
 8005df8:	4627      	mov	r7, r4
 8005dfa:	2f00      	cmp	r7, #0
 8005dfc:	d143      	bne.n	8005e86 <_malloc_r+0xd6>
 8005dfe:	2c00      	cmp	r4, #0
 8005e00:	d04b      	beq.n	8005e9a <_malloc_r+0xea>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	4639      	mov	r1, r7
 8005e06:	4630      	mov	r0, r6
 8005e08:	eb04 0903 	add.w	r9, r4, r3
 8005e0c:	f000 fb5e 	bl	80064cc <_sbrk_r>
 8005e10:	4581      	cmp	r9, r0
 8005e12:	d142      	bne.n	8005e9a <_malloc_r+0xea>
 8005e14:	6821      	ldr	r1, [r4, #0]
 8005e16:	4630      	mov	r0, r6
 8005e18:	1a6d      	subs	r5, r5, r1
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	f7ff ffa6 	bl	8005d6c <sbrk_aligned>
 8005e20:	3001      	adds	r0, #1
 8005e22:	d03a      	beq.n	8005e9a <_malloc_r+0xea>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	442b      	add	r3, r5
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	bb62      	cbnz	r2, 8005e8c <_malloc_r+0xdc>
 8005e32:	f8c8 7000 	str.w	r7, [r8]
 8005e36:	e00f      	b.n	8005e58 <_malloc_r+0xa8>
 8005e38:	6822      	ldr	r2, [r4, #0]
 8005e3a:	1b52      	subs	r2, r2, r5
 8005e3c:	d420      	bmi.n	8005e80 <_malloc_r+0xd0>
 8005e3e:	2a0b      	cmp	r2, #11
 8005e40:	d917      	bls.n	8005e72 <_malloc_r+0xc2>
 8005e42:	1961      	adds	r1, r4, r5
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	6025      	str	r5, [r4, #0]
 8005e48:	bf18      	it	ne
 8005e4a:	6059      	strne	r1, [r3, #4]
 8005e4c:	6863      	ldr	r3, [r4, #4]
 8005e4e:	bf08      	it	eq
 8005e50:	f8c8 1000 	streq.w	r1, [r8]
 8005e54:	5162      	str	r2, [r4, r5]
 8005e56:	604b      	str	r3, [r1, #4]
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f000 f82f 	bl	8005ebc <__malloc_unlock>
 8005e5e:	f104 000b 	add.w	r0, r4, #11
 8005e62:	1d23      	adds	r3, r4, #4
 8005e64:	f020 0007 	bic.w	r0, r0, #7
 8005e68:	1ac2      	subs	r2, r0, r3
 8005e6a:	bf1c      	itt	ne
 8005e6c:	1a1b      	subne	r3, r3, r0
 8005e6e:	50a3      	strne	r3, [r4, r2]
 8005e70:	e7af      	b.n	8005dd2 <_malloc_r+0x22>
 8005e72:	6862      	ldr	r2, [r4, #4]
 8005e74:	42a3      	cmp	r3, r4
 8005e76:	bf0c      	ite	eq
 8005e78:	f8c8 2000 	streq.w	r2, [r8]
 8005e7c:	605a      	strne	r2, [r3, #4]
 8005e7e:	e7eb      	b.n	8005e58 <_malloc_r+0xa8>
 8005e80:	4623      	mov	r3, r4
 8005e82:	6864      	ldr	r4, [r4, #4]
 8005e84:	e7ae      	b.n	8005de4 <_malloc_r+0x34>
 8005e86:	463c      	mov	r4, r7
 8005e88:	687f      	ldr	r7, [r7, #4]
 8005e8a:	e7b6      	b.n	8005dfa <_malloc_r+0x4a>
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	d1fb      	bne.n	8005e8c <_malloc_r+0xdc>
 8005e94:	2300      	movs	r3, #0
 8005e96:	6053      	str	r3, [r2, #4]
 8005e98:	e7de      	b.n	8005e58 <_malloc_r+0xa8>
 8005e9a:	230c      	movs	r3, #12
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	6033      	str	r3, [r6, #0]
 8005ea0:	f000 f80c 	bl	8005ebc <__malloc_unlock>
 8005ea4:	e794      	b.n	8005dd0 <_malloc_r+0x20>
 8005ea6:	6005      	str	r5, [r0, #0]
 8005ea8:	e7d6      	b.n	8005e58 <_malloc_r+0xa8>
 8005eaa:	bf00      	nop
 8005eac:	20000724 	.word	0x20000724

08005eb0 <__malloc_lock>:
 8005eb0:	4801      	ldr	r0, [pc, #4]	@ (8005eb8 <__malloc_lock+0x8>)
 8005eb2:	f7ff bf11 	b.w	8005cd8 <__retarget_lock_acquire_recursive>
 8005eb6:	bf00      	nop
 8005eb8:	2000071c 	.word	0x2000071c

08005ebc <__malloc_unlock>:
 8005ebc:	4801      	ldr	r0, [pc, #4]	@ (8005ec4 <__malloc_unlock+0x8>)
 8005ebe:	f7ff bf0c 	b.w	8005cda <__retarget_lock_release_recursive>
 8005ec2:	bf00      	nop
 8005ec4:	2000071c 	.word	0x2000071c

08005ec8 <__ssputs_r>:
 8005ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ecc:	461f      	mov	r7, r3
 8005ece:	688e      	ldr	r6, [r1, #8]
 8005ed0:	4682      	mov	sl, r0
 8005ed2:	42be      	cmp	r6, r7
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	4690      	mov	r8, r2
 8005ed8:	680b      	ldr	r3, [r1, #0]
 8005eda:	d82d      	bhi.n	8005f38 <__ssputs_r+0x70>
 8005edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ee0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ee4:	d026      	beq.n	8005f34 <__ssputs_r+0x6c>
 8005ee6:	6965      	ldr	r5, [r4, #20]
 8005ee8:	6909      	ldr	r1, [r1, #16]
 8005eea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eee:	eba3 0901 	sub.w	r9, r3, r1
 8005ef2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ef6:	1c7b      	adds	r3, r7, #1
 8005ef8:	444b      	add	r3, r9
 8005efa:	106d      	asrs	r5, r5, #1
 8005efc:	429d      	cmp	r5, r3
 8005efe:	bf38      	it	cc
 8005f00:	461d      	movcc	r5, r3
 8005f02:	0553      	lsls	r3, r2, #21
 8005f04:	d527      	bpl.n	8005f56 <__ssputs_r+0x8e>
 8005f06:	4629      	mov	r1, r5
 8005f08:	f7ff ff52 	bl	8005db0 <_malloc_r>
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	b360      	cbz	r0, 8005f6a <__ssputs_r+0xa2>
 8005f10:	464a      	mov	r2, r9
 8005f12:	6921      	ldr	r1, [r4, #16]
 8005f14:	f000 faf8 	bl	8006508 <memcpy>
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f22:	81a3      	strh	r3, [r4, #12]
 8005f24:	6126      	str	r6, [r4, #16]
 8005f26:	444e      	add	r6, r9
 8005f28:	6026      	str	r6, [r4, #0]
 8005f2a:	463e      	mov	r6, r7
 8005f2c:	6165      	str	r5, [r4, #20]
 8005f2e:	eba5 0509 	sub.w	r5, r5, r9
 8005f32:	60a5      	str	r5, [r4, #8]
 8005f34:	42be      	cmp	r6, r7
 8005f36:	d900      	bls.n	8005f3a <__ssputs_r+0x72>
 8005f38:	463e      	mov	r6, r7
 8005f3a:	4632      	mov	r2, r6
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	6820      	ldr	r0, [r4, #0]
 8005f40:	f000 faaa 	bl	8006498 <memmove>
 8005f44:	2000      	movs	r0, #0
 8005f46:	68a3      	ldr	r3, [r4, #8]
 8005f48:	1b9b      	subs	r3, r3, r6
 8005f4a:	60a3      	str	r3, [r4, #8]
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	4433      	add	r3, r6
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f56:	462a      	mov	r2, r5
 8005f58:	f000 fae4 	bl	8006524 <_realloc_r>
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d1e0      	bne.n	8005f24 <__ssputs_r+0x5c>
 8005f62:	4650      	mov	r0, sl
 8005f64:	6921      	ldr	r1, [r4, #16]
 8005f66:	f7ff feb9 	bl	8005cdc <_free_r>
 8005f6a:	230c      	movs	r3, #12
 8005f6c:	f8ca 3000 	str.w	r3, [sl]
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	f04f 30ff 	mov.w	r0, #4294967295
 8005f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f7a:	81a3      	strh	r3, [r4, #12]
 8005f7c:	e7e9      	b.n	8005f52 <__ssputs_r+0x8a>
	...

08005f80 <_svfiprintf_r>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	4698      	mov	r8, r3
 8005f86:	898b      	ldrh	r3, [r1, #12]
 8005f88:	4607      	mov	r7, r0
 8005f8a:	061b      	lsls	r3, r3, #24
 8005f8c:	460d      	mov	r5, r1
 8005f8e:	4614      	mov	r4, r2
 8005f90:	b09d      	sub	sp, #116	@ 0x74
 8005f92:	d510      	bpl.n	8005fb6 <_svfiprintf_r+0x36>
 8005f94:	690b      	ldr	r3, [r1, #16]
 8005f96:	b973      	cbnz	r3, 8005fb6 <_svfiprintf_r+0x36>
 8005f98:	2140      	movs	r1, #64	@ 0x40
 8005f9a:	f7ff ff09 	bl	8005db0 <_malloc_r>
 8005f9e:	6028      	str	r0, [r5, #0]
 8005fa0:	6128      	str	r0, [r5, #16]
 8005fa2:	b930      	cbnz	r0, 8005fb2 <_svfiprintf_r+0x32>
 8005fa4:	230c      	movs	r3, #12
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	b01d      	add	sp, #116	@ 0x74
 8005fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb2:	2340      	movs	r3, #64	@ 0x40
 8005fb4:	616b      	str	r3, [r5, #20]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fba:	2320      	movs	r3, #32
 8005fbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fc0:	2330      	movs	r3, #48	@ 0x30
 8005fc2:	f04f 0901 	mov.w	r9, #1
 8005fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006164 <_svfiprintf_r+0x1e4>
 8005fce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fd2:	4623      	mov	r3, r4
 8005fd4:	469a      	mov	sl, r3
 8005fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fda:	b10a      	cbz	r2, 8005fe0 <_svfiprintf_r+0x60>
 8005fdc:	2a25      	cmp	r2, #37	@ 0x25
 8005fde:	d1f9      	bne.n	8005fd4 <_svfiprintf_r+0x54>
 8005fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8005fe4:	d00b      	beq.n	8005ffe <_svfiprintf_r+0x7e>
 8005fe6:	465b      	mov	r3, fp
 8005fe8:	4622      	mov	r2, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	4638      	mov	r0, r7
 8005fee:	f7ff ff6b 	bl	8005ec8 <__ssputs_r>
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	f000 80a7 	beq.w	8006146 <_svfiprintf_r+0x1c6>
 8005ff8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ffa:	445a      	add	r2, fp
 8005ffc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 809f 	beq.w	8006146 <_svfiprintf_r+0x1c6>
 8006008:	2300      	movs	r3, #0
 800600a:	f04f 32ff 	mov.w	r2, #4294967295
 800600e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006012:	f10a 0a01 	add.w	sl, sl, #1
 8006016:	9304      	str	r3, [sp, #16]
 8006018:	9307      	str	r3, [sp, #28]
 800601a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800601e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006020:	4654      	mov	r4, sl
 8006022:	2205      	movs	r2, #5
 8006024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006028:	484e      	ldr	r0, [pc, #312]	@ (8006164 <_svfiprintf_r+0x1e4>)
 800602a:	f000 fa5f 	bl	80064ec <memchr>
 800602e:	9a04      	ldr	r2, [sp, #16]
 8006030:	b9d8      	cbnz	r0, 800606a <_svfiprintf_r+0xea>
 8006032:	06d0      	lsls	r0, r2, #27
 8006034:	bf44      	itt	mi
 8006036:	2320      	movmi	r3, #32
 8006038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800603c:	0711      	lsls	r1, r2, #28
 800603e:	bf44      	itt	mi
 8006040:	232b      	movmi	r3, #43	@ 0x2b
 8006042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006046:	f89a 3000 	ldrb.w	r3, [sl]
 800604a:	2b2a      	cmp	r3, #42	@ 0x2a
 800604c:	d015      	beq.n	800607a <_svfiprintf_r+0xfa>
 800604e:	4654      	mov	r4, sl
 8006050:	2000      	movs	r0, #0
 8006052:	f04f 0c0a 	mov.w	ip, #10
 8006056:	9a07      	ldr	r2, [sp, #28]
 8006058:	4621      	mov	r1, r4
 800605a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800605e:	3b30      	subs	r3, #48	@ 0x30
 8006060:	2b09      	cmp	r3, #9
 8006062:	d94b      	bls.n	80060fc <_svfiprintf_r+0x17c>
 8006064:	b1b0      	cbz	r0, 8006094 <_svfiprintf_r+0x114>
 8006066:	9207      	str	r2, [sp, #28]
 8006068:	e014      	b.n	8006094 <_svfiprintf_r+0x114>
 800606a:	eba0 0308 	sub.w	r3, r0, r8
 800606e:	fa09 f303 	lsl.w	r3, r9, r3
 8006072:	4313      	orrs	r3, r2
 8006074:	46a2      	mov	sl, r4
 8006076:	9304      	str	r3, [sp, #16]
 8006078:	e7d2      	b.n	8006020 <_svfiprintf_r+0xa0>
 800607a:	9b03      	ldr	r3, [sp, #12]
 800607c:	1d19      	adds	r1, r3, #4
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	9103      	str	r1, [sp, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfbb      	ittet	lt
 8006086:	425b      	neglt	r3, r3
 8006088:	f042 0202 	orrlt.w	r2, r2, #2
 800608c:	9307      	strge	r3, [sp, #28]
 800608e:	9307      	strlt	r3, [sp, #28]
 8006090:	bfb8      	it	lt
 8006092:	9204      	strlt	r2, [sp, #16]
 8006094:	7823      	ldrb	r3, [r4, #0]
 8006096:	2b2e      	cmp	r3, #46	@ 0x2e
 8006098:	d10a      	bne.n	80060b0 <_svfiprintf_r+0x130>
 800609a:	7863      	ldrb	r3, [r4, #1]
 800609c:	2b2a      	cmp	r3, #42	@ 0x2a
 800609e:	d132      	bne.n	8006106 <_svfiprintf_r+0x186>
 80060a0:	9b03      	ldr	r3, [sp, #12]
 80060a2:	3402      	adds	r4, #2
 80060a4:	1d1a      	adds	r2, r3, #4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	9203      	str	r2, [sp, #12]
 80060aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060ae:	9305      	str	r3, [sp, #20]
 80060b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006168 <_svfiprintf_r+0x1e8>
 80060b4:	2203      	movs	r2, #3
 80060b6:	4650      	mov	r0, sl
 80060b8:	7821      	ldrb	r1, [r4, #0]
 80060ba:	f000 fa17 	bl	80064ec <memchr>
 80060be:	b138      	cbz	r0, 80060d0 <_svfiprintf_r+0x150>
 80060c0:	2240      	movs	r2, #64	@ 0x40
 80060c2:	9b04      	ldr	r3, [sp, #16]
 80060c4:	eba0 000a 	sub.w	r0, r0, sl
 80060c8:	4082      	lsls	r2, r0
 80060ca:	4313      	orrs	r3, r2
 80060cc:	3401      	adds	r4, #1
 80060ce:	9304      	str	r3, [sp, #16]
 80060d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d4:	2206      	movs	r2, #6
 80060d6:	4825      	ldr	r0, [pc, #148]	@ (800616c <_svfiprintf_r+0x1ec>)
 80060d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060dc:	f000 fa06 	bl	80064ec <memchr>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d036      	beq.n	8006152 <_svfiprintf_r+0x1d2>
 80060e4:	4b22      	ldr	r3, [pc, #136]	@ (8006170 <_svfiprintf_r+0x1f0>)
 80060e6:	bb1b      	cbnz	r3, 8006130 <_svfiprintf_r+0x1b0>
 80060e8:	9b03      	ldr	r3, [sp, #12]
 80060ea:	3307      	adds	r3, #7
 80060ec:	f023 0307 	bic.w	r3, r3, #7
 80060f0:	3308      	adds	r3, #8
 80060f2:	9303      	str	r3, [sp, #12]
 80060f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f6:	4433      	add	r3, r6
 80060f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80060fa:	e76a      	b.n	8005fd2 <_svfiprintf_r+0x52>
 80060fc:	460c      	mov	r4, r1
 80060fe:	2001      	movs	r0, #1
 8006100:	fb0c 3202 	mla	r2, ip, r2, r3
 8006104:	e7a8      	b.n	8006058 <_svfiprintf_r+0xd8>
 8006106:	2300      	movs	r3, #0
 8006108:	f04f 0c0a 	mov.w	ip, #10
 800610c:	4619      	mov	r1, r3
 800610e:	3401      	adds	r4, #1
 8006110:	9305      	str	r3, [sp, #20]
 8006112:	4620      	mov	r0, r4
 8006114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006118:	3a30      	subs	r2, #48	@ 0x30
 800611a:	2a09      	cmp	r2, #9
 800611c:	d903      	bls.n	8006126 <_svfiprintf_r+0x1a6>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0c6      	beq.n	80060b0 <_svfiprintf_r+0x130>
 8006122:	9105      	str	r1, [sp, #20]
 8006124:	e7c4      	b.n	80060b0 <_svfiprintf_r+0x130>
 8006126:	4604      	mov	r4, r0
 8006128:	2301      	movs	r3, #1
 800612a:	fb0c 2101 	mla	r1, ip, r1, r2
 800612e:	e7f0      	b.n	8006112 <_svfiprintf_r+0x192>
 8006130:	ab03      	add	r3, sp, #12
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	462a      	mov	r2, r5
 8006136:	4638      	mov	r0, r7
 8006138:	4b0e      	ldr	r3, [pc, #56]	@ (8006174 <_svfiprintf_r+0x1f4>)
 800613a:	a904      	add	r1, sp, #16
 800613c:	f3af 8000 	nop.w
 8006140:	1c42      	adds	r2, r0, #1
 8006142:	4606      	mov	r6, r0
 8006144:	d1d6      	bne.n	80060f4 <_svfiprintf_r+0x174>
 8006146:	89ab      	ldrh	r3, [r5, #12]
 8006148:	065b      	lsls	r3, r3, #25
 800614a:	f53f af2d 	bmi.w	8005fa8 <_svfiprintf_r+0x28>
 800614e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006150:	e72c      	b.n	8005fac <_svfiprintf_r+0x2c>
 8006152:	ab03      	add	r3, sp, #12
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	462a      	mov	r2, r5
 8006158:	4638      	mov	r0, r7
 800615a:	4b06      	ldr	r3, [pc, #24]	@ (8006174 <_svfiprintf_r+0x1f4>)
 800615c:	a904      	add	r1, sp, #16
 800615e:	f000 f87d 	bl	800625c <_printf_i>
 8006162:	e7ed      	b.n	8006140 <_svfiprintf_r+0x1c0>
 8006164:	080068dc 	.word	0x080068dc
 8006168:	080068e2 	.word	0x080068e2
 800616c:	080068e6 	.word	0x080068e6
 8006170:	00000000 	.word	0x00000000
 8006174:	08005ec9 	.word	0x08005ec9

08006178 <_printf_common>:
 8006178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800617c:	4616      	mov	r6, r2
 800617e:	4698      	mov	r8, r3
 8006180:	688a      	ldr	r2, [r1, #8]
 8006182:	690b      	ldr	r3, [r1, #16]
 8006184:	4607      	mov	r7, r0
 8006186:	4293      	cmp	r3, r2
 8006188:	bfb8      	it	lt
 800618a:	4613      	movlt	r3, r2
 800618c:	6033      	str	r3, [r6, #0]
 800618e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006192:	460c      	mov	r4, r1
 8006194:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006198:	b10a      	cbz	r2, 800619e <_printf_common+0x26>
 800619a:	3301      	adds	r3, #1
 800619c:	6033      	str	r3, [r6, #0]
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	0699      	lsls	r1, r3, #26
 80061a2:	bf42      	ittt	mi
 80061a4:	6833      	ldrmi	r3, [r6, #0]
 80061a6:	3302      	addmi	r3, #2
 80061a8:	6033      	strmi	r3, [r6, #0]
 80061aa:	6825      	ldr	r5, [r4, #0]
 80061ac:	f015 0506 	ands.w	r5, r5, #6
 80061b0:	d106      	bne.n	80061c0 <_printf_common+0x48>
 80061b2:	f104 0a19 	add.w	sl, r4, #25
 80061b6:	68e3      	ldr	r3, [r4, #12]
 80061b8:	6832      	ldr	r2, [r6, #0]
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	42ab      	cmp	r3, r5
 80061be:	dc2b      	bgt.n	8006218 <_printf_common+0xa0>
 80061c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061c4:	6822      	ldr	r2, [r4, #0]
 80061c6:	3b00      	subs	r3, #0
 80061c8:	bf18      	it	ne
 80061ca:	2301      	movne	r3, #1
 80061cc:	0692      	lsls	r2, r2, #26
 80061ce:	d430      	bmi.n	8006232 <_printf_common+0xba>
 80061d0:	4641      	mov	r1, r8
 80061d2:	4638      	mov	r0, r7
 80061d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061d8:	47c8      	blx	r9
 80061da:	3001      	adds	r0, #1
 80061dc:	d023      	beq.n	8006226 <_printf_common+0xae>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	6922      	ldr	r2, [r4, #16]
 80061e2:	f003 0306 	and.w	r3, r3, #6
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	bf14      	ite	ne
 80061ea:	2500      	movne	r5, #0
 80061ec:	6833      	ldreq	r3, [r6, #0]
 80061ee:	f04f 0600 	mov.w	r6, #0
 80061f2:	bf08      	it	eq
 80061f4:	68e5      	ldreq	r5, [r4, #12]
 80061f6:	f104 041a 	add.w	r4, r4, #26
 80061fa:	bf08      	it	eq
 80061fc:	1aed      	subeq	r5, r5, r3
 80061fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006202:	bf08      	it	eq
 8006204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006208:	4293      	cmp	r3, r2
 800620a:	bfc4      	itt	gt
 800620c:	1a9b      	subgt	r3, r3, r2
 800620e:	18ed      	addgt	r5, r5, r3
 8006210:	42b5      	cmp	r5, r6
 8006212:	d11a      	bne.n	800624a <_printf_common+0xd2>
 8006214:	2000      	movs	r0, #0
 8006216:	e008      	b.n	800622a <_printf_common+0xb2>
 8006218:	2301      	movs	r3, #1
 800621a:	4652      	mov	r2, sl
 800621c:	4641      	mov	r1, r8
 800621e:	4638      	mov	r0, r7
 8006220:	47c8      	blx	r9
 8006222:	3001      	adds	r0, #1
 8006224:	d103      	bne.n	800622e <_printf_common+0xb6>
 8006226:	f04f 30ff 	mov.w	r0, #4294967295
 800622a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622e:	3501      	adds	r5, #1
 8006230:	e7c1      	b.n	80061b6 <_printf_common+0x3e>
 8006232:	2030      	movs	r0, #48	@ 0x30
 8006234:	18e1      	adds	r1, r4, r3
 8006236:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006240:	4422      	add	r2, r4
 8006242:	3302      	adds	r3, #2
 8006244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006248:	e7c2      	b.n	80061d0 <_printf_common+0x58>
 800624a:	2301      	movs	r3, #1
 800624c:	4622      	mov	r2, r4
 800624e:	4641      	mov	r1, r8
 8006250:	4638      	mov	r0, r7
 8006252:	47c8      	blx	r9
 8006254:	3001      	adds	r0, #1
 8006256:	d0e6      	beq.n	8006226 <_printf_common+0xae>
 8006258:	3601      	adds	r6, #1
 800625a:	e7d9      	b.n	8006210 <_printf_common+0x98>

0800625c <_printf_i>:
 800625c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006260:	7e0f      	ldrb	r7, [r1, #24]
 8006262:	4691      	mov	r9, r2
 8006264:	2f78      	cmp	r7, #120	@ 0x78
 8006266:	4680      	mov	r8, r0
 8006268:	460c      	mov	r4, r1
 800626a:	469a      	mov	sl, r3
 800626c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800626e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006272:	d807      	bhi.n	8006284 <_printf_i+0x28>
 8006274:	2f62      	cmp	r7, #98	@ 0x62
 8006276:	d80a      	bhi.n	800628e <_printf_i+0x32>
 8006278:	2f00      	cmp	r7, #0
 800627a:	f000 80d1 	beq.w	8006420 <_printf_i+0x1c4>
 800627e:	2f58      	cmp	r7, #88	@ 0x58
 8006280:	f000 80b8 	beq.w	80063f4 <_printf_i+0x198>
 8006284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006288:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800628c:	e03a      	b.n	8006304 <_printf_i+0xa8>
 800628e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006292:	2b15      	cmp	r3, #21
 8006294:	d8f6      	bhi.n	8006284 <_printf_i+0x28>
 8006296:	a101      	add	r1, pc, #4	@ (adr r1, 800629c <_printf_i+0x40>)
 8006298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800629c:	080062f5 	.word	0x080062f5
 80062a0:	08006309 	.word	0x08006309
 80062a4:	08006285 	.word	0x08006285
 80062a8:	08006285 	.word	0x08006285
 80062ac:	08006285 	.word	0x08006285
 80062b0:	08006285 	.word	0x08006285
 80062b4:	08006309 	.word	0x08006309
 80062b8:	08006285 	.word	0x08006285
 80062bc:	08006285 	.word	0x08006285
 80062c0:	08006285 	.word	0x08006285
 80062c4:	08006285 	.word	0x08006285
 80062c8:	08006407 	.word	0x08006407
 80062cc:	08006333 	.word	0x08006333
 80062d0:	080063c1 	.word	0x080063c1
 80062d4:	08006285 	.word	0x08006285
 80062d8:	08006285 	.word	0x08006285
 80062dc:	08006429 	.word	0x08006429
 80062e0:	08006285 	.word	0x08006285
 80062e4:	08006333 	.word	0x08006333
 80062e8:	08006285 	.word	0x08006285
 80062ec:	08006285 	.word	0x08006285
 80062f0:	080063c9 	.word	0x080063c9
 80062f4:	6833      	ldr	r3, [r6, #0]
 80062f6:	1d1a      	adds	r2, r3, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6032      	str	r2, [r6, #0]
 80062fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006304:	2301      	movs	r3, #1
 8006306:	e09c      	b.n	8006442 <_printf_i+0x1e6>
 8006308:	6833      	ldr	r3, [r6, #0]
 800630a:	6820      	ldr	r0, [r4, #0]
 800630c:	1d19      	adds	r1, r3, #4
 800630e:	6031      	str	r1, [r6, #0]
 8006310:	0606      	lsls	r6, r0, #24
 8006312:	d501      	bpl.n	8006318 <_printf_i+0xbc>
 8006314:	681d      	ldr	r5, [r3, #0]
 8006316:	e003      	b.n	8006320 <_printf_i+0xc4>
 8006318:	0645      	lsls	r5, r0, #25
 800631a:	d5fb      	bpl.n	8006314 <_printf_i+0xb8>
 800631c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006320:	2d00      	cmp	r5, #0
 8006322:	da03      	bge.n	800632c <_printf_i+0xd0>
 8006324:	232d      	movs	r3, #45	@ 0x2d
 8006326:	426d      	negs	r5, r5
 8006328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800632c:	230a      	movs	r3, #10
 800632e:	4858      	ldr	r0, [pc, #352]	@ (8006490 <_printf_i+0x234>)
 8006330:	e011      	b.n	8006356 <_printf_i+0xfa>
 8006332:	6821      	ldr	r1, [r4, #0]
 8006334:	6833      	ldr	r3, [r6, #0]
 8006336:	0608      	lsls	r0, r1, #24
 8006338:	f853 5b04 	ldr.w	r5, [r3], #4
 800633c:	d402      	bmi.n	8006344 <_printf_i+0xe8>
 800633e:	0649      	lsls	r1, r1, #25
 8006340:	bf48      	it	mi
 8006342:	b2ad      	uxthmi	r5, r5
 8006344:	2f6f      	cmp	r7, #111	@ 0x6f
 8006346:	6033      	str	r3, [r6, #0]
 8006348:	bf14      	ite	ne
 800634a:	230a      	movne	r3, #10
 800634c:	2308      	moveq	r3, #8
 800634e:	4850      	ldr	r0, [pc, #320]	@ (8006490 <_printf_i+0x234>)
 8006350:	2100      	movs	r1, #0
 8006352:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006356:	6866      	ldr	r6, [r4, #4]
 8006358:	2e00      	cmp	r6, #0
 800635a:	60a6      	str	r6, [r4, #8]
 800635c:	db05      	blt.n	800636a <_printf_i+0x10e>
 800635e:	6821      	ldr	r1, [r4, #0]
 8006360:	432e      	orrs	r6, r5
 8006362:	f021 0104 	bic.w	r1, r1, #4
 8006366:	6021      	str	r1, [r4, #0]
 8006368:	d04b      	beq.n	8006402 <_printf_i+0x1a6>
 800636a:	4616      	mov	r6, r2
 800636c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006370:	fb03 5711 	mls	r7, r3, r1, r5
 8006374:	5dc7      	ldrb	r7, [r0, r7]
 8006376:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800637a:	462f      	mov	r7, r5
 800637c:	42bb      	cmp	r3, r7
 800637e:	460d      	mov	r5, r1
 8006380:	d9f4      	bls.n	800636c <_printf_i+0x110>
 8006382:	2b08      	cmp	r3, #8
 8006384:	d10b      	bne.n	800639e <_printf_i+0x142>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	07df      	lsls	r7, r3, #31
 800638a:	d508      	bpl.n	800639e <_printf_i+0x142>
 800638c:	6923      	ldr	r3, [r4, #16]
 800638e:	6861      	ldr	r1, [r4, #4]
 8006390:	4299      	cmp	r1, r3
 8006392:	bfde      	ittt	le
 8006394:	2330      	movle	r3, #48	@ 0x30
 8006396:	f806 3c01 	strble.w	r3, [r6, #-1]
 800639a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800639e:	1b92      	subs	r2, r2, r6
 80063a0:	6122      	str	r2, [r4, #16]
 80063a2:	464b      	mov	r3, r9
 80063a4:	4621      	mov	r1, r4
 80063a6:	4640      	mov	r0, r8
 80063a8:	f8cd a000 	str.w	sl, [sp]
 80063ac:	aa03      	add	r2, sp, #12
 80063ae:	f7ff fee3 	bl	8006178 <_printf_common>
 80063b2:	3001      	adds	r0, #1
 80063b4:	d14a      	bne.n	800644c <_printf_i+0x1f0>
 80063b6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ba:	b004      	add	sp, #16
 80063bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	f043 0320 	orr.w	r3, r3, #32
 80063c6:	6023      	str	r3, [r4, #0]
 80063c8:	2778      	movs	r7, #120	@ 0x78
 80063ca:	4832      	ldr	r0, [pc, #200]	@ (8006494 <_printf_i+0x238>)
 80063cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	6831      	ldr	r1, [r6, #0]
 80063d4:	061f      	lsls	r7, r3, #24
 80063d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80063da:	d402      	bmi.n	80063e2 <_printf_i+0x186>
 80063dc:	065f      	lsls	r7, r3, #25
 80063de:	bf48      	it	mi
 80063e0:	b2ad      	uxthmi	r5, r5
 80063e2:	6031      	str	r1, [r6, #0]
 80063e4:	07d9      	lsls	r1, r3, #31
 80063e6:	bf44      	itt	mi
 80063e8:	f043 0320 	orrmi.w	r3, r3, #32
 80063ec:	6023      	strmi	r3, [r4, #0]
 80063ee:	b11d      	cbz	r5, 80063f8 <_printf_i+0x19c>
 80063f0:	2310      	movs	r3, #16
 80063f2:	e7ad      	b.n	8006350 <_printf_i+0xf4>
 80063f4:	4826      	ldr	r0, [pc, #152]	@ (8006490 <_printf_i+0x234>)
 80063f6:	e7e9      	b.n	80063cc <_printf_i+0x170>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	f023 0320 	bic.w	r3, r3, #32
 80063fe:	6023      	str	r3, [r4, #0]
 8006400:	e7f6      	b.n	80063f0 <_printf_i+0x194>
 8006402:	4616      	mov	r6, r2
 8006404:	e7bd      	b.n	8006382 <_printf_i+0x126>
 8006406:	6833      	ldr	r3, [r6, #0]
 8006408:	6825      	ldr	r5, [r4, #0]
 800640a:	1d18      	adds	r0, r3, #4
 800640c:	6961      	ldr	r1, [r4, #20]
 800640e:	6030      	str	r0, [r6, #0]
 8006410:	062e      	lsls	r6, r5, #24
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	d501      	bpl.n	800641a <_printf_i+0x1be>
 8006416:	6019      	str	r1, [r3, #0]
 8006418:	e002      	b.n	8006420 <_printf_i+0x1c4>
 800641a:	0668      	lsls	r0, r5, #25
 800641c:	d5fb      	bpl.n	8006416 <_printf_i+0x1ba>
 800641e:	8019      	strh	r1, [r3, #0]
 8006420:	2300      	movs	r3, #0
 8006422:	4616      	mov	r6, r2
 8006424:	6123      	str	r3, [r4, #16]
 8006426:	e7bc      	b.n	80063a2 <_printf_i+0x146>
 8006428:	6833      	ldr	r3, [r6, #0]
 800642a:	2100      	movs	r1, #0
 800642c:	1d1a      	adds	r2, r3, #4
 800642e:	6032      	str	r2, [r6, #0]
 8006430:	681e      	ldr	r6, [r3, #0]
 8006432:	6862      	ldr	r2, [r4, #4]
 8006434:	4630      	mov	r0, r6
 8006436:	f000 f859 	bl	80064ec <memchr>
 800643a:	b108      	cbz	r0, 8006440 <_printf_i+0x1e4>
 800643c:	1b80      	subs	r0, r0, r6
 800643e:	6060      	str	r0, [r4, #4]
 8006440:	6863      	ldr	r3, [r4, #4]
 8006442:	6123      	str	r3, [r4, #16]
 8006444:	2300      	movs	r3, #0
 8006446:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800644a:	e7aa      	b.n	80063a2 <_printf_i+0x146>
 800644c:	4632      	mov	r2, r6
 800644e:	4649      	mov	r1, r9
 8006450:	4640      	mov	r0, r8
 8006452:	6923      	ldr	r3, [r4, #16]
 8006454:	47d0      	blx	sl
 8006456:	3001      	adds	r0, #1
 8006458:	d0ad      	beq.n	80063b6 <_printf_i+0x15a>
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	079b      	lsls	r3, r3, #30
 800645e:	d413      	bmi.n	8006488 <_printf_i+0x22c>
 8006460:	68e0      	ldr	r0, [r4, #12]
 8006462:	9b03      	ldr	r3, [sp, #12]
 8006464:	4298      	cmp	r0, r3
 8006466:	bfb8      	it	lt
 8006468:	4618      	movlt	r0, r3
 800646a:	e7a6      	b.n	80063ba <_printf_i+0x15e>
 800646c:	2301      	movs	r3, #1
 800646e:	4632      	mov	r2, r6
 8006470:	4649      	mov	r1, r9
 8006472:	4640      	mov	r0, r8
 8006474:	47d0      	blx	sl
 8006476:	3001      	adds	r0, #1
 8006478:	d09d      	beq.n	80063b6 <_printf_i+0x15a>
 800647a:	3501      	adds	r5, #1
 800647c:	68e3      	ldr	r3, [r4, #12]
 800647e:	9903      	ldr	r1, [sp, #12]
 8006480:	1a5b      	subs	r3, r3, r1
 8006482:	42ab      	cmp	r3, r5
 8006484:	dcf2      	bgt.n	800646c <_printf_i+0x210>
 8006486:	e7eb      	b.n	8006460 <_printf_i+0x204>
 8006488:	2500      	movs	r5, #0
 800648a:	f104 0619 	add.w	r6, r4, #25
 800648e:	e7f5      	b.n	800647c <_printf_i+0x220>
 8006490:	080068ed 	.word	0x080068ed
 8006494:	080068fe 	.word	0x080068fe

08006498 <memmove>:
 8006498:	4288      	cmp	r0, r1
 800649a:	b510      	push	{r4, lr}
 800649c:	eb01 0402 	add.w	r4, r1, r2
 80064a0:	d902      	bls.n	80064a8 <memmove+0x10>
 80064a2:	4284      	cmp	r4, r0
 80064a4:	4623      	mov	r3, r4
 80064a6:	d807      	bhi.n	80064b8 <memmove+0x20>
 80064a8:	1e43      	subs	r3, r0, #1
 80064aa:	42a1      	cmp	r1, r4
 80064ac:	d008      	beq.n	80064c0 <memmove+0x28>
 80064ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064b6:	e7f8      	b.n	80064aa <memmove+0x12>
 80064b8:	4601      	mov	r1, r0
 80064ba:	4402      	add	r2, r0
 80064bc:	428a      	cmp	r2, r1
 80064be:	d100      	bne.n	80064c2 <memmove+0x2a>
 80064c0:	bd10      	pop	{r4, pc}
 80064c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064ca:	e7f7      	b.n	80064bc <memmove+0x24>

080064cc <_sbrk_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	2300      	movs	r3, #0
 80064d0:	4d05      	ldr	r5, [pc, #20]	@ (80064e8 <_sbrk_r+0x1c>)
 80064d2:	4604      	mov	r4, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	602b      	str	r3, [r5, #0]
 80064d8:	f7fa f972 	bl	80007c0 <_sbrk>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_sbrk_r+0x1a>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_sbrk_r+0x1a>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	20000718 	.word	0x20000718

080064ec <memchr>:
 80064ec:	4603      	mov	r3, r0
 80064ee:	b510      	push	{r4, lr}
 80064f0:	b2c9      	uxtb	r1, r1
 80064f2:	4402      	add	r2, r0
 80064f4:	4293      	cmp	r3, r2
 80064f6:	4618      	mov	r0, r3
 80064f8:	d101      	bne.n	80064fe <memchr+0x12>
 80064fa:	2000      	movs	r0, #0
 80064fc:	e003      	b.n	8006506 <memchr+0x1a>
 80064fe:	7804      	ldrb	r4, [r0, #0]
 8006500:	3301      	adds	r3, #1
 8006502:	428c      	cmp	r4, r1
 8006504:	d1f6      	bne.n	80064f4 <memchr+0x8>
 8006506:	bd10      	pop	{r4, pc}

08006508 <memcpy>:
 8006508:	440a      	add	r2, r1
 800650a:	4291      	cmp	r1, r2
 800650c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006510:	d100      	bne.n	8006514 <memcpy+0xc>
 8006512:	4770      	bx	lr
 8006514:	b510      	push	{r4, lr}
 8006516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800651a:	4291      	cmp	r1, r2
 800651c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006520:	d1f9      	bne.n	8006516 <memcpy+0xe>
 8006522:	bd10      	pop	{r4, pc}

08006524 <_realloc_r>:
 8006524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006528:	4607      	mov	r7, r0
 800652a:	4614      	mov	r4, r2
 800652c:	460d      	mov	r5, r1
 800652e:	b921      	cbnz	r1, 800653a <_realloc_r+0x16>
 8006530:	4611      	mov	r1, r2
 8006532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006536:	f7ff bc3b 	b.w	8005db0 <_malloc_r>
 800653a:	b92a      	cbnz	r2, 8006548 <_realloc_r+0x24>
 800653c:	f7ff fbce 	bl	8005cdc <_free_r>
 8006540:	4625      	mov	r5, r4
 8006542:	4628      	mov	r0, r5
 8006544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006548:	f000 f81a 	bl	8006580 <_malloc_usable_size_r>
 800654c:	4284      	cmp	r4, r0
 800654e:	4606      	mov	r6, r0
 8006550:	d802      	bhi.n	8006558 <_realloc_r+0x34>
 8006552:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006556:	d8f4      	bhi.n	8006542 <_realloc_r+0x1e>
 8006558:	4621      	mov	r1, r4
 800655a:	4638      	mov	r0, r7
 800655c:	f7ff fc28 	bl	8005db0 <_malloc_r>
 8006560:	4680      	mov	r8, r0
 8006562:	b908      	cbnz	r0, 8006568 <_realloc_r+0x44>
 8006564:	4645      	mov	r5, r8
 8006566:	e7ec      	b.n	8006542 <_realloc_r+0x1e>
 8006568:	42b4      	cmp	r4, r6
 800656a:	4622      	mov	r2, r4
 800656c:	4629      	mov	r1, r5
 800656e:	bf28      	it	cs
 8006570:	4632      	movcs	r2, r6
 8006572:	f7ff ffc9 	bl	8006508 <memcpy>
 8006576:	4629      	mov	r1, r5
 8006578:	4638      	mov	r0, r7
 800657a:	f7ff fbaf 	bl	8005cdc <_free_r>
 800657e:	e7f1      	b.n	8006564 <_realloc_r+0x40>

08006580 <_malloc_usable_size_r>:
 8006580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006584:	1f18      	subs	r0, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	bfbc      	itt	lt
 800658a:	580b      	ldrlt	r3, [r1, r0]
 800658c:	18c0      	addlt	r0, r0, r3
 800658e:	4770      	bx	lr

08006590 <_init>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	bf00      	nop
 8006594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006596:	bc08      	pop	{r3}
 8006598:	469e      	mov	lr, r3
 800659a:	4770      	bx	lr

0800659c <_fini>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr
