
test_fatfs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080070f4  080070f4  000080f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007510  08007510  00009074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007510  08007510  00008510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007518  08007518  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007518  08007518  00008518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800751c  0800751c  0000851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007520  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000074  08007594  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  08007594  00009728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3a0  00000000  00000000  0000909d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a0  00000000  00000000  0001643d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00018ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096b  00000000  00000000  00019938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ad3  00000000  00000000  0001a2a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117f2  00000000  00000000  00032d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008547f  00000000  00000000  00044568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c99e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f4  00000000  00000000  000c9a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cd020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080070dc 	.word	0x080070dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080070dc 	.word	0x080070dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0308 	add.w	r3, r7, #8
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000170:	4b17      	ldr	r3, [pc, #92]	@ (80001d0 <MX_GPIO_Init+0x74>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a16      	ldr	r2, [pc, #88]	@ (80001d0 <MX_GPIO_Init+0x74>)
 8000176:	f043 0320 	orr.w	r3, r3, #32
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b14      	ldr	r3, [pc, #80]	@ (80001d0 <MX_GPIO_Init+0x74>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0320 	and.w	r3, r3, #32
 8000184:	607b      	str	r3, [r7, #4]
 8000186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4b11      	ldr	r3, [pc, #68]	@ (80001d0 <MX_GPIO_Init+0x74>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a10      	ldr	r2, [pc, #64]	@ (80001d0 <MX_GPIO_Init+0x74>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b0e      	ldr	r3, [pc, #56]	@ (80001d0 <MX_GPIO_Init+0x74>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	603b      	str	r3, [r7, #0]
 800019e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80001a0:	2201      	movs	r2, #1
 80001a2:	2110      	movs	r1, #16
 80001a4:	480b      	ldr	r0, [pc, #44]	@ (80001d4 <MX_GPIO_Init+0x78>)
 80001a6:	f000 ffd1 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80001aa:	2310      	movs	r3, #16
 80001ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ae:	2301      	movs	r3, #1
 80001b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001b2:	2301      	movs	r3, #1
 80001b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001b6:	2302      	movs	r3, #2
 80001b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80001ba:	f107 0308 	add.w	r3, r7, #8
 80001be:	4619      	mov	r1, r3
 80001c0:	4804      	ldr	r0, [pc, #16]	@ (80001d4 <MX_GPIO_Init+0x78>)
 80001c2:	f000 fe3f 	bl	8000e44 <HAL_GPIO_Init>

}
 80001c6:	bf00      	nop
 80001c8:	3718      	adds	r7, #24
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40021000 	.word	0x40021000
 80001d4:	40010800 	.word	0x40010800

080001d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	f5ad 5d48 	sub.w	sp, sp, #12800	@ 0x3200
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e2:	f000 fcc5 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e6:	f000 f84b 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f7ff ffb7 	bl	800015c <MX_GPIO_Init>
  MX_SPI1_Init();
 80001ee:	f000 fb09 	bl	8000804 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001f2:	f000 fc21 	bl	8000a38 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  sd_card_init();
 80001f6:	f000 f88e 	bl	8000316 <sd_card_init>
  sd_card_mount();
 80001fa:	f000 f893 	bl	8000324 <sd_card_mount>
  sd_card_format();
 80001fe:	f000 f923 	bl	8000448 <sd_card_format>
  sd_card_unmount();
 8000202:	f000 f8d9 	bl	80003b8 <sd_card_unmount>
  sd_card_mount();
 8000206:	f000 f88d 	bl	8000324 <sd_card_mount>
  HAL_UART_Transmit(&huart1, (uint8_t *)"Initialized and Mounted SD Card\n", 33, HAL_MAX_DELAY);
 800020a:	f04f 33ff 	mov.w	r3, #4294967295
 800020e:	2221      	movs	r2, #33	@ 0x21
 8000210:	4917      	ldr	r1, [pc, #92]	@ (8000270 <main+0x98>)
 8000212:	4818      	ldr	r0, [pc, #96]	@ (8000274 <main+0x9c>)
 8000214:	f002 f83d 	bl	8002292 <HAL_UART_Transmit>

  sd_card_test();
 8000218:	f000 fa82 	bl	8000720 <sd_card_test>

  char filename[MAX_FILES][MAX_FILENAME_LENGTH];
  int file_count = 0;
 800021c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000220:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
  sd_card_ls(filename, MAX_FILES, &file_count);
 8000228:	f107 0308 	add.w	r3, r7, #8
 800022c:	3b04      	subs	r3, #4
 800022e:	f107 0008 	add.w	r0, r7, #8
 8000232:	461a      	mov	r2, r3
 8000234:	2164      	movs	r1, #100	@ 0x64
 8000236:	f000 f94f 	bl	80004d8 <sd_card_ls>

  sd_card_create_file("myfile.txt");
 800023a:	480f      	ldr	r0, [pc, #60]	@ (8000278 <main+0xa0>)
 800023c:	f000 fa12 	bl	8000664 <sd_card_create_file>
  sd_card_ls(filename, MAX_FILES, &file_count);
 8000240:	f107 0308 	add.w	r3, r7, #8
 8000244:	3b04      	subs	r3, #4
 8000246:	f107 0008 	add.w	r0, r7, #8
 800024a:	461a      	mov	r2, r3
 800024c:	2164      	movs	r1, #100	@ 0x64
 800024e:	f000 f943 	bl	80004d8 <sd_card_ls>

  sd_card_unmount();
 8000252:	f000 f8b1 	bl	80003b8 <sd_card_unmount>

  HAL_UART_Transmit(&huart1, (uint8_t *)"Finished SD Card Operations\n", 28, HAL_MAX_DELAY);
 8000256:	f04f 33ff 	mov.w	r3, #4294967295
 800025a:	221c      	movs	r2, #28
 800025c:	4907      	ldr	r1, [pc, #28]	@ (800027c <main+0xa4>)
 800025e:	4805      	ldr	r0, [pc, #20]	@ (8000274 <main+0x9c>)
 8000260:	f002 f817 	bl	8002292 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1000);
 8000264:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000268:	f000 fce4 	bl	8000c34 <HAL_Delay>
 800026c:	e7fa      	b.n	8000264 <main+0x8c>
 800026e:	bf00      	nop
 8000270:	080070f4 	.word	0x080070f4
 8000274:	20000554 	.word	0x20000554
 8000278:	08007118 	.word	0x08007118
 800027c:	08007124 	.word	0x08007124

08000280 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	@ 0x40
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	2228      	movs	r2, #40	@ 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f006 fa8e 	bl	80067b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a2:	2301      	movs	r3, #1
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	2302      	movs	r3, #2
 80002b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002be:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002c4:	f107 0318 	add.w	r3, r7, #24
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 ff57 	bl	800117c <HAL_RCC_OscConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x58>
    Error_Handler();
 80002d4:	f000 f819 	bl	800030a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80002d8:	230f      	movs	r3, #15
 80002da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002dc:	2302      	movs	r3, #2
 80002de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2102      	movs	r1, #2
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 f9c4 	bl	8001680 <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x82>
    Error_Handler();
 80002fe:	f000 f804 	bl	800030a <Error_Handler>
  }
}
 8000302:	bf00      	nop
 8000304:	3740      	adds	r7, #64	@ 0x40
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800030e:	b672      	cpsid	i
}
 8000310:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000312:	bf00      	nop
 8000314:	e7fd      	b.n	8000312 <Error_Handler+0x8>

08000316 <sd_card_init>:
FRESULT err = FR_OK;  // Result
UINT write_count, read_count;
DWORD free_clusters;
uint32_t total_size, free_space;

void sd_card_init(void) {
 8000316:	b580      	push	{r7, lr}
 8000318:	af00      	add	r7, sp, #0
  MX_FATFS_Init();
 800031a:	f002 f98f 	bl	800263c <MX_FATFS_Init>
  // TODO: need mounting before any file operations
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <sd_card_mount>:

// TODO: remove all while (1) loops in error handling after testing

FRESULT sd_card_mount(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b0c0      	sub	sp, #256	@ 0x100
 8000328:	af00      	add	r7, sp, #0
  char uart_buffer[256];
  err = f_mount(&fatfs, "", 1);
 800032a:	2201      	movs	r2, #1
 800032c:	491c      	ldr	r1, [pc, #112]	@ (80003a0 <sd_card_mount+0x7c>)
 800032e:	481d      	ldr	r0, [pc, #116]	@ (80003a4 <sd_card_mount+0x80>)
 8000330:	f004 fe74 	bl	800501c <f_mount>
 8000334:	4603      	mov	r3, r0
 8000336:	461a      	mov	r2, r3
 8000338:	4b1b      	ldr	r3, [pc, #108]	@ (80003a8 <sd_card_mount+0x84>)
 800033a:	701a      	strb	r2, [r3, #0]
  if (err != FR_OK) {
 800033c:	4b1a      	ldr	r3, [pc, #104]	@ (80003a8 <sd_card_mount+0x84>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d015      	beq.n	8000370 <sd_card_mount+0x4c>
    sprintf(uart_buffer, "f_mount error: %d\n", err);
 8000344:	4b18      	ldr	r3, [pc, #96]	@ (80003a8 <sd_card_mount+0x84>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	461a      	mov	r2, r3
 800034a:	463b      	mov	r3, r7
 800034c:	4917      	ldr	r1, [pc, #92]	@ (80003ac <sd_card_mount+0x88>)
 800034e:	4618      	mov	r0, r3
 8000350:	f006 fa0c 	bl	800676c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000354:	463b      	mov	r3, r7
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff fef8 	bl	800014c <strlen>
 800035c:	4603      	mov	r3, r0
 800035e:	b29a      	uxth	r2, r3
 8000360:	4639      	mov	r1, r7
 8000362:	f04f 33ff 	mov.w	r3, #4294967295
 8000366:	4812      	ldr	r0, [pc, #72]	@ (80003b0 <sd_card_mount+0x8c>)
 8000368:	f001 ff93 	bl	8002292 <HAL_UART_Transmit>
    while (1);
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <sd_card_mount+0x48>
  }
  sprintf(uart_buffer, "SD card mounted successfully.\n");
 8000370:	463b      	mov	r3, r7
 8000372:	4910      	ldr	r1, [pc, #64]	@ (80003b4 <sd_card_mount+0x90>)
 8000374:	4618      	mov	r0, r3
 8000376:	f006 f9f9 	bl	800676c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800037a:	463b      	mov	r3, r7
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff fee5 	bl	800014c <strlen>
 8000382:	4603      	mov	r3, r0
 8000384:	b29a      	uxth	r2, r3
 8000386:	4639      	mov	r1, r7
 8000388:	f04f 33ff 	mov.w	r3, #4294967295
 800038c:	4808      	ldr	r0, [pc, #32]	@ (80003b0 <sd_card_mount+0x8c>)
 800038e:	f001 ff80 	bl	8002292 <HAL_UART_Transmit>
  return err;
 8000392:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <sd_card_mount+0x84>)
 8000394:	781b      	ldrb	r3, [r3, #0]
}
 8000396:	4618      	mov	r0, r3
 8000398:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	08007144 	.word	0x08007144
 80003a4:	20000090 	.word	0x20000090
 80003a8:	200004f0 	.word	0x200004f0
 80003ac:	08007148 	.word	0x08007148
 80003b0:	20000554 	.word	0x20000554
 80003b4:	0800715c 	.word	0x0800715c

080003b8 <sd_card_unmount>:

FRESULT sd_card_unmount(void) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b0c0      	sub	sp, #256	@ 0x100
 80003bc:	af00      	add	r7, sp, #0
  char uart_buffer[256];
  err = f_mount(NULL, "", 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	491c      	ldr	r1, [pc, #112]	@ (8000434 <sd_card_unmount+0x7c>)
 80003c2:	2000      	movs	r0, #0
 80003c4:	f004 fe2a 	bl	800501c <f_mount>
 80003c8:	4603      	mov	r3, r0
 80003ca:	461a      	mov	r2, r3
 80003cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000438 <sd_card_unmount+0x80>)
 80003ce:	701a      	strb	r2, [r3, #0]
  if (err != FR_OK) {
 80003d0:	4b19      	ldr	r3, [pc, #100]	@ (8000438 <sd_card_unmount+0x80>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d015      	beq.n	8000404 <sd_card_unmount+0x4c>
    sprintf(uart_buffer, "f_mount unmount error: %d\n", err);
 80003d8:	4b17      	ldr	r3, [pc, #92]	@ (8000438 <sd_card_unmount+0x80>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	461a      	mov	r2, r3
 80003de:	463b      	mov	r3, r7
 80003e0:	4916      	ldr	r1, [pc, #88]	@ (800043c <sd_card_unmount+0x84>)
 80003e2:	4618      	mov	r0, r3
 80003e4:	f006 f9c2 	bl	800676c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80003e8:	463b      	mov	r3, r7
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff feae 	bl	800014c <strlen>
 80003f0:	4603      	mov	r3, r0
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	4639      	mov	r1, r7
 80003f6:	f04f 33ff 	mov.w	r3, #4294967295
 80003fa:	4811      	ldr	r0, [pc, #68]	@ (8000440 <sd_card_unmount+0x88>)
 80003fc:	f001 ff49 	bl	8002292 <HAL_UART_Transmit>
    while (1);
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <sd_card_unmount+0x48>
  }
  sprintf(uart_buffer, "SD card unmounted successfully.\n");
 8000404:	463b      	mov	r3, r7
 8000406:	490f      	ldr	r1, [pc, #60]	@ (8000444 <sd_card_unmount+0x8c>)
 8000408:	4618      	mov	r0, r3
 800040a:	f006 f9af 	bl	800676c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800040e:	463b      	mov	r3, r7
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff fe9b 	bl	800014c <strlen>
 8000416:	4603      	mov	r3, r0
 8000418:	b29a      	uxth	r2, r3
 800041a:	4639      	mov	r1, r7
 800041c:	f04f 33ff 	mov.w	r3, #4294967295
 8000420:	4807      	ldr	r0, [pc, #28]	@ (8000440 <sd_card_unmount+0x88>)
 8000422:	f001 ff36 	bl	8002292 <HAL_UART_Transmit>
  return err;
 8000426:	4b04      	ldr	r3, [pc, #16]	@ (8000438 <sd_card_unmount+0x80>)
 8000428:	781b      	ldrb	r3, [r3, #0]
}
 800042a:	4618      	mov	r0, r3
 800042c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	08007144 	.word	0x08007144
 8000438:	200004f0 	.word	0x200004f0
 800043c:	0800717c 	.word	0x0800717c
 8000440:	20000554 	.word	0x20000554
 8000444:	08007198 	.word	0x08007198

08000448 <sd_card_format>:

FRESULT sd_card_format(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b0c0      	sub	sp, #256	@ 0x100
 800044c:	af00      	add	r7, sp, #0
  char uart_buffer[256];
  err = f_mkfs("", 0, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	2100      	movs	r1, #0
 8000452:	481c      	ldr	r0, [pc, #112]	@ (80004c4 <sd_card_format+0x7c>)
 8000454:	f005 fc1c 	bl	8005c90 <f_mkfs>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	4b1a      	ldr	r3, [pc, #104]	@ (80004c8 <sd_card_format+0x80>)
 800045e:	701a      	strb	r2, [r3, #0]
  if (err != FR_OK) {
 8000460:	4b19      	ldr	r3, [pc, #100]	@ (80004c8 <sd_card_format+0x80>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d015      	beq.n	8000494 <sd_card_format+0x4c>
    sprintf(uart_buffer, "f_mkfs error: %d\n", err);
 8000468:	4b17      	ldr	r3, [pc, #92]	@ (80004c8 <sd_card_format+0x80>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	461a      	mov	r2, r3
 800046e:	463b      	mov	r3, r7
 8000470:	4916      	ldr	r1, [pc, #88]	@ (80004cc <sd_card_format+0x84>)
 8000472:	4618      	mov	r0, r3
 8000474:	f006 f97a 	bl	800676c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000478:	463b      	mov	r3, r7
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff fe66 	bl	800014c <strlen>
 8000480:	4603      	mov	r3, r0
 8000482:	b29a      	uxth	r2, r3
 8000484:	4639      	mov	r1, r7
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	4811      	ldr	r0, [pc, #68]	@ (80004d0 <sd_card_format+0x88>)
 800048c:	f001 ff01 	bl	8002292 <HAL_UART_Transmit>
    while (1);
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <sd_card_format+0x48>
  }
  sprintf(uart_buffer, "SD card formatted successfully.\n");
 8000494:	463b      	mov	r3, r7
 8000496:	490f      	ldr	r1, [pc, #60]	@ (80004d4 <sd_card_format+0x8c>)
 8000498:	4618      	mov	r0, r3
 800049a:	f006 f967 	bl	800676c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800049e:	463b      	mov	r3, r7
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff fe53 	bl	800014c <strlen>
 80004a6:	4603      	mov	r3, r0
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	4639      	mov	r1, r7
 80004ac:	f04f 33ff 	mov.w	r3, #4294967295
 80004b0:	4807      	ldr	r0, [pc, #28]	@ (80004d0 <sd_card_format+0x88>)
 80004b2:	f001 feee 	bl	8002292 <HAL_UART_Transmit>
  return err;
 80004b6:	4b04      	ldr	r3, [pc, #16]	@ (80004c8 <sd_card_format+0x80>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	08007144 	.word	0x08007144
 80004c8:	200004f0 	.word	0x200004f0
 80004cc:	080071bc 	.word	0x080071bc
 80004d0:	20000554 	.word	0x20000554
 80004d4:	080071d0 	.word	0x080071d0

080004d8 <sd_card_ls>:
  return err;
}

FRESULT sd_card_cd(const char *dir_name) {}

FRESULT sd_card_ls(char filename[][MAX_FILENAME_LENGTH], int max_files, int *file_count) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	f5ad 7d54 	sub.w	sp, sp, #848	@ 0x350
 80004de:	af00      	add	r7, sp, #0
 80004e0:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80004e4:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80004e8:	6018      	str	r0, [r3, #0]
 80004ea:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80004ee:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 80004f2:	6019      	str	r1, [r3, #0]
 80004f4:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80004f8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80004fc:	601a      	str	r2, [r3, #0]
  DIR dir;
  FILINFO fno;
  char uart_buffer[256];
  FRESULT res;

  *file_count = 0;
 80004fe:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8000502:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]

  res = f_opendir(&dir, "");
 800050c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8000510:	494f      	ldr	r1, [pc, #316]	@ (8000650 <sd_card_ls+0x178>)
 8000512:	4618      	mov	r0, r3
 8000514:	f005 face 	bl	8005ab4 <f_opendir>
 8000518:	4603      	mov	r3, r0
 800051a:	f887 334f 	strb.w	r3, [r7, #847]	@ 0x34f
  if (res != FR_OK) {
 800051e:	f897 334f 	ldrb.w	r3, [r7, #847]	@ 0x34f
 8000522:	2b00      	cmp	r3, #0
 8000524:	d017      	beq.n	8000556 <sd_card_ls+0x7e>
    sprintf(uart_buffer, "f_opendir error: %d\n", res);
 8000526:	f897 234f 	ldrb.w	r2, [r7, #847]	@ 0x34f
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	4949      	ldr	r1, [pc, #292]	@ (8000654 <sd_card_ls+0x17c>)
 8000530:	4618      	mov	r0, r3
 8000532:	f006 f91b 	bl	800676c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fe06 	bl	800014c <strlen>
 8000540:	4603      	mov	r3, r0
 8000542:	b29a      	uxth	r2, r3
 8000544:	f107 0114 	add.w	r1, r7, #20
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	4842      	ldr	r0, [pc, #264]	@ (8000658 <sd_card_ls+0x180>)
 800054e:	f001 fea0 	bl	8002292 <HAL_UART_Transmit>
    while (1);
 8000552:	bf00      	nop
 8000554:	e7fd      	b.n	8000552 <sd_card_ls+0x7a>
  }

  sprintf(uart_buffer, "Directory listing:\n");
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4940      	ldr	r1, [pc, #256]	@ (800065c <sd_card_ls+0x184>)
 800055c:	4618      	mov	r0, r3
 800055e:	f006 f905 	bl	800676c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fdf0 	bl	800014c <strlen>
 800056c:	4603      	mov	r3, r0
 800056e:	b29a      	uxth	r2, r3
 8000570:	f107 0114 	add.w	r1, r7, #20
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
 8000578:	4837      	ldr	r0, [pc, #220]	@ (8000658 <sd_card_ls+0x180>)
 800057a:	f001 fe8a 	bl	8002292 <HAL_UART_Transmit>

  while (1) {
    res = f_readdir(&dir, &fno);
 800057e:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000582:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8000586:	4611      	mov	r1, r2
 8000588:	4618      	mov	r0, r3
 800058a:	f005 fb3a 	bl	8005c02 <f_readdir>
 800058e:	4603      	mov	r3, r0
 8000590:	f887 334f 	strb.w	r3, [r7, #847]	@ 0x34f
    if (res != FR_OK || fno.fname[0] == 0)
 8000594:	f897 334f 	ldrb.w	r3, [r7, #847]	@ 0x34f
 8000598:	2b00      	cmp	r3, #0
 800059a:	d14d      	bne.n	8000638 <sd_card_ls+0x160>
 800059c:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80005a0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80005a4:	7a5b      	ldrb	r3, [r3, #9]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d046      	beq.n	8000638 <sd_card_ls+0x160>
      break;

    if (*file_count < max_files) {
 80005aa:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80005ae:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f507 7254 	add.w	r2, r7, #848	@ 0x350
 80005ba:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 80005be:	6812      	ldr	r2, [r2, #0]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	dd20      	ble.n	8000606 <sd_card_ls+0x12e>
      strcpy(filename[*file_count], fno.fname);
 80005c4:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80005c8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	01db      	lsls	r3, r3, #7
 80005d2:	f507 7254 	add.w	r2, r7, #848	@ 0x350
 80005d6:	f5a2 7251 	sub.w	r2, r2, #836	@ 0x344
 80005da:	6812      	ldr	r2, [r2, #0]
 80005dc:	441a      	add	r2, r3
 80005de:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80005e2:	3309      	adds	r3, #9
 80005e4:	4619      	mov	r1, r3
 80005e6:	4610      	mov	r0, r2
 80005e8:	f006 f916 	bl	8006818 <strcpy>
      // char temp[128];
      // strcpy(temp, fno.fname);
      // HAL_UART_Transmit(&huart1, "test1\n", strlen("test1\n"), HAL_MAX_DELAY);
      // strcpy(filename[*file_count], temp);
      // HAL_UART_Transmit(&huart1, "test2\n", strlen("test2\n"), HAL_MAX_DELAY);
      (*file_count)++;
 80005ec:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80005f0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80005fe:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	601a      	str	r2, [r3, #0]
    }

    sprintf(uart_buffer, "%s\n", fno.fname);
 8000606:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800060a:	f103 0209 	add.w	r2, r3, #9
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4913      	ldr	r1, [pc, #76]	@ (8000660 <sd_card_ls+0x188>)
 8000614:	4618      	mov	r0, r3
 8000616:	f006 f8a9 	bl	800676c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fd94 	bl	800014c <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	f107 0114 	add.w	r1, r7, #20
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	4809      	ldr	r0, [pc, #36]	@ (8000658 <sd_card_ls+0x180>)
 8000632:	f001 fe2e 	bl	8002292 <HAL_UART_Transmit>
    res = f_readdir(&dir, &fno);
 8000636:	e7a2      	b.n	800057e <sd_card_ls+0xa6>
  }

  f_closedir(&dir);
 8000638:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800063c:	4618      	mov	r0, r3
 800063e:	f005 fabb 	bl	8005bb8 <f_closedir>
  return res;
 8000642:	f897 334f 	ldrb.w	r3, [r7, #847]	@ 0x34f
}
 8000646:	4618      	mov	r0, r3
 8000648:	f507 7754 	add.w	r7, r7, #848	@ 0x350
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	08007144 	.word	0x08007144
 8000654:	080072ac 	.word	0x080072ac
 8000658:	20000554 	.word	0x20000554
 800065c:	080072c4 	.word	0x080072c4
 8000660:	080072d8 	.word	0x080072d8

08000664 <sd_card_create_file>:

FRESULT sd_card_pwd(char *path, int max_len) {}

FRESULT sd_card_create_file(const char *filename) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b0c2      	sub	sp, #264	@ 0x108
 8000668:	af00      	add	r7, sp, #0
 800066a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800066e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000672:	6018      	str	r0, [r3, #0]
  char uart_buffer[256];
  err = f_open(&file, filename, FA_CREATE_ALWAYS);
 8000674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800067c:	2208      	movs	r2, #8
 800067e:	6819      	ldr	r1, [r3, #0]
 8000680:	4822      	ldr	r0, [pc, #136]	@ (800070c <sd_card_create_file+0xa8>)
 8000682:	f004 fd13 	bl	80050ac <f_open>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <sd_card_create_file+0xac>)
 800068c:	701a      	strb	r2, [r3, #0]
  if (err != FR_OK) {
 800068e:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <sd_card_create_file+0xac>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d018      	beq.n	80006c8 <sd_card_create_file+0x64>
    sprintf(uart_buffer, "f_open error: %d\n", err);
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <sd_card_create_file+0xac>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	491c      	ldr	r1, [pc, #112]	@ (8000714 <sd_card_create_file+0xb0>)
 80006a2:	4618      	mov	r0, r3
 80006a4:	f006 f862 	bl	800676c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fd4d 	bl	800014c <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f107 0108 	add.w	r1, r7, #8
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	4816      	ldr	r0, [pc, #88]	@ (8000718 <sd_card_create_file+0xb4>)
 80006c0:	f001 fde7 	bl	8002292 <HAL_UART_Transmit>
    while (1);
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <sd_card_create_file+0x60>
  }
  f_close(&file);
 80006c8:	4810      	ldr	r0, [pc, #64]	@ (800070c <sd_card_create_file+0xa8>)
 80006ca:	f005 f9cb 	bl	8005a64 <f_close>
  sprintf(uart_buffer, "File %s created successfully.\n", filename);
 80006ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006d6:	f107 0008 	add.w	r0, r7, #8
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	490f      	ldr	r1, [pc, #60]	@ (800071c <sd_card_create_file+0xb8>)
 80006de:	f006 f845 	bl	800676c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fd30 	bl	800014c <strlen>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f107 0108 	add.w	r1, r7, #8
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	4807      	ldr	r0, [pc, #28]	@ (8000718 <sd_card_create_file+0xb4>)
 80006fa:	f001 fdca 	bl	8002292 <HAL_UART_Transmit>
  return err;
 80006fe:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <sd_card_create_file+0xac>)
 8000700:	781b      	ldrb	r3, [r3, #0]
}
 8000702:	4618      	mov	r0, r3
 8000704:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200002c4 	.word	0x200002c4
 8000710:	200004f0 	.word	0x200004f0
 8000714:	080072dc 	.word	0x080072dc
 8000718:	20000554 	.word	0x20000554
 800071c:	080072f0 	.word	0x080072f0

08000720 <sd_card_test>:

FRESULT sd_card_read_file(const char *filename, uint8_t *buffer, UINT bytes_to_read, UINT *bytes_read) {}

FRESULT sd_card_write_file(const char *filename, const uint8_t *data, UINT data_size, UINT *bytes_written) {}

void sd_card_test(void) {
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 8000726:	af00      	add	r7, sp, #0
  char data[256];
  char uart_buffer[256];

  // // open a txt file and write data
  // // observe append or overwrite behavior, should be overwrite
  err = f_open(&file, "test.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000728:	220b      	movs	r2, #11
 800072a:	492d      	ldr	r1, [pc, #180]	@ (80007e0 <sd_card_test+0xc0>)
 800072c:	482d      	ldr	r0, [pc, #180]	@ (80007e4 <sd_card_test+0xc4>)
 800072e:	f004 fcbd 	bl	80050ac <f_open>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b2c      	ldr	r3, [pc, #176]	@ (80007e8 <sd_card_test+0xc8>)
 8000738:	701a      	strb	r2, [r3, #0]
  if (err != FR_OK) {
 800073a:	4b2b      	ldr	r3, [pc, #172]	@ (80007e8 <sd_card_test+0xc8>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d015      	beq.n	800076e <sd_card_test+0x4e>
    sprintf(uart_buffer, "f_open error: %d\n", err);
 8000742:	4b29      	ldr	r3, [pc, #164]	@ (80007e8 <sd_card_test+0xc8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	463b      	mov	r3, r7
 800074a:	4928      	ldr	r1, [pc, #160]	@ (80007ec <sd_card_test+0xcc>)
 800074c:	4618      	mov	r0, r3
 800074e:	f006 f80d 	bl	800676c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000752:	463b      	mov	r3, r7
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fcf9 	bl	800014c <strlen>
 800075a:	4603      	mov	r3, r0
 800075c:	b29a      	uxth	r2, r3
 800075e:	4639      	mov	r1, r7
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	4822      	ldr	r0, [pc, #136]	@ (80007f0 <sd_card_test+0xd0>)
 8000766:	f001 fd94 	bl	8002292 <HAL_UART_Transmit>
    while (1);
 800076a:	bf00      	nop
 800076c:	e7fd      	b.n	800076a <sd_card_test+0x4a>
  }
  sprintf(uart_buffer, "File created/opened successfully.\n");
 800076e:	463b      	mov	r3, r7
 8000770:	4920      	ldr	r1, [pc, #128]	@ (80007f4 <sd_card_test+0xd4>)
 8000772:	4618      	mov	r0, r3
 8000774:	f005 fffa 	bl	800676c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000778:	463b      	mov	r3, r7
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fce6 	bl	800014c <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	b29a      	uxth	r2, r3
 8000784:	4639      	mov	r1, r7
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	4819      	ldr	r0, [pc, #100]	@ (80007f0 <sd_card_test+0xd0>)
 800078c:	f001 fd81 	bl	8002292 <HAL_UART_Transmit>
  f_puts("Hello, World!1\n", &file);
 8000790:	4914      	ldr	r1, [pc, #80]	@ (80007e4 <sd_card_test+0xc4>)
 8000792:	4819      	ldr	r0, [pc, #100]	@ (80007f8 <sd_card_test+0xd8>)
 8000794:	f005 ff57 	bl	8006646 <f_puts>
  memset(data, 0, sizeof(data));
 8000798:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800079c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f006 f804 	bl	80067b0 <memset>
  strcpy(data, "Hello, World!2\n");
 80007a8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80007ac:	4a13      	ldr	r2, [pc, #76]	@ (80007fc <sd_card_test+0xdc>)
 80007ae:	461c      	mov	r4, r3
 80007b0:	4613      	mov	r3, r2
 80007b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  f_write(&file, data, strlen(data), &write_count);
 80007b8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fcc5 	bl	800014c <strlen>
 80007c2:	4602      	mov	r2, r0
 80007c4:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <sd_card_test+0xe0>)
 80007ca:	4806      	ldr	r0, [pc, #24]	@ (80007e4 <sd_card_test+0xc4>)
 80007cc:	f004 fee3 	bl	8005596 <f_write>
  f_close(&file);
 80007d0:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <sd_card_test+0xc4>)
 80007d2:	f005 f947 	bl	8005a64 <f_close>
  //   HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, sizeof(uart_buffer) - 1, HAL_MAX_DELAY);
  //   while (1);
  // }
  // sprintf(uart_buffer, "File deleted successfully.\n");
  // HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, sizeof(uart_buffer) - 1, HAL_MAX_DELAY);
 80007d6:	bf00      	nop
 80007d8:	f507 7701 	add.w	r7, r7, #516	@ 0x204
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd90      	pop	{r4, r7, pc}
 80007e0:	0800736c 	.word	0x0800736c
 80007e4:	200002c4 	.word	0x200002c4
 80007e8:	200004f0 	.word	0x200004f0
 80007ec:	080072dc 	.word	0x080072dc
 80007f0:	20000554 	.word	0x20000554
 80007f4:	08007378 	.word	0x08007378
 80007f8:	0800739c 	.word	0x0800739c
 80007fc:	080073ac 	.word	0x080073ac
 8000800:	200004f4 	.word	0x200004f4

08000804 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_SPI1_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	@ (800086c <MX_SPI1_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000834:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000838:	2238      	movs	r2, #56	@ 0x38
 800083a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000856:	f001 f8a1 	bl	800199c <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000860:	f7ff fd53 	bl	800030a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200004f8 	.word	0x200004f8
 800086c:	40013000 	.word	0x40013000

08000870 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <HAL_SPI_MspInit+0x88>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d12f      	bne.n	80008f0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000890:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a19      	ldr	r2, [pc, #100]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 8000896:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a13      	ldr	r2, [pc, #76]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MOSI_Pin;
 80008c0:	23a0      	movs	r3, #160	@ 0xa0
 80008c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	480b      	ldr	r0, [pc, #44]	@ (8000900 <HAL_SPI_MspInit+0x90>)
 80008d4:	f000 fab6 	bl	8000e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin;
 80008d8:	2340      	movs	r3, #64	@ 0x40
 80008da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <HAL_SPI_MspInit+0x90>)
 80008ec:	f000 faaa 	bl	8000e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40013000 	.word	0x40013000
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010800 	.word	0x40010800

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <HAL_MspInit+0x5c>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a14      	ldr	r2, [pc, #80]	@ (8000960 <HAL_MspInit+0x5c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_MspInit+0x5c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_MspInit+0x5c>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a0e      	ldr	r2, [pc, #56]	@ (8000960 <HAL_MspInit+0x5c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_MspInit+0x5c>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800093a:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <HAL_MspInit+0x60>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <HAL_MspInit+0x60>)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40021000 	.word	0x40021000
 8000964:	40010000 	.word	0x40010000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f920 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c8:	4a14      	ldr	r2, [pc, #80]	@ (8000a1c <_sbrk+0x5c>)
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <_sbrk+0x60>)
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <_sbrk+0x64>)
 80009de:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <_sbrk+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d207      	bcs.n	8000a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f0:	f005 fee6 	bl	80067c0 <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	e009      	b.n	8000a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a06:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <_sbrk+0x64>)
 8000a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20005000 	.word	0x20005000
 8000a20:	00000400 	.word	0x00000400
 8000a24:	20000550 	.word	0x20000550
 8000a28:	20000728 	.word	0x20000728

08000a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <MX_USART1_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a70:	f001 fbbf 	bl	80021f2 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a7a:	f7ff fc46 	bl	800030a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000554 	.word	0x20000554
 8000a88:	40013800 	.word	0x40013800

08000a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b18 <HAL_UART_MspInit+0x8c>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d131      	bne.n	8000b10 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aac:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <HAL_UART_MspInit+0x90>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b1c <HAL_UART_MspInit+0x90>)
 8000ab2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <HAL_UART_MspInit+0x90>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <HAL_UART_MspInit+0x90>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a14      	ldr	r2, [pc, #80]	@ (8000b1c <HAL_UART_MspInit+0x90>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <HAL_UART_MspInit+0x90>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ae0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	4619      	mov	r1, r3
 8000af0:	480b      	ldr	r0, [pc, #44]	@ (8000b20 <HAL_UART_MspInit+0x94>)
 8000af2:	f000 f9a7 	bl	8000e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000af6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <HAL_UART_MspInit+0x94>)
 8000b0c:	f000 f99a 	bl	8000e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40013800 	.word	0x40013800
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40010800 	.word	0x40010800

08000b24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b24:	f7ff ff82 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b28:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b2a:	490c      	ldr	r1, [pc, #48]	@ (8000b5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b40:	4c09      	ldr	r4, [pc, #36]	@ (8000b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f005 fe3d 	bl	80067cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b52:	f7ff fb41 	bl	80001d8 <main>
  bx lr
 8000b56:	4770      	bx	lr
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b60:	08007520 	.word	0x08007520
  ldr r2, =_sbss
 8000b64:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b68:	20000728 	.word	0x20000728

08000b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_2_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <HAL_Init+0x28>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <HAL_Init+0x28>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f92b 	bl	8000ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f000 f808 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff feba 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40022000 	.word	0x40022000

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <HAL_InitTick+0x54>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <HAL_InitTick+0x58>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f935 	bl	8000e2a <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00e      	b.n	8000be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d80a      	bhi.n	8000be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f000 f90b 	bl	8000df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4a06      	ldr	r2, [pc, #24]	@ (8000bf8 <HAL_InitTick+0x5c>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_IncTick+0x1c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <HAL_IncTick+0x20>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a03      	ldr	r2, [pc, #12]	@ (8000c1c <HAL_IncTick+0x20>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	2000059c 	.word	0x2000059c

08000c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b02      	ldr	r3, [pc, #8]	@ (8000c30 <HAL_GetTick+0x10>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	2000059c 	.word	0x2000059c

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff fff0 	bl	8000c20 <HAL_GetTick>
 8000c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4c:	d005      	beq.n	8000c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <HAL_Delay+0x44>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ffe0 	bl	8000c20 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <HAL_Delay+0x28>
  {
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	@ (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	@ (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	@ 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	@ 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000da8:	d301      	bcc.n	8000dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00f      	b.n	8000dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <SysTick_Config+0x40>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db6:	210f      	movs	r1, #15
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f7ff ff90 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc0:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <SysTick_Config+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <SysTick_Config+0x40>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff49 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e04:	f7ff ff5e 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff ff90 	bl	8000d34 <NVIC_EncodePriority>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff5f 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffb0 	bl	8000d98 <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b08b      	sub	sp, #44	@ 0x2c
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	e169      	b.n	800112c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 8158 	bne.w	8001126 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	4a9a      	ldr	r2, [pc, #616]	@ (80010e4 <HAL_GPIO_Init+0x2a0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d05e      	beq.n	8000f3e <HAL_GPIO_Init+0xfa>
 8000e80:	4a98      	ldr	r2, [pc, #608]	@ (80010e4 <HAL_GPIO_Init+0x2a0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d875      	bhi.n	8000f72 <HAL_GPIO_Init+0x12e>
 8000e86:	4a98      	ldr	r2, [pc, #608]	@ (80010e8 <HAL_GPIO_Init+0x2a4>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d058      	beq.n	8000f3e <HAL_GPIO_Init+0xfa>
 8000e8c:	4a96      	ldr	r2, [pc, #600]	@ (80010e8 <HAL_GPIO_Init+0x2a4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d86f      	bhi.n	8000f72 <HAL_GPIO_Init+0x12e>
 8000e92:	4a96      	ldr	r2, [pc, #600]	@ (80010ec <HAL_GPIO_Init+0x2a8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d052      	beq.n	8000f3e <HAL_GPIO_Init+0xfa>
 8000e98:	4a94      	ldr	r2, [pc, #592]	@ (80010ec <HAL_GPIO_Init+0x2a8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d869      	bhi.n	8000f72 <HAL_GPIO_Init+0x12e>
 8000e9e:	4a94      	ldr	r2, [pc, #592]	@ (80010f0 <HAL_GPIO_Init+0x2ac>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d04c      	beq.n	8000f3e <HAL_GPIO_Init+0xfa>
 8000ea4:	4a92      	ldr	r2, [pc, #584]	@ (80010f0 <HAL_GPIO_Init+0x2ac>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d863      	bhi.n	8000f72 <HAL_GPIO_Init+0x12e>
 8000eaa:	4a92      	ldr	r2, [pc, #584]	@ (80010f4 <HAL_GPIO_Init+0x2b0>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d046      	beq.n	8000f3e <HAL_GPIO_Init+0xfa>
 8000eb0:	4a90      	ldr	r2, [pc, #576]	@ (80010f4 <HAL_GPIO_Init+0x2b0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d85d      	bhi.n	8000f72 <HAL_GPIO_Init+0x12e>
 8000eb6:	2b12      	cmp	r3, #18
 8000eb8:	d82a      	bhi.n	8000f10 <HAL_GPIO_Init+0xcc>
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d859      	bhi.n	8000f72 <HAL_GPIO_Init+0x12e>
 8000ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec4 <HAL_GPIO_Init+0x80>)
 8000ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec4:	08000f3f 	.word	0x08000f3f
 8000ec8:	08000f19 	.word	0x08000f19
 8000ecc:	08000f2b 	.word	0x08000f2b
 8000ed0:	08000f6d 	.word	0x08000f6d
 8000ed4:	08000f73 	.word	0x08000f73
 8000ed8:	08000f73 	.word	0x08000f73
 8000edc:	08000f73 	.word	0x08000f73
 8000ee0:	08000f73 	.word	0x08000f73
 8000ee4:	08000f73 	.word	0x08000f73
 8000ee8:	08000f73 	.word	0x08000f73
 8000eec:	08000f73 	.word	0x08000f73
 8000ef0:	08000f73 	.word	0x08000f73
 8000ef4:	08000f73 	.word	0x08000f73
 8000ef8:	08000f73 	.word	0x08000f73
 8000efc:	08000f73 	.word	0x08000f73
 8000f00:	08000f73 	.word	0x08000f73
 8000f04:	08000f73 	.word	0x08000f73
 8000f08:	08000f21 	.word	0x08000f21
 8000f0c:	08000f35 	.word	0x08000f35
 8000f10:	4a79      	ldr	r2, [pc, #484]	@ (80010f8 <HAL_GPIO_Init+0x2b4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d013      	beq.n	8000f3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f16:	e02c      	b.n	8000f72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	623b      	str	r3, [r7, #32]
          break;
 8000f1e:	e029      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	3304      	adds	r3, #4
 8000f26:	623b      	str	r3, [r7, #32]
          break;
 8000f28:	e024      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	3308      	adds	r3, #8
 8000f30:	623b      	str	r3, [r7, #32]
          break;
 8000f32:	e01f      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	330c      	adds	r3, #12
 8000f3a:	623b      	str	r3, [r7, #32]
          break;
 8000f3c:	e01a      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f46:	2304      	movs	r3, #4
 8000f48:	623b      	str	r3, [r7, #32]
          break;
 8000f4a:	e013      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d105      	bne.n	8000f60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f54:	2308      	movs	r3, #8
 8000f56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	611a      	str	r2, [r3, #16]
          break;
 8000f5e:	e009      	b.n	8000f74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f60:	2308      	movs	r3, #8
 8000f62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69fa      	ldr	r2, [r7, #28]
 8000f68:	615a      	str	r2, [r3, #20]
          break;
 8000f6a:	e003      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
          break;
 8000f70:	e000      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          break;
 8000f72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2bff      	cmp	r3, #255	@ 0xff
 8000f78:	d801      	bhi.n	8000f7e <HAL_GPIO_Init+0x13a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	e001      	b.n	8000f82 <HAL_GPIO_Init+0x13e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3304      	adds	r3, #4
 8000f82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	2bff      	cmp	r3, #255	@ 0xff
 8000f88:	d802      	bhi.n	8000f90 <HAL_GPIO_Init+0x14c>
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	e002      	b.n	8000f96 <HAL_GPIO_Init+0x152>
 8000f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f92:	3b08      	subs	r3, #8
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	210f      	movs	r1, #15
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	6a39      	ldr	r1, [r7, #32]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 80b1 	beq.w	8001126 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc4:	4b4d      	ldr	r3, [pc, #308]	@ (80010fc <HAL_GPIO_Init+0x2b8>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a4c      	ldr	r2, [pc, #304]	@ (80010fc <HAL_GPIO_Init+0x2b8>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80010fc <HAL_GPIO_Init+0x2b8>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fdc:	4a48      	ldr	r2, [pc, #288]	@ (8001100 <HAL_GPIO_Init+0x2bc>)
 8000fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a40      	ldr	r2, [pc, #256]	@ (8001104 <HAL_GPIO_Init+0x2c0>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d013      	beq.n	8001030 <HAL_GPIO_Init+0x1ec>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a3f      	ldr	r2, [pc, #252]	@ (8001108 <HAL_GPIO_Init+0x2c4>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d00d      	beq.n	800102c <HAL_GPIO_Init+0x1e8>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a3e      	ldr	r2, [pc, #248]	@ (800110c <HAL_GPIO_Init+0x2c8>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d007      	beq.n	8001028 <HAL_GPIO_Init+0x1e4>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a3d      	ldr	r2, [pc, #244]	@ (8001110 <HAL_GPIO_Init+0x2cc>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d101      	bne.n	8001024 <HAL_GPIO_Init+0x1e0>
 8001020:	2303      	movs	r3, #3
 8001022:	e006      	b.n	8001032 <HAL_GPIO_Init+0x1ee>
 8001024:	2304      	movs	r3, #4
 8001026:	e004      	b.n	8001032 <HAL_GPIO_Init+0x1ee>
 8001028:	2302      	movs	r3, #2
 800102a:	e002      	b.n	8001032 <HAL_GPIO_Init+0x1ee>
 800102c:	2301      	movs	r3, #1
 800102e:	e000      	b.n	8001032 <HAL_GPIO_Init+0x1ee>
 8001030:	2300      	movs	r3, #0
 8001032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001034:	f002 0203 	and.w	r2, r2, #3
 8001038:	0092      	lsls	r2, r2, #2
 800103a:	4093      	lsls	r3, r2
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001042:	492f      	ldr	r1, [pc, #188]	@ (8001100 <HAL_GPIO_Init+0x2bc>)
 8001044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800105c:	4b2d      	ldr	r3, [pc, #180]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	492c      	ldr	r1, [pc, #176]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	608b      	str	r3, [r1, #8]
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800106a:	4b2a      	ldr	r3, [pc, #168]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	43db      	mvns	r3, r3
 8001072:	4928      	ldr	r1, [pc, #160]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 8001074:	4013      	ands	r3, r2
 8001076:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d006      	beq.n	8001092 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001084:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	4922      	ldr	r1, [pc, #136]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	60cb      	str	r3, [r1, #12]
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001092:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	43db      	mvns	r3, r3
 800109a:	491e      	ldr	r1, [pc, #120]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 800109c:	4013      	ands	r3, r2
 800109e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010ac:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	4918      	ldr	r1, [pc, #96]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	604b      	str	r3, [r1, #4]
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010ba:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4914      	ldr	r1, [pc, #80]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d021      	beq.n	8001118 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	490e      	ldr	r1, [pc, #56]	@ (8001114 <HAL_GPIO_Init+0x2d0>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	600b      	str	r3, [r1, #0]
 80010e0:	e021      	b.n	8001126 <HAL_GPIO_Init+0x2e2>
 80010e2:	bf00      	nop
 80010e4:	10320000 	.word	0x10320000
 80010e8:	10310000 	.word	0x10310000
 80010ec:	10220000 	.word	0x10220000
 80010f0:	10210000 	.word	0x10210000
 80010f4:	10120000 	.word	0x10120000
 80010f8:	10110000 	.word	0x10110000
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010000 	.word	0x40010000
 8001104:	40010800 	.word	0x40010800
 8001108:	40010c00 	.word	0x40010c00
 800110c:	40011000 	.word	0x40011000
 8001110:	40011400 	.word	0x40011400
 8001114:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <HAL_GPIO_Init+0x304>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	43db      	mvns	r3, r3
 8001120:	4909      	ldr	r1, [pc, #36]	@ (8001148 <HAL_GPIO_Init+0x304>)
 8001122:	4013      	ands	r3, r2
 8001124:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	3301      	adds	r3, #1
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	f47f ae8e 	bne.w	8000e58 <HAL_GPIO_Init+0x14>
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	372c      	adds	r7, #44	@ 0x2c
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	40010400 	.word	0x40010400

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001168:	e003      	b.n	8001172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	611a      	str	r2, [r3, #16]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e272      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8087 	beq.w	80012aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800119c:	4b92      	ldr	r3, [pc, #584]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d00c      	beq.n	80011c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a8:	4b8f      	ldr	r3, [pc, #572]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d112      	bne.n	80011da <HAL_RCC_OscConfig+0x5e>
 80011b4:	4b8c      	ldr	r3, [pc, #560]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011c0:	d10b      	bne.n	80011da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c2:	4b89      	ldr	r3, [pc, #548]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d06c      	beq.n	80012a8 <HAL_RCC_OscConfig+0x12c>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d168      	bne.n	80012a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e24c      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011e2:	d106      	bne.n	80011f2 <HAL_RCC_OscConfig+0x76>
 80011e4:	4b80      	ldr	r3, [pc, #512]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a7f      	ldr	r2, [pc, #508]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	e02e      	b.n	8001250 <HAL_RCC_OscConfig+0xd4>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0x98>
 80011fa:	4b7b      	ldr	r3, [pc, #492]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a7a      	ldr	r2, [pc, #488]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b78      	ldr	r3, [pc, #480]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a77      	ldr	r2, [pc, #476]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800120c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e01d      	b.n	8001250 <HAL_RCC_OscConfig+0xd4>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0xbc>
 800121e:	4b72      	ldr	r3, [pc, #456]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a71      	ldr	r2, [pc, #452]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b6f      	ldr	r3, [pc, #444]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6e      	ldr	r2, [pc, #440]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e00b      	b.n	8001250 <HAL_RCC_OscConfig+0xd4>
 8001238:	4b6b      	ldr	r3, [pc, #428]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a6a      	ldr	r2, [pc, #424]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800123e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b68      	ldr	r3, [pc, #416]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a67      	ldr	r2, [pc, #412]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800124e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fce2 	bl	8000c20 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fcde 	bl	8000c20 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	@ 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e200      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b5d      	ldr	r3, [pc, #372]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0xe4>
 800127e:	e014      	b.n	80012aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fcce 	bl	8000c20 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fcca 	bl	8000c20 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	@ 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1ec      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	4b53      	ldr	r3, [pc, #332]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x10c>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d063      	beq.n	800137e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012b6:	4b4c      	ldr	r3, [pc, #304]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012c2:	4b49      	ldr	r3, [pc, #292]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d11c      	bne.n	8001308 <HAL_RCC_OscConfig+0x18c>
 80012ce:	4b46      	ldr	r3, [pc, #280]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d116      	bne.n	8001308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	4b43      	ldr	r3, [pc, #268]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x176>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e1c0      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f2:	4b3d      	ldr	r3, [pc, #244]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4939      	ldr	r1, [pc, #228]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	e03a      	b.n	800137e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001310:	4b36      	ldr	r3, [pc, #216]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fc83 	bl	8000c20 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff fc7f 	bl	8000c20 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e1a1      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	4b2d      	ldr	r3, [pc, #180]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4927      	ldr	r1, [pc, #156]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
 8001350:	e015      	b.n	800137e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001352:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fc62 	bl	8000c20 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001360:	f7ff fc5e 	bl	8000c20 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e180      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d03a      	beq.n	8001400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d019      	beq.n	80013c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001392:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <HAL_RCC_OscConfig+0x274>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001398:	f7ff fc42 	bl	8000c20 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fc3e 	bl	8000c20 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e160      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013be:	2001      	movs	r0, #1
 80013c0:	f000 face 	bl	8001960 <RCC_Delay>
 80013c4:	e01c      	b.n	8001400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c6:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <HAL_RCC_OscConfig+0x274>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013cc:	f7ff fc28 	bl	8000c20 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d2:	e00f      	b.n	80013f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fc24 	bl	8000c20 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d908      	bls.n	80013f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e146      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	42420000 	.word	0x42420000
 80013f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f4:	4b92      	ldr	r3, [pc, #584]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1e9      	bne.n	80013d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a6 	beq.w	800155a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001412:	4b8b      	ldr	r3, [pc, #556]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10d      	bne.n	800143a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b88      	ldr	r3, [pc, #544]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a87      	ldr	r2, [pc, #540]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b85      	ldr	r3, [pc, #532]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001436:	2301      	movs	r3, #1
 8001438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143a:	4b82      	ldr	r3, [pc, #520]	@ (8001644 <HAL_RCC_OscConfig+0x4c8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d118      	bne.n	8001478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001446:	4b7f      	ldr	r3, [pc, #508]	@ (8001644 <HAL_RCC_OscConfig+0x4c8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a7e      	ldr	r2, [pc, #504]	@ (8001644 <HAL_RCC_OscConfig+0x4c8>)
 800144c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001452:	f7ff fbe5 	bl	8000c20 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145a:	f7ff fbe1 	bl	8000c20 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b64      	cmp	r3, #100	@ 0x64
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e103      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	4b75      	ldr	r3, [pc, #468]	@ (8001644 <HAL_RCC_OscConfig+0x4c8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d106      	bne.n	800148e <HAL_RCC_OscConfig+0x312>
 8001480:	4b6f      	ldr	r3, [pc, #444]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4a6e      	ldr	r2, [pc, #440]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6213      	str	r3, [r2, #32]
 800148c:	e02d      	b.n	80014ea <HAL_RCC_OscConfig+0x36e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x334>
 8001496:	4b6a      	ldr	r3, [pc, #424]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a69      	ldr	r2, [pc, #420]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	f023 0301 	bic.w	r3, r3, #1
 80014a0:	6213      	str	r3, [r2, #32]
 80014a2:	4b67      	ldr	r3, [pc, #412]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4a66      	ldr	r2, [pc, #408]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	f023 0304 	bic.w	r3, r3, #4
 80014ac:	6213      	str	r3, [r2, #32]
 80014ae:	e01c      	b.n	80014ea <HAL_RCC_OscConfig+0x36e>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b05      	cmp	r3, #5
 80014b6:	d10c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x356>
 80014b8:	4b61      	ldr	r3, [pc, #388]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a60      	ldr	r2, [pc, #384]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4a5d      	ldr	r2, [pc, #372]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6213      	str	r3, [r2, #32]
 80014d0:	e00b      	b.n	80014ea <HAL_RCC_OscConfig+0x36e>
 80014d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	6213      	str	r3, [r2, #32]
 80014de:	4b58      	ldr	r3, [pc, #352]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4a57      	ldr	r2, [pc, #348]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	f023 0304 	bic.w	r3, r3, #4
 80014e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d015      	beq.n	800151e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fb95 	bl	8000c20 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f8:	e00a      	b.n	8001510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff fb91 	bl	8000c20 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001508:	4293      	cmp	r3, r2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e0b1      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	4b4b      	ldr	r3, [pc, #300]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0ee      	beq.n	80014fa <HAL_RCC_OscConfig+0x37e>
 800151c:	e014      	b.n	8001548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff fb7f 	bl	8000c20 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001526:	f7ff fb7b 	bl	8000c20 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001534:	4293      	cmp	r3, r2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e09b      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153c:	4b40      	ldr	r3, [pc, #256]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1ee      	bne.n	8001526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d105      	bne.n	800155a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800154e:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a3b      	ldr	r2, [pc, #236]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8087 	beq.w	8001672 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001564:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b08      	cmp	r3, #8
 800156e:	d061      	beq.n	8001634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d146      	bne.n	8001606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001578:	4b33      	ldr	r3, [pc, #204]	@ (8001648 <HAL_RCC_OscConfig+0x4cc>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fb4f 	bl	8000c20 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff fb4b 	bl	8000c20 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e06d      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001598:	4b29      	ldr	r3, [pc, #164]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ac:	d108      	bne.n	80015c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ae:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	4921      	ldr	r1, [pc, #132]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a19      	ldr	r1, [r3, #32]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d0:	430b      	orrs	r3, r1
 80015d2:	491b      	ldr	r1, [pc, #108]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <HAL_RCC_OscConfig+0x4cc>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fb1f 	bl	8000c20 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fb1b 	bl	8000c20 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e03d      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x46a>
 8001604:	e035      	b.n	8001672 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <HAL_RCC_OscConfig+0x4cc>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fb08 	bl	8000c20 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fb04 	bl	8000c20 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e026      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x498>
 8001632:	e01e      	b.n	8001672 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e019      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
 8001640:	40021000 	.word	0x40021000
 8001644:	40007000 	.word	0x40007000
 8001648:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <HAL_RCC_OscConfig+0x500>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	429a      	cmp	r2, r3
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000

08001680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0d0      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b6a      	ldr	r3, [pc, #424]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d910      	bls.n	80016c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b67      	ldr	r3, [pc, #412]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 0207 	bic.w	r2, r3, #7
 80016aa:	4965      	ldr	r1, [pc, #404]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b2:	4b63      	ldr	r3, [pc, #396]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0b8      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016dc:	4b59      	ldr	r3, [pc, #356]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a58      	ldr	r2, [pc, #352]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f4:	4b53      	ldr	r3, [pc, #332]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4a52      	ldr	r2, [pc, #328]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001700:	4b50      	ldr	r3, [pc, #320]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	494d      	ldr	r1, [pc, #308]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d040      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b47      	ldr	r3, [pc, #284]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d115      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e07f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173e:	4b41      	ldr	r3, [pc, #260]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e073      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	4b3d      	ldr	r3, [pc, #244]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e06b      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175e:	4b39      	ldr	r3, [pc, #228]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f023 0203 	bic.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4936      	ldr	r1, [pc, #216]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff fa56 	bl	8000c20 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff fa52 	bl	8000c20 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e053      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	4b2d      	ldr	r3, [pc, #180]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 020c 	and.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	429a      	cmp	r2, r3
 800179e:	d1eb      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a0:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d210      	bcs.n	80017d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 0207 	bic.w	r2, r3, #7
 80017b6:	4922      	ldr	r1, [pc, #136]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e032      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017dc:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4916      	ldr	r1, [pc, #88]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d009      	beq.n	800180e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017fa:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	490e      	ldr	r1, [pc, #56]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800180e:	f000 f821 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 8001812:	4602      	mov	r2, r0
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	490a      	ldr	r1, [pc, #40]	@ (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	5ccb      	ldrb	r3, [r1, r3]
 8001822:	fa22 f303 	lsr.w	r3, r2, r3
 8001826:	4a09      	ldr	r2, [pc, #36]	@ (800184c <HAL_RCC_ClockConfig+0x1cc>)
 8001828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800182a:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <HAL_RCC_ClockConfig+0x1d0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f9b4 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40022000 	.word	0x40022000
 8001844:	40021000 	.word	0x40021000
 8001848:	08007400 	.word	0x08007400
 800184c:	20000000 	.word	0x20000000
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800186e:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d002      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x30>
 800187e:	2b08      	cmp	r3, #8
 8001880:	d003      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x36>
 8001882:	e027      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001886:	613b      	str	r3, [r7, #16]
      break;
 8001888:	e027      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	0c9b      	lsrs	r3, r3, #18
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	4a17      	ldr	r2, [pc, #92]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001894:	5cd3      	ldrb	r3, [r2, r3]
 8001896:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d010      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	0c5b      	lsrs	r3, r3, #17
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	4a11      	ldr	r2, [pc, #68]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x98>)
 80018b6:	fb03 f202 	mul.w	r2, r3, r2
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e004      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a0c      	ldr	r2, [pc, #48]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
 80018cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	613b      	str	r3, [r7, #16]
      break;
 80018d2:	e002      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x98>)
 80018d6:	613b      	str	r3, [r7, #16]
      break;
 80018d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018da:	693b      	ldr	r3, [r7, #16]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	007a1200 	.word	0x007a1200
 80018f0:	08007418 	.word	0x08007418
 80018f4:	08007428 	.word	0x08007428
 80018f8:	003d0900 	.word	0x003d0900

080018fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001900:	4b02      	ldr	r3, [pc, #8]	@ (800190c <HAL_RCC_GetHCLKFreq+0x10>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	20000000 	.word	0x20000000

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001914:	f7ff fff2 	bl	80018fc <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	@ (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	08007410 	.word	0x08007410

08001938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800193c:	f7ff ffde 	bl	80018fc <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	0adb      	lsrs	r3, r3, #11
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	@ (800195c <HAL_RCC_GetPCLK2Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	08007410 	.word	0x08007410

08001960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001968:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <RCC_Delay+0x34>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <RCC_Delay+0x38>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0a5b      	lsrs	r3, r3, #9
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800197c:	bf00      	nop
  }
  while (Delay --);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e5a      	subs	r2, r3, #1
 8001982:	60fa      	str	r2, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f9      	bne.n	800197c <RCC_Delay+0x1c>
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000000 	.word	0x20000000
 8001998:	10624dd3 	.word	0x10624dd3

0800199c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e076      	b.n	8001a9c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d108      	bne.n	80019c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80019be:	d009      	beq.n	80019d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
 80019c6:	e005      	b.n	80019d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe ff3e 	bl	8000870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a58:	ea42 0103 	orr.w	r1, r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	0c1a      	lsrs	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f002 0204 	and.w	r2, r2, #4
 8001a7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ab4:	f7ff f8b4 	bl	8000c20 <HAL_GetTick>
 8001ab8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d001      	beq.n	8001ace <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001aca:	2302      	movs	r3, #2
 8001acc:	e12a      	b.n	8001d24 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <HAL_SPI_Transmit+0x36>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e122      	b.n	8001d24 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_SPI_Transmit+0x48>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e11b      	b.n	8001d24 <HAL_SPI_Transmit+0x280>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2203      	movs	r2, #3
 8001af8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	88fa      	ldrh	r2, [r7, #6]
 8001b12:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b3a:	d10f      	bne.n	8001b5c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b66:	2b40      	cmp	r3, #64	@ 0x40
 8001b68:	d007      	beq.n	8001b7a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b82:	d152      	bne.n	8001c2a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_SPI_Transmit+0xee>
 8001b8c:	8b7b      	ldrh	r3, [r7, #26]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d145      	bne.n	8001c1e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	881a      	ldrh	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	1c9a      	adds	r2, r3, #2
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001bb6:	e032      	b.n	8001c1e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d112      	bne.n	8001bec <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	881a      	ldrh	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	1c9a      	adds	r2, r3, #2
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001bea:	e018      	b.n	8001c1e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bec:	f7ff f818 	bl	8000c20 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d803      	bhi.n	8001c04 <HAL_SPI_Transmit+0x160>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c02:	d102      	bne.n	8001c0a <HAL_SPI_Transmit+0x166>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e082      	b.n	8001d24 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1c7      	bne.n	8001bb8 <HAL_SPI_Transmit+0x114>
 8001c28:	e053      	b.n	8001cd2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_SPI_Transmit+0x194>
 8001c32:	8b7b      	ldrh	r3, [r7, #26]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d147      	bne.n	8001cc8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	330c      	adds	r3, #12
 8001c42:	7812      	ldrb	r2, [r2, #0]
 8001c44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c5e:	e033      	b.n	8001cc8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d113      	bne.n	8001c96 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	330c      	adds	r3, #12
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001c94:	e018      	b.n	8001cc8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c96:	f7fe ffc3 	bl	8000c20 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d803      	bhi.n	8001cae <HAL_SPI_Transmit+0x20a>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cac:	d102      	bne.n	8001cb4 <HAL_SPI_Transmit+0x210>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e02d      	b.n	8001d24 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1c6      	bne.n	8001c60 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	6839      	ldr	r1, [r7, #0]
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 fa5a 	bl	8002190 <SPI_EndRxTxTransaction>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10a      	bne.n	8001d06 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001d22:	2300      	movs	r3, #0
  }
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	@ 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d3e:	f7fe ff6f 	bl	8000c20 <HAL_GetTick>
 8001d42:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d4a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d56:	7ffb      	ldrb	r3, [r7, #31]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d00c      	beq.n	8001d76 <HAL_SPI_TransmitReceive+0x4a>
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d62:	d106      	bne.n	8001d72 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <HAL_SPI_TransmitReceive+0x46>
 8001d6c:	7ffb      	ldrb	r3, [r7, #31]
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d001      	beq.n	8001d76 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001d72:	2302      	movs	r3, #2
 8001d74:	e17f      	b.n	8002076 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_SPI_TransmitReceive+0x5c>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_SPI_TransmitReceive+0x5c>
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e174      	b.n	8002076 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_SPI_TransmitReceive+0x6e>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e16d      	b.n	8002076 <HAL_SPI_TransmitReceive+0x34a>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d003      	beq.n	8001db6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2205      	movs	r2, #5
 8001db2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	887a      	ldrh	r2, [r7, #2]
 8001dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	887a      	ldrh	r2, [r7, #2]
 8001dde:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df6:	2b40      	cmp	r3, #64	@ 0x40
 8001df8:	d007      	beq.n	8001e0a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e12:	d17e      	bne.n	8001f12 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <HAL_SPI_TransmitReceive+0xf6>
 8001e1c:	8afb      	ldrh	r3, [r7, #22]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d16c      	bne.n	8001efc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	881a      	ldrh	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	1c9a      	adds	r2, r3, #2
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e46:	e059      	b.n	8001efc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d11b      	bne.n	8001e8e <HAL_SPI_TransmitReceive+0x162>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d016      	beq.n	8001e8e <HAL_SPI_TransmitReceive+0x162>
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d113      	bne.n	8001e8e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	881a      	ldrh	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	1c9a      	adds	r2, r3, #2
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d119      	bne.n	8001ed0 <HAL_SPI_TransmitReceive+0x1a4>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d014      	beq.n	8001ed0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb0:	b292      	uxth	r2, r2
 8001eb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb8:	1c9a      	adds	r2, r3, #2
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ed0:	f7fe fea6 	bl	8000c20 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d80d      	bhi.n	8001efc <HAL_SPI_TransmitReceive+0x1d0>
 8001ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee6:	d009      	beq.n	8001efc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0bc      	b.n	8002076 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1a0      	bne.n	8001e48 <HAL_SPI_TransmitReceive+0x11c>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d19b      	bne.n	8001e48 <HAL_SPI_TransmitReceive+0x11c>
 8001f10:	e082      	b.n	8002018 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_SPI_TransmitReceive+0x1f4>
 8001f1a:	8afb      	ldrh	r3, [r7, #22]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d171      	bne.n	8002004 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	330c      	adds	r3, #12
 8001f2a:	7812      	ldrb	r2, [r2, #0]
 8001f2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f46:	e05d      	b.n	8002004 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d11c      	bne.n	8001f90 <HAL_SPI_TransmitReceive+0x264>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <HAL_SPI_TransmitReceive+0x264>
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d114      	bne.n	8001f90 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	330c      	adds	r3, #12
 8001f70:	7812      	ldrb	r2, [r2, #0]
 8001f72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d119      	bne.n	8001fd2 <HAL_SPI_TransmitReceive+0x2a6>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d014      	beq.n	8001fd2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001fd2:	f7fe fe25 	bl	8000c20 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d803      	bhi.n	8001fea <HAL_SPI_TransmitReceive+0x2be>
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d102      	bne.n	8001ff0 <HAL_SPI_TransmitReceive+0x2c4>
 8001fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e038      	b.n	8002076 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d19c      	bne.n	8001f48 <HAL_SPI_TransmitReceive+0x21c>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d197      	bne.n	8001f48 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f8b7 	bl	8002190 <SPI_EndRxTxTransaction>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e01d      	b.n	8002076 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10a      	bne.n	8002058 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002074:	2300      	movs	r3, #0
  }
}
 8002076:	4618      	mov	r0, r3
 8002078:	3728      	adds	r7, #40	@ 0x28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002090:	f7fe fdc6 	bl	8000c20 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4413      	add	r3, r2
 800209e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020a0:	f7fe fdbe 	bl	8000c20 <HAL_GetTick>
 80020a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020a6:	4b39      	ldr	r3, [pc, #228]	@ (800218c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	015b      	lsls	r3, r3, #5
 80020ac:	0d1b      	lsrs	r3, r3, #20
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020b6:	e054      	b.n	8002162 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020be:	d050      	beq.n	8002162 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020c0:	f7fe fdae 	bl	8000c20 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d902      	bls.n	80020d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d13d      	bne.n	8002152 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80020e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020ee:	d111      	bne.n	8002114 <SPI_WaitFlagStateUntilTimeout+0x94>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020f8:	d004      	beq.n	8002104 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002102:	d107      	bne.n	8002114 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800211c:	d10f      	bne.n	800213e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800213c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e017      	b.n	8002182 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	3b01      	subs	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4013      	ands	r3, r2
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	429a      	cmp	r2, r3
 8002170:	bf0c      	ite	eq
 8002172:	2301      	moveq	r3, #1
 8002174:	2300      	movne	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	429a      	cmp	r2, r3
 800217e:	d19b      	bne.n	80020b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000

08002190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2201      	movs	r2, #1
 80021a4:	2102      	movs	r1, #2
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7ff ff6a 	bl	8002080 <SPI_WaitFlagStateUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	f043 0220 	orr.w	r2, r3, #32
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e013      	b.n	80021ea <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2200      	movs	r2, #0
 80021ca:	2180      	movs	r1, #128	@ 0x80
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff ff57 	bl	8002080 <SPI_WaitFlagStateUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021dc:	f043 0220 	orr.w	r2, r3, #32
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e000      	b.n	80021ea <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e042      	b.n	800228a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7fe fc37 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2224      	movs	r2, #36	@ 0x24
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002234:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f972 	bl	8002520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800224a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800225a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800226a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b08a      	sub	sp, #40	@ 0x28
 8002296:	af02      	add	r7, sp, #8
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	d175      	bne.n	800239e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <HAL_UART_Transmit+0x2c>
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06e      	b.n	80023a0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2221      	movs	r2, #33	@ 0x21
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022d0:	f7fe fca6 	bl	8000c20 <HAL_GetTick>
 80022d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	88fa      	ldrh	r2, [r7, #6]
 80022da:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	88fa      	ldrh	r2, [r7, #6]
 80022e0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ea:	d108      	bne.n	80022fe <HAL_UART_Transmit+0x6c>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d104      	bne.n	80022fe <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	e003      	b.n	8002306 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002306:	e02e      	b.n	8002366 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2200      	movs	r2, #0
 8002310:	2180      	movs	r1, #128	@ 0x80
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f848 	bl	80023a8 <UART_WaitOnFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e03a      	b.n	80023a0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10b      	bne.n	8002348 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800233e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	3302      	adds	r3, #2
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	e007      	b.n	8002358 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3301      	adds	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1cb      	bne.n	8002308 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2200      	movs	r2, #0
 8002378:	2140      	movs	r1, #64	@ 0x40
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f814 	bl	80023a8 <UART_WaitOnFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e006      	b.n	80023a0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
  }
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b8:	e03b      	b.n	8002432 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d037      	beq.n	8002432 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c2:	f7fe fc2d 	bl	8000c20 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	6a3a      	ldr	r2, [r7, #32]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d302      	bcc.n	80023d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e03a      	b.n	8002452 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d023      	beq.n	8002432 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b80      	cmp	r3, #128	@ 0x80
 80023ee:	d020      	beq.n	8002432 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b40      	cmp	r3, #64	@ 0x40
 80023f4:	d01d      	beq.n	8002432 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b08      	cmp	r3, #8
 8002402:	d116      	bne.n	8002432 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f81d 	bl	800245a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2208      	movs	r2, #8
 8002424:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e00f      	b.n	8002452 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4013      	ands	r3, r2
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	429a      	cmp	r2, r3
 8002440:	bf0c      	ite	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	2300      	movne	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	429a      	cmp	r2, r3
 800244e:	d0b4      	beq.n	80023ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800245a:	b480      	push	{r7}
 800245c:	b095      	sub	sp, #84	@ 0x54
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	330c      	adds	r3, #12
 8002468:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800246c:	e853 3f00 	ldrex	r3, [r3]
 8002470:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	330c      	adds	r3, #12
 8002480:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002482:	643a      	str	r2, [r7, #64]	@ 0x40
 8002484:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002486:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002488:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800248a:	e841 2300 	strex	r3, r2, [r1]
 800248e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1e5      	bne.n	8002462 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3314      	adds	r3, #20
 800249c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	e853 3f00 	ldrex	r3, [r3]
 80024a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3314      	adds	r3, #20
 80024b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024be:	e841 2300 	strex	r3, r2, [r1]
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1e5      	bne.n	8002496 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d119      	bne.n	8002506 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	e853 3f00 	ldrex	r3, [r3]
 80024e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f023 0310 	bic.w	r3, r3, #16
 80024e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	330c      	adds	r3, #12
 80024f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024f2:	61ba      	str	r2, [r7, #24]
 80024f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f6:	6979      	ldr	r1, [r7, #20]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	e841 2300 	strex	r3, r2, [r1]
 80024fe:	613b      	str	r3, [r7, #16]
   return(result);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1e5      	bne.n	80024d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002514:	bf00      	nop
 8002516:	3754      	adds	r7, #84	@ 0x54
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
	...

08002520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	4313      	orrs	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800255a:	f023 030c 	bic.w	r3, r3, #12
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	430b      	orrs	r3, r1
 8002566:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a2c      	ldr	r2, [pc, #176]	@ (8002634 <UART_SetConfig+0x114>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d103      	bne.n	8002590 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002588:	f7ff f9d6 	bl	8001938 <HAL_RCC_GetPCLK2Freq>
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	e002      	b.n	8002596 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002590:	f7ff f9be 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8002594:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	009a      	lsls	r2, r3, #2
 80025a0:	441a      	add	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	4a22      	ldr	r2, [pc, #136]	@ (8002638 <UART_SetConfig+0x118>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	0119      	lsls	r1, r3, #4
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	009a      	lsls	r2, r3, #2
 80025c0:	441a      	add	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <UART_SetConfig+0x118>)
 80025ce:	fba3 0302 	umull	r0, r3, r3, r2
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2064      	movs	r0, #100	@ 0x64
 80025d6:	fb00 f303 	mul.w	r3, r0, r3
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	3332      	adds	r3, #50	@ 0x32
 80025e0:	4a15      	ldr	r2, [pc, #84]	@ (8002638 <UART_SetConfig+0x118>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025ec:	4419      	add	r1, r3
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	009a      	lsls	r2, r3, #2
 80025f8:	441a      	add	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	fbb2 f2f3 	udiv	r2, r2, r3
 8002604:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <UART_SetConfig+0x118>)
 8002606:	fba3 0302 	umull	r0, r3, r3, r2
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2064      	movs	r0, #100	@ 0x64
 800260e:	fb00 f303 	mul.w	r3, r0, r3
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	3332      	adds	r3, #50	@ 0x32
 8002618:	4a07      	ldr	r2, [pc, #28]	@ (8002638 <UART_SetConfig+0x118>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	f003 020f 	and.w	r2, r3, #15
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	440a      	add	r2, r1
 800262a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40013800 	.word	0x40013800
 8002638:	51eb851f 	.word	0x51eb851f

0800263c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002640:	4904      	ldr	r1, [pc, #16]	@ (8002654 <MX_FATFS_Init+0x18>)
 8002642:	4805      	ldr	r0, [pc, #20]	@ (8002658 <MX_FATFS_Init+0x1c>)
 8002644:	f004 f882 	bl	800674c <FATFS_LinkDriver>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	4b03      	ldr	r3, [pc, #12]	@ (800265c <MX_FATFS_Init+0x20>)
 800264e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	200005a4 	.word	0x200005a4
 8002658:	2000000c 	.word	0x2000000c
 800265c:	200005a0 	.word	0x200005a0

08002660 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002664:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
    return USER_SPI_initialize(pdrv);
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f9d2 	bl	8002a24 <USER_SPI_initialize>
 8002680:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
    return USER_SPI_status(pdrv);
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fab0 	bl	8002bfc <USER_SPI_status>
 800269c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	4603      	mov	r3, r0
 80026b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count);
 80026b6:	7bf8      	ldrb	r0, [r7, #15]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	f000 fab1 	bl	8002c24 <USER_SPI_read>
 80026c2:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count);
 80026dc:	7bf8      	ldrb	r0, [r7, #15]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	f000 fb04 	bl	8002cf0 <USER_SPI_write>
 80026e8:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	603a      	str	r2, [r7, #0]
 80026fc:	71fb      	strb	r3, [r7, #7]
 80026fe:	460b      	mov	r3, r1
 8002700:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8002702:	79b9      	ldrb	r1, [r7, #6]
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fb6d 	bl	8002de8 <USER_SPI_ioctl>
 800270e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002720:	f7fe fa7e 	bl	8000c20 <HAL_GetTick>
 8002724:	4603      	mov	r3, r0
 8002726:	4a04      	ldr	r2, [pc, #16]	@ (8002738 <SPI_Timer_On+0x20>)
 8002728:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800272a:	4a04      	ldr	r2, [pc, #16]	@ (800273c <SPI_Timer_On+0x24>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	200005ac 	.word	0x200005ac
 800273c:	200005b0 	.word	0x200005b0

08002740 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002744:	f7fe fa6c 	bl	8000c20 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <SPI_Timer_Status+0x24>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	1ad2      	subs	r2, r2, r3
 8002750:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <SPI_Timer_Status+0x28>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	bf34      	ite	cc
 8002758:	2301      	movcc	r3, #1
 800275a:	2300      	movcs	r3, #0
 800275c:	b2db      	uxtb	r3, r3
}
 800275e:	4618      	mov	r0, r3
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200005ac 	.word	0x200005ac
 8002768:	200005b0 	.word	0x200005b0

0800276c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af02      	add	r7, sp, #8
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002776:	f107 020f 	add.w	r2, r7, #15
 800277a:	1df9      	adds	r1, r7, #7
 800277c:	2332      	movs	r3, #50	@ 0x32
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2301      	movs	r3, #1
 8002782:	4804      	ldr	r0, [pc, #16]	@ (8002794 <xchg_spi+0x28>)
 8002784:	f7ff fad2 	bl	8001d2c <HAL_SPI_TransmitReceive>
    return rxDat;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200004f8 	.word	0x200004f8

08002798 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	e00a      	b.n	80027be <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	18d4      	adds	r4, r2, r3
 80027ae:	20ff      	movs	r0, #255	@ 0xff
 80027b0:	f7ff ffdc 	bl	800276c <xchg_spi>
 80027b4:	4603      	mov	r3, r0
 80027b6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3301      	adds	r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d3f0      	bcc.n	80027a8 <rcvr_spi_multi+0x10>
	}
}
 80027c6:	bf00      	nop
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd90      	pop	{r4, r7, pc}

080027d0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b29a      	uxth	r2, r3
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4803      	ldr	r0, [pc, #12]	@ (80027f4 <xmit_spi_multi+0x24>)
 80027e6:	f7ff f95d 	bl	8001aa4 <HAL_SPI_Transmit>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200004f8 	.word	0x200004f8

080027f8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002800:	f7fe fa0e 	bl	8000c20 <HAL_GetTick>
 8002804:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800280a:	20ff      	movs	r0, #255	@ 0xff
 800280c:	f7ff ffae 	bl	800276c <xchg_spi>
 8002810:	4603      	mov	r3, r0
 8002812:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2bff      	cmp	r3, #255	@ 0xff
 8002818:	d007      	beq.n	800282a <wait_ready+0x32>
 800281a:	f7fe fa01 	bl	8000c20 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	429a      	cmp	r2, r3
 8002828:	d8ef      	bhi.n	800280a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	2bff      	cmp	r3, #255	@ 0xff
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002844:	2201      	movs	r2, #1
 8002846:	2110      	movs	r1, #16
 8002848:	4803      	ldr	r0, [pc, #12]	@ (8002858 <despiselect+0x18>)
 800284a:	f7fe fc7f 	bl	800114c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800284e:	20ff      	movs	r0, #255	@ 0xff
 8002850:	f7ff ff8c 	bl	800276c <xchg_spi>

}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40010800 	.word	0x40010800

0800285c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002860:	2200      	movs	r2, #0
 8002862:	2110      	movs	r1, #16
 8002864:	4809      	ldr	r0, [pc, #36]	@ (800288c <spiselect+0x30>)
 8002866:	f7fe fc71 	bl	800114c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800286a:	20ff      	movs	r0, #255	@ 0xff
 800286c:	f7ff ff7e 	bl	800276c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002870:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002874:	f7ff ffc0 	bl	80027f8 <wait_ready>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <spiselect+0x26>
 800287e:	2301      	movs	r3, #1
 8002880:	e002      	b.n	8002888 <spiselect+0x2c>

	despiselect();
 8002882:	f7ff ffdd 	bl	8002840 <despiselect>
	return 0;	/* Timeout */
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40010800 	.word	0x40010800

08002890 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800289a:	20c8      	movs	r0, #200	@ 0xc8
 800289c:	f7ff ff3c 	bl	8002718 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80028a0:	20ff      	movs	r0, #255	@ 0xff
 80028a2:	f7ff ff63 	bl	800276c <xchg_spi>
 80028a6:	4603      	mov	r3, r0
 80028a8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2bff      	cmp	r3, #255	@ 0xff
 80028ae:	d104      	bne.n	80028ba <rcvr_datablock+0x2a>
 80028b0:	f7ff ff46 	bl	8002740 <SPI_Timer_Status>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f2      	bne.n	80028a0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80028be:	d001      	beq.n	80028c4 <rcvr_datablock+0x34>
 80028c0:	2300      	movs	r3, #0
 80028c2:	e00a      	b.n	80028da <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ff66 	bl	8002798 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80028cc:	20ff      	movs	r0, #255	@ 0xff
 80028ce:	f7ff ff4d 	bl	800276c <xchg_spi>
 80028d2:	20ff      	movs	r0, #255	@ 0xff
 80028d4:	f7ff ff4a 	bl	800276c <xchg_spi>

	return 1;						/* Function succeeded */
 80028d8:	2301      	movs	r3, #1
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80028ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028f2:	f7ff ff81 	bl	80027f8 <wait_ready>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <xmit_datablock+0x1e>
 80028fc:	2300      	movs	r3, #0
 80028fe:	e01e      	b.n	800293e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ff32 	bl	800276c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	2bfd      	cmp	r3, #253	@ 0xfd
 800290c:	d016      	beq.n	800293c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800290e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ff5c 	bl	80027d0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002918:	20ff      	movs	r0, #255	@ 0xff
 800291a:	f7ff ff27 	bl	800276c <xchg_spi>
 800291e:	20ff      	movs	r0, #255	@ 0xff
 8002920:	f7ff ff24 	bl	800276c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002924:	20ff      	movs	r0, #255	@ 0xff
 8002926:	f7ff ff21 	bl	800276c <xchg_spi>
 800292a:	4603      	mov	r3, r0
 800292c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	2b05      	cmp	r3, #5
 8002936:	d001      	beq.n	800293c <xmit_datablock+0x5a>
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <xmit_datablock+0x5c>
	}
	return 1;
 800293c:	2301      	movs	r3, #1
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	6039      	str	r1, [r7, #0]
 8002950:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	da0e      	bge.n	8002978 <send_cmd+0x32>
		cmd &= 0x7F;
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002960:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002962:	2100      	movs	r1, #0
 8002964:	2037      	movs	r0, #55	@ 0x37
 8002966:	f7ff ffee 	bl	8002946 <send_cmd>
 800296a:	4603      	mov	r3, r0
 800296c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800296e:	7bbb      	ldrb	r3, [r7, #14]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d901      	bls.n	8002978 <send_cmd+0x32>
 8002974:	7bbb      	ldrb	r3, [r7, #14]
 8002976:	e051      	b.n	8002a1c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	2b0c      	cmp	r3, #12
 800297c:	d008      	beq.n	8002990 <send_cmd+0x4a>
		despiselect();
 800297e:	f7ff ff5f 	bl	8002840 <despiselect>
		if (!spiselect()) return 0xFF;
 8002982:	f7ff ff6b 	bl	800285c <spiselect>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <send_cmd+0x4a>
 800298c:	23ff      	movs	r3, #255	@ 0xff
 800298e:	e045      	b.n	8002a1c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fee7 	bl	800276c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	0e1b      	lsrs	r3, r3, #24
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fee1 	bl	800276c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fedb 	bl	800276c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fed5 	bl	800276c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fed0 	bl	800276c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <send_cmd+0x94>
 80029d6:	2395      	movs	r3, #149	@ 0x95
 80029d8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d101      	bne.n	80029e4 <send_cmd+0x9e>
 80029e0:	2387      	movs	r3, #135	@ 0x87
 80029e2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fec0 	bl	800276c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	2b0c      	cmp	r3, #12
 80029f0:	d102      	bne.n	80029f8 <send_cmd+0xb2>
 80029f2:	20ff      	movs	r0, #255	@ 0xff
 80029f4:	f7ff feba 	bl	800276c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80029f8:	230a      	movs	r3, #10
 80029fa:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80029fc:	20ff      	movs	r0, #255	@ 0xff
 80029fe:	f7ff feb5 	bl	800276c <xchg_spi>
 8002a02:	4603      	mov	r3, r0
 8002a04:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002a06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da05      	bge.n	8002a1a <send_cmd+0xd4>
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <send_cmd+0xb6>

	return res;							/* Return received response */
 8002a1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <USER_SPI_initialize+0x14>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0d6      	b.n	8002be6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002a38:	4b6d      	ldr	r3, [pc, #436]	@ (8002bf0 <USER_SPI_initialize+0x1cc>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <USER_SPI_initialize+0x2a>
 8002a46:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf0 <USER_SPI_initialize+0x1cc>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	e0cb      	b.n	8002be6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8002a4e:	4b69      	ldr	r3, [pc, #420]	@ (8002bf4 <USER_SPI_initialize+0x1d0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8002a58:	4b66      	ldr	r3, [pc, #408]	@ (8002bf4 <USER_SPI_initialize+0x1d0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8002a60:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002a62:	230a      	movs	r3, #10
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	e005      	b.n	8002a74 <USER_SPI_initialize+0x50>
 8002a68:	20ff      	movs	r0, #255	@ 0xff
 8002a6a:	f7ff fe7f 	bl	800276c <xchg_spi>
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f6      	bne.n	8002a68 <USER_SPI_initialize+0x44>

	ty = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7ff ff60 	bl	8002946 <send_cmd>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	f040 808b 	bne.w	8002ba4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002a8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a92:	f7ff fe41 	bl	8002718 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002a96:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8002a9a:	2008      	movs	r0, #8
 8002a9c:	f7ff ff53 	bl	8002946 <send_cmd>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d151      	bne.n	8002b4a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	73fb      	strb	r3, [r7, #15]
 8002aaa:	e00d      	b.n	8002ac8 <USER_SPI_initialize+0xa4>
 8002aac:	7bfc      	ldrb	r4, [r7, #15]
 8002aae:	20ff      	movs	r0, #255	@ 0xff
 8002ab0:	f7ff fe5c 	bl	800276c <xchg_spi>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f104 0310 	add.w	r3, r4, #16
 8002abc:	443b      	add	r3, r7
 8002abe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d9ee      	bls.n	8002aac <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002ace:	7abb      	ldrb	r3, [r7, #10]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d167      	bne.n	8002ba4 <USER_SPI_initialize+0x180>
 8002ad4:	7afb      	ldrb	r3, [r7, #11]
 8002ad6:	2baa      	cmp	r3, #170	@ 0xaa
 8002ad8:	d164      	bne.n	8002ba4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002ada:	bf00      	nop
 8002adc:	f7ff fe30 	bl	8002740 <SPI_Timer_Status>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <USER_SPI_initialize+0xd2>
 8002ae6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002aea:	20a9      	movs	r0, #169	@ 0xa9
 8002aec:	f7ff ff2b 	bl	8002946 <send_cmd>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f2      	bne.n	8002adc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002af6:	f7ff fe23 	bl	8002740 <SPI_Timer_Status>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d051      	beq.n	8002ba4 <USER_SPI_initialize+0x180>
 8002b00:	2100      	movs	r1, #0
 8002b02:	203a      	movs	r0, #58	@ 0x3a
 8002b04:	f7ff ff1f 	bl	8002946 <send_cmd>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d14a      	bne.n	8002ba4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
 8002b12:	e00d      	b.n	8002b30 <USER_SPI_initialize+0x10c>
 8002b14:	7bfc      	ldrb	r4, [r7, #15]
 8002b16:	20ff      	movs	r0, #255	@ 0xff
 8002b18:	f7ff fe28 	bl	800276c <xchg_spi>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f104 0310 	add.w	r3, r4, #16
 8002b24:	443b      	add	r3, r7
 8002b26:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d9ee      	bls.n	8002b14 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002b36:	7a3b      	ldrb	r3, [r7, #8]
 8002b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <USER_SPI_initialize+0x120>
 8002b40:	230c      	movs	r3, #12
 8002b42:	e000      	b.n	8002b46 <USER_SPI_initialize+0x122>
 8002b44:	2304      	movs	r3, #4
 8002b46:	737b      	strb	r3, [r7, #13]
 8002b48:	e02c      	b.n	8002ba4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	20a9      	movs	r0, #169	@ 0xa9
 8002b4e:	f7ff fefa 	bl	8002946 <send_cmd>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d804      	bhi.n	8002b62 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002b58:	2302      	movs	r3, #2
 8002b5a:	737b      	strb	r3, [r7, #13]
 8002b5c:	23a9      	movs	r3, #169	@ 0xa9
 8002b5e:	73bb      	strb	r3, [r7, #14]
 8002b60:	e003      	b.n	8002b6a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002b62:	2301      	movs	r3, #1
 8002b64:	737b      	strb	r3, [r7, #13]
 8002b66:	2301      	movs	r3, #1
 8002b68:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002b6a:	bf00      	nop
 8002b6c:	f7ff fde8 	bl	8002740 <SPI_Timer_Status>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <USER_SPI_initialize+0x162>
 8002b76:	7bbb      	ldrb	r3, [r7, #14]
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fee3 	bl	8002946 <send_cmd>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f2      	bne.n	8002b6c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002b86:	f7ff fddb 	bl	8002740 <SPI_Timer_Status>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <USER_SPI_initialize+0x17c>
 8002b90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b94:	2010      	movs	r0, #16
 8002b96:	f7ff fed6 	bl	8002946 <send_cmd>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <USER_SPI_initialize+0x180>
				ty = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002ba4:	4a14      	ldr	r2, [pc, #80]	@ (8002bf8 <USER_SPI_initialize+0x1d4>)
 8002ba6:	7b7b      	ldrb	r3, [r7, #13]
 8002ba8:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002baa:	f7ff fe49 	bl	8002840 <despiselect>

	if (ty) {			/* OK */
 8002bae:	7b7b      	ldrb	r3, [r7, #13]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d012      	beq.n	8002bda <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf4 <USER_SPI_initialize+0x1d0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <USER_SPI_initialize+0x1d0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0210 	orr.w	r2, r2, #16
 8002bc6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002bc8:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <USER_SPI_initialize+0x1cc>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <USER_SPI_initialize+0x1cc>)
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e002      	b.n	8002be0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002bda:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <USER_SPI_initialize+0x1cc>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002be0:	4b03      	ldr	r3, [pc, #12]	@ (8002bf0 <USER_SPI_initialize+0x1cc>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	b2db      	uxtb	r3, r3
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd90      	pop	{r4, r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000020 	.word	0x20000020
 8002bf4:	200004f8 	.word	0x200004f8
 8002bf8:	200005a8 	.word	0x200005a8

08002bfc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <USER_SPI_status+0x14>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e002      	b.n	8002c16 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002c10:	4b03      	ldr	r3, [pc, #12]	@ (8002c20 <USER_SPI_status+0x24>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b2db      	uxtb	r3, r3
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	20000020 	.word	0x20000020

08002c24 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <USER_SPI_read+0x1c>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <USER_SPI_read+0x20>
 8002c40:	2304      	movs	r3, #4
 8002c42:	e04d      	b.n	8002ce0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002c44:	4b28      	ldr	r3, [pc, #160]	@ (8002ce8 <USER_SPI_read+0xc4>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <USER_SPI_read+0x32>
 8002c52:	2303      	movs	r3, #3
 8002c54:	e044      	b.n	8002ce0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002c56:	4b25      	ldr	r3, [pc, #148]	@ (8002cec <USER_SPI_read+0xc8>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <USER_SPI_read+0x44>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	025b      	lsls	r3, r3, #9
 8002c66:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d111      	bne.n	8002c92 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	2011      	movs	r0, #17
 8002c72:	f7ff fe68 	bl	8002946 <send_cmd>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d129      	bne.n	8002cd0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002c7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c80:	68b8      	ldr	r0, [r7, #8]
 8002c82:	f7ff fe05 	bl	8002890 <rcvr_datablock>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d021      	beq.n	8002cd0 <USER_SPI_read+0xac>
			count = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	e01e      	b.n	8002cd0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	2012      	movs	r0, #18
 8002c96:	f7ff fe56 	bl	8002946 <send_cmd>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d117      	bne.n	8002cd0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002ca0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ca4:	68b8      	ldr	r0, [r7, #8]
 8002ca6:	f7ff fdf3 	bl	8002890 <rcvr_datablock>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <USER_SPI_read+0xa2>
				buff += 512;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002cb6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ed      	bne.n	8002ca0 <USER_SPI_read+0x7c>
 8002cc4:	e000      	b.n	8002cc8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002cc6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002cc8:	2100      	movs	r1, #0
 8002cca:	200c      	movs	r0, #12
 8002ccc:	f7ff fe3b 	bl	8002946 <send_cmd>
		}
	}
	despiselect();
 8002cd0:	f7ff fdb6 	bl	8002840 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000020 	.word	0x20000020
 8002cec:	200005a8 	.word	0x200005a8

08002cf0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <USER_SPI_write+0x1c>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <USER_SPI_write+0x20>
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	e063      	b.n	8002dd8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002d10:	4b33      	ldr	r3, [pc, #204]	@ (8002de0 <USER_SPI_write+0xf0>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <USER_SPI_write+0x32>
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e05a      	b.n	8002dd8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002d22:	4b2f      	ldr	r3, [pc, #188]	@ (8002de0 <USER_SPI_write+0xf0>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <USER_SPI_write+0x44>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e051      	b.n	8002dd8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002d34:	4b2b      	ldr	r3, [pc, #172]	@ (8002de4 <USER_SPI_write+0xf4>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <USER_SPI_write+0x56>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	025b      	lsls	r3, r3, #9
 8002d44:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d110      	bne.n	8002d6e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	2018      	movs	r0, #24
 8002d50:	f7ff fdf9 	bl	8002946 <send_cmd>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d136      	bne.n	8002dc8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002d5a:	21fe      	movs	r1, #254	@ 0xfe
 8002d5c:	68b8      	ldr	r0, [r7, #8]
 8002d5e:	f7ff fdc0 	bl	80028e2 <xmit_datablock>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d02f      	beq.n	8002dc8 <USER_SPI_write+0xd8>
			count = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	e02c      	b.n	8002dc8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002de4 <USER_SPI_write+0xf4>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	f003 0306 	and.w	r3, r3, #6
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <USER_SPI_write+0x92>
 8002d7a:	6839      	ldr	r1, [r7, #0]
 8002d7c:	2097      	movs	r0, #151	@ 0x97
 8002d7e:	f7ff fde2 	bl	8002946 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	2019      	movs	r0, #25
 8002d86:	f7ff fdde 	bl	8002946 <send_cmd>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d11b      	bne.n	8002dc8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002d90:	21fc      	movs	r1, #252	@ 0xfc
 8002d92:	68b8      	ldr	r0, [r7, #8]
 8002d94:	f7ff fda5 	bl	80028e2 <xmit_datablock>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <USER_SPI_write+0xc4>
				buff += 512;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002da4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1ee      	bne.n	8002d90 <USER_SPI_write+0xa0>
 8002db2:	e000      	b.n	8002db6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002db4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002db6:	21fd      	movs	r1, #253	@ 0xfd
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7ff fd92 	bl	80028e2 <xmit_datablock>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <USER_SPI_write+0xd8>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002dc8:	f7ff fd3a 	bl	8002840 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf14      	ite	ne
 8002dd2:	2301      	movne	r3, #1
 8002dd4:	2300      	moveq	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20000020 	.word	0x20000020
 8002de4:	200005a8 	.word	0x200005a8

08002de8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	@ 0x30
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	603a      	str	r2, [r7, #0]
 8002df2:	71fb      	strb	r3, [r7, #7]
 8002df4:	460b      	mov	r3, r1
 8002df6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <USER_SPI_ioctl+0x1a>
 8002dfe:	2304      	movs	r3, #4
 8002e00:	e15a      	b.n	80030b8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002e02:	4baf      	ldr	r3, [pc, #700]	@ (80030c0 <USER_SPI_ioctl+0x2d8>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <USER_SPI_ioctl+0x2c>
 8002e10:	2303      	movs	r3, #3
 8002e12:	e151      	b.n	80030b8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8002e1a:	79bb      	ldrb	r3, [r7, #6]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	f200 8136 	bhi.w	800308e <USER_SPI_ioctl+0x2a6>
 8002e22:	a201      	add	r2, pc, #4	@ (adr r2, 8002e28 <USER_SPI_ioctl+0x40>)
 8002e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e28:	08002e3d 	.word	0x08002e3d
 8002e2c:	08002e51 	.word	0x08002e51
 8002e30:	0800308f 	.word	0x0800308f
 8002e34:	08002efd 	.word	0x08002efd
 8002e38:	08002ff3 	.word	0x08002ff3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002e3c:	f7ff fd0e 	bl	800285c <spiselect>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8127 	beq.w	8003096 <USER_SPI_ioctl+0x2ae>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8002e4e:	e122      	b.n	8003096 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002e50:	2100      	movs	r1, #0
 8002e52:	2009      	movs	r0, #9
 8002e54:	f7ff fd77 	bl	8002946 <send_cmd>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 811d 	bne.w	800309a <USER_SPI_ioctl+0x2b2>
 8002e60:	f107 030c 	add.w	r3, r7, #12
 8002e64:	2110      	movs	r1, #16
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fd12 	bl	8002890 <rcvr_datablock>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8113 	beq.w	800309a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002e74:	7b3b      	ldrb	r3, [r7, #12]
 8002e76:	099b      	lsrs	r3, r3, #6
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d111      	bne.n	8002ea2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002e7e:	7d7b      	ldrb	r3, [r7, #21]
 8002e80:	461a      	mov	r2, r3
 8002e82:	7d3b      	ldrb	r3, [r7, #20]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	4413      	add	r3, r2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8002e92:	4413      	add	r3, r2
 8002e94:	3301      	adds	r3, #1
 8002e96:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	029a      	lsls	r2, r3, #10
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e028      	b.n	8002ef4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002ea2:	7c7b      	ldrb	r3, [r7, #17]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	7dbb      	ldrb	r3, [r7, #22]
 8002eac:	09db      	lsrs	r3, r3, #7
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	7d7b      	ldrb	r3, [r7, #21]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f003 0306 	and.w	r3, r3, #6
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002eca:	7d3b      	ldrb	r3, [r7, #20]
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	441a      	add	r2, r3
 8002ed8:	7cbb      	ldrb	r3, [r7, #18]
 8002eda:	029b      	lsls	r3, r3, #10
 8002edc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002ee6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002eea:	3b09      	subs	r3, #9
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8002efa:	e0ce      	b.n	800309a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002efc:	4b71      	ldr	r3, [pc, #452]	@ (80030c4 <USER_SPI_ioctl+0x2dc>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d031      	beq.n	8002f6c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002f08:	2100      	movs	r1, #0
 8002f0a:	208d      	movs	r0, #141	@ 0x8d
 8002f0c:	f7ff fd1b 	bl	8002946 <send_cmd>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 80c3 	bne.w	800309e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002f18:	20ff      	movs	r0, #255	@ 0xff
 8002f1a:	f7ff fc27 	bl	800276c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002f1e:	f107 030c 	add.w	r3, r7, #12
 8002f22:	2110      	movs	r1, #16
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fcb3 	bl	8002890 <rcvr_datablock>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80b6 	beq.w	800309e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002f32:	2330      	movs	r3, #48	@ 0x30
 8002f34:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002f38:	e007      	b.n	8002f4a <USER_SPI_ioctl+0x162>
 8002f3a:	20ff      	movs	r0, #255	@ 0xff
 8002f3c:	f7ff fc16 	bl	800276c <xchg_spi>
 8002f40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f44:	3b01      	subs	r3, #1
 8002f46:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002f4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f3      	bne.n	8002f3a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002f52:	7dbb      	ldrb	r3, [r7, #22]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2310      	movs	r3, #16
 8002f5c:	fa03 f202 	lsl.w	r2, r3, r2
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002f6a:	e098      	b.n	800309e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	2009      	movs	r0, #9
 8002f70:	f7ff fce9 	bl	8002946 <send_cmd>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 8091 	bne.w	800309e <USER_SPI_ioctl+0x2b6>
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	2110      	movs	r1, #16
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fc84 	bl	8002890 <rcvr_datablock>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8087 	beq.w	800309e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002f90:	4b4c      	ldr	r3, [pc, #304]	@ (80030c4 <USER_SPI_ioctl+0x2dc>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d012      	beq.n	8002fc2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002f9c:	7dbb      	ldrb	r3, [r7, #22]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002fa4:	7dfa      	ldrb	r2, [r7, #23]
 8002fa6:	09d2      	lsrs	r2, r2, #7
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	4413      	add	r3, r2
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	7e7b      	ldrb	r3, [r7, #25]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e013      	b.n	8002fea <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002fc2:	7dbb      	ldrb	r3, [r7, #22]
 8002fc4:	109b      	asrs	r3, r3, #2
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	3301      	adds	r3, #1
 8002fce:	7dfa      	ldrb	r2, [r7, #23]
 8002fd0:	00d2      	lsls	r2, r2, #3
 8002fd2:	f002 0218 	and.w	r2, r2, #24
 8002fd6:	7df9      	ldrb	r1, [r7, #23]
 8002fd8:	0949      	lsrs	r1, r1, #5
 8002fda:	b2c9      	uxtb	r1, r1
 8002fdc:	440a      	add	r2, r1
 8002fde:	3201      	adds	r2, #1
 8002fe0:	fb02 f303 	mul.w	r3, r2, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8002ff0:	e055      	b.n	800309e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002ff2:	4b34      	ldr	r3, [pc, #208]	@ (80030c4 <USER_SPI_ioctl+0x2dc>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	f003 0306 	and.w	r3, r3, #6
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d051      	beq.n	80030a2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002ffe:	f107 020c 	add.w	r2, r7, #12
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	210b      	movs	r1, #11
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff feee 	bl	8002de8 <USER_SPI_ioctl>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d149      	bne.n	80030a6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003012:	7b3b      	ldrb	r3, [r7, #12]
 8003014:	099b      	lsrs	r3, r3, #6
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d104      	bne.n	8003026 <USER_SPI_ioctl+0x23e>
 800301c:	7dbb      	ldrb	r3, [r7, #22]
 800301e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d041      	beq.n	80030aa <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	623b      	str	r3, [r7, #32]
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8003036:	4b23      	ldr	r3, [pc, #140]	@ (80030c4 <USER_SPI_ioctl+0x2dc>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d105      	bne.n	800304e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003044:	025b      	lsls	r3, r3, #9
 8003046:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	025b      	lsls	r3, r3, #9
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800304e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003050:	2020      	movs	r0, #32
 8003052:	f7ff fc78 	bl	8002946 <send_cmd>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d128      	bne.n	80030ae <USER_SPI_ioctl+0x2c6>
 800305c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800305e:	2021      	movs	r0, #33	@ 0x21
 8003060:	f7ff fc71 	bl	8002946 <send_cmd>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d121      	bne.n	80030ae <USER_SPI_ioctl+0x2c6>
 800306a:	2100      	movs	r1, #0
 800306c:	2026      	movs	r0, #38	@ 0x26
 800306e:	f7ff fc6a 	bl	8002946 <send_cmd>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d11a      	bne.n	80030ae <USER_SPI_ioctl+0x2c6>
 8003078:	f247 5030 	movw	r0, #30000	@ 0x7530
 800307c:	f7ff fbbc 	bl	80027f8 <wait_ready>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d013      	beq.n	80030ae <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003086:	2300      	movs	r3, #0
 8003088:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800308c:	e00f      	b.n	80030ae <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800308e:	2304      	movs	r3, #4
 8003090:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003094:	e00c      	b.n	80030b0 <USER_SPI_ioctl+0x2c8>
		break;
 8003096:	bf00      	nop
 8003098:	e00a      	b.n	80030b0 <USER_SPI_ioctl+0x2c8>
		break;
 800309a:	bf00      	nop
 800309c:	e008      	b.n	80030b0 <USER_SPI_ioctl+0x2c8>
		break;
 800309e:	bf00      	nop
 80030a0:	e006      	b.n	80030b0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80030a2:	bf00      	nop
 80030a4:	e004      	b.n	80030b0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80030a6:	bf00      	nop
 80030a8:	e002      	b.n	80030b0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80030aa:	bf00      	nop
 80030ac:	e000      	b.n	80030b0 <USER_SPI_ioctl+0x2c8>
		break;
 80030ae:	bf00      	nop
	}

	despiselect();
 80030b0:	f7ff fbc6 	bl	8002840 <despiselect>

	return res;
 80030b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3730      	adds	r7, #48	@ 0x30
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000020 	.word	0x20000020
 80030c4:	200005a8 	.word	0x200005a8

080030c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	4a08      	ldr	r2, [pc, #32]	@ (80030f8 <disk_status+0x30>)
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	79fa      	ldrb	r2, [r7, #7]
 80030e0:	4905      	ldr	r1, [pc, #20]	@ (80030f8 <disk_status+0x30>)
 80030e2:	440a      	add	r2, r1
 80030e4:	7a12      	ldrb	r2, [r2, #8]
 80030e6:	4610      	mov	r0, r2
 80030e8:	4798      	blx	r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	200005d4 	.word	0x200005d4

080030fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	4a0d      	ldr	r2, [pc, #52]	@ (8003144 <disk_initialize+0x48>)
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d111      	bne.n	8003138 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	4a0b      	ldr	r2, [pc, #44]	@ (8003144 <disk_initialize+0x48>)
 8003118:	2101      	movs	r1, #1
 800311a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	4a09      	ldr	r2, [pc, #36]	@ (8003144 <disk_initialize+0x48>)
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	79fa      	ldrb	r2, [r7, #7]
 800312a:	4906      	ldr	r1, [pc, #24]	@ (8003144 <disk_initialize+0x48>)
 800312c:	440a      	add	r2, r1
 800312e:	7a12      	ldrb	r2, [r2, #8]
 8003130:	4610      	mov	r0, r2
 8003132:	4798      	blx	r3
 8003134:	4603      	mov	r3, r0
 8003136:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200005d4 	.word	0x200005d4

08003148 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	4603      	mov	r3, r0
 8003156:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	4a0a      	ldr	r2, [pc, #40]	@ (8003184 <disk_read+0x3c>)
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	689c      	ldr	r4, [r3, #8]
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	4a07      	ldr	r2, [pc, #28]	@ (8003184 <disk_read+0x3c>)
 8003168:	4413      	add	r3, r2
 800316a:	7a18      	ldrb	r0, [r3, #8]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	47a0      	blx	r4
 8003174:	4603      	mov	r3, r0
 8003176:	75fb      	strb	r3, [r7, #23]
  return res;
 8003178:	7dfb      	ldrb	r3, [r7, #23]
}
 800317a:	4618      	mov	r0, r3
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	bd90      	pop	{r4, r7, pc}
 8003182:	bf00      	nop
 8003184:	200005d4 	.word	0x200005d4

08003188 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	4603      	mov	r3, r0
 8003196:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	4a0a      	ldr	r2, [pc, #40]	@ (80031c4 <disk_write+0x3c>)
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	68dc      	ldr	r4, [r3, #12]
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	4a07      	ldr	r2, [pc, #28]	@ (80031c4 <disk_write+0x3c>)
 80031a8:	4413      	add	r3, r2
 80031aa:	7a18      	ldrb	r0, [r3, #8]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	47a0      	blx	r4
 80031b4:	4603      	mov	r3, r0
 80031b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd90      	pop	{r4, r7, pc}
 80031c2:	bf00      	nop
 80031c4:	200005d4 	.word	0x200005d4

080031c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	603a      	str	r2, [r7, #0]
 80031d2:	71fb      	strb	r3, [r7, #7]
 80031d4:	460b      	mov	r3, r1
 80031d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	4a09      	ldr	r2, [pc, #36]	@ (8003200 <disk_ioctl+0x38>)
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	79fa      	ldrb	r2, [r7, #7]
 80031e6:	4906      	ldr	r1, [pc, #24]	@ (8003200 <disk_ioctl+0x38>)
 80031e8:	440a      	add	r2, r1
 80031ea:	7a10      	ldrb	r0, [r2, #8]
 80031ec:	79b9      	ldrb	r1, [r7, #6]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	4798      	blx	r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	200005d4 	.word	0x200005d4

08003204 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003218:	e007      	b.n	800322a <mem_cpy+0x26>
		*d++ = *s++;
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	1c53      	adds	r3, r2, #1
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	1c59      	adds	r1, r3, #1
 8003224:	6179      	str	r1, [r7, #20]
 8003226:	7812      	ldrb	r2, [r2, #0]
 8003228:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	1e5a      	subs	r2, r3, #1
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f2      	bne.n	800321a <mem_cpy+0x16>
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003250:	e005      	b.n	800325e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	617a      	str	r2, [r7, #20]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	1e5a      	subs	r2, r3, #1
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f4      	bne.n	8003252 <mem_set+0x12>
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	@ 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	61fb      	str	r3, [r7, #28]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800328c:	bf00      	nop
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	1e5a      	subs	r2, r3, #1
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00d      	beq.n	80032b4 <mem_cmp+0x40>
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	61fa      	str	r2, [r7, #28]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	61ba      	str	r2, [r7, #24]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	1acb      	subs	r3, r1, r3
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ec      	beq.n	800328e <mem_cmp+0x1a>
	return r;
 80032b4:	697b      	ldr	r3, [r7, #20]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3724      	adds	r7, #36	@ 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80032ca:	e002      	b.n	80032d2 <chk_chr+0x12>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3301      	adds	r3, #1
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <chk_chr+0x26>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d1f2      	bne.n	80032cc <chk_chr+0xc>
	return *str;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	781b      	ldrb	r3, [r3, #0]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e038      	b.n	800337a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8003308:	492f      	ldr	r1, [pc, #188]	@ (80033c8 <chk_lock+0xd4>)
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d029      	beq.n	8003370 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800331c:	492a      	ldr	r1, [pc, #168]	@ (80033c8 <chk_lock+0xd4>)
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003332:	429a      	cmp	r2, r3
 8003334:	d11e      	bne.n	8003374 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8003336:	4924      	ldr	r1, [pc, #144]	@ (80033c8 <chk_lock+0xd4>)
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	3304      	adds	r3, #4
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800334e:	429a      	cmp	r2, r3
 8003350:	d110      	bne.n	8003374 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8003352:	491d      	ldr	r1, [pc, #116]	@ (80033c8 <chk_lock+0xd4>)
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	3308      	adds	r3, #8
 8003362:	881a      	ldrh	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 800336a:	429a      	cmp	r2, r3
 800336c:	d102      	bne.n	8003374 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800336e:	e007      	b.n	8003380 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8003370:	2301      	movs	r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3301      	adds	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d9c3      	bls.n	8003308 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d109      	bne.n	800339a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <chk_lock+0x9e>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d101      	bne.n	8003396 <chk_lock+0xa2>
 8003392:	2300      	movs	r3, #0
 8003394:	e013      	b.n	80033be <chk_lock+0xca>
 8003396:	2312      	movs	r3, #18
 8003398:	e011      	b.n	80033be <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10b      	bne.n	80033b8 <chk_lock+0xc4>
 80033a0:	4909      	ldr	r1, [pc, #36]	@ (80033c8 <chk_lock+0xd4>)
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4613      	mov	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	330a      	adds	r3, #10
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033b6:	d101      	bne.n	80033bc <chk_lock+0xc8>
 80033b8:	2310      	movs	r3, #16
 80033ba:	e000      	b.n	80033be <chk_lock+0xca>
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	200005bc 	.word	0x200005bc

080033cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	e002      	b.n	80033de <enq_lock+0x12>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3301      	adds	r3, #1
 80033dc:	607b      	str	r3, [r7, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d809      	bhi.n	80033f8 <enq_lock+0x2c>
 80033e4:	490a      	ldr	r1, [pc, #40]	@ (8003410 <enq_lock+0x44>)
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ef      	bne.n	80033d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	bf14      	ite	ne
 80033fe:	2301      	movne	r3, #1
 8003400:	2300      	moveq	r3, #0
 8003402:	b2db      	uxtb	r3, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	200005bc 	.word	0x200005bc

08003414 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e02b      	b.n	800347c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8003424:	4955      	ldr	r1, [pc, #340]	@ (800357c <inc_lock+0x168>)
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800343a:	429a      	cmp	r2, r3
 800343c:	d11b      	bne.n	8003476 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800343e:	494f      	ldr	r1, [pc, #316]	@ (800357c <inc_lock+0x168>)
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4613      	mov	r3, r2
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3304      	adds	r3, #4
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 8003456:	429a      	cmp	r2, r3
 8003458:	d10d      	bne.n	8003476 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800345a:	4948      	ldr	r1, [pc, #288]	@ (800357c <inc_lock+0x168>)
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	3308      	adds	r3, #8
 800346a:	881a      	ldrh	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 8003472:	429a      	cmp	r2, r3
 8003474:	d006      	beq.n	8003484 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3301      	adds	r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d9d0      	bls.n	8003424 <inc_lock+0x10>
 8003482:	e000      	b.n	8003486 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8003484:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d145      	bne.n	8003518 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	e002      	b.n	8003498 <inc_lock+0x84>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3301      	adds	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d809      	bhi.n	80034b2 <inc_lock+0x9e>
 800349e:	4937      	ldr	r1, [pc, #220]	@ (800357c <inc_lock+0x168>)
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1ef      	bne.n	8003492 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d101      	bne.n	80034bc <inc_lock+0xa8>
 80034b8:	2300      	movs	r3, #0
 80034ba:	e05a      	b.n	8003572 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 80034c2:	482e      	ldr	r0, [pc, #184]	@ (800357c <inc_lock+0x168>)
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4403      	add	r3, r0
 80034d0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 80034d8:	4828      	ldr	r0, [pc, #160]	@ (800357c <inc_lock+0x168>)
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4613      	mov	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4403      	add	r3, r0
 80034e6:	3304      	adds	r3, #4
 80034e8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 80034f0:	4922      	ldr	r1, [pc, #136]	@ (800357c <inc_lock+0x168>)
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4613      	mov	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3308      	adds	r3, #8
 8003500:	4602      	mov	r2, r0
 8003502:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003504:	491d      	ldr	r1, [pc, #116]	@ (800357c <inc_lock+0x168>)
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	330a      	adds	r3, #10
 8003514:	2200      	movs	r2, #0
 8003516:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00c      	beq.n	8003538 <inc_lock+0x124>
 800351e:	4917      	ldr	r1, [pc, #92]	@ (800357c <inc_lock+0x168>)
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	330a      	adds	r3, #10
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <inc_lock+0x124>
 8003534:	2300      	movs	r3, #0
 8003536:	e01c      	b.n	8003572 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <inc_lock+0x142>
 800353e:	490f      	ldr	r1, [pc, #60]	@ (800357c <inc_lock+0x168>)
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	330a      	adds	r3, #10
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	b299      	uxth	r1, r3
 8003554:	e001      	b.n	800355a <inc_lock+0x146>
 8003556:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800355a:	4808      	ldr	r0, [pc, #32]	@ (800357c <inc_lock+0x168>)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4403      	add	r3, r0
 8003568:	330a      	adds	r3, #10
 800356a:	460a      	mov	r2, r1
 800356c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3301      	adds	r3, #1
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	200005bc 	.word	0x200005bc

08003580 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d82e      	bhi.n	80035f2 <dec_lock+0x72>
		n = Files[i].ctr;
 8003594:	491b      	ldr	r1, [pc, #108]	@ (8003604 <dec_lock+0x84>)
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	330a      	adds	r3, #10
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80035a8:	89fb      	ldrh	r3, [r7, #14]
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ae:	d101      	bne.n	80035b4 <dec_lock+0x34>
 80035b0:	2300      	movs	r3, #0
 80035b2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80035b4:	89fb      	ldrh	r3, [r7, #14]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <dec_lock+0x40>
 80035ba:	89fb      	ldrh	r3, [r7, #14]
 80035bc:	3b01      	subs	r3, #1
 80035be:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80035c0:	4910      	ldr	r1, [pc, #64]	@ (8003604 <dec_lock+0x84>)
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	330a      	adds	r3, #10
 80035d0:	89fa      	ldrh	r2, [r7, #14]
 80035d2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80035d4:	89fb      	ldrh	r3, [r7, #14]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d108      	bne.n	80035ec <dec_lock+0x6c>
 80035da:	490a      	ldr	r1, [pc, #40]	@ (8003604 <dec_lock+0x84>)
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	737b      	strb	r3, [r7, #13]
 80035f0:	e001      	b.n	80035f6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80035f2:	2302      	movs	r3, #2
 80035f4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80035f6:	7b7b      	ldrb	r3, [r7, #13]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	200005bc 	.word	0x200005bc

08003608 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	e016      	b.n	8003644 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003616:	4910      	ldr	r1, [pc, #64]	@ (8003658 <clear_lock+0x50>)
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d108      	bne.n	800363e <clear_lock+0x36>
 800362c:	490a      	ldr	r1, [pc, #40]	@ (8003658 <clear_lock+0x50>)
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3301      	adds	r3, #1
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d9e5      	bls.n	8003616 <clear_lock+0xe>
	}
}
 800364a:	bf00      	nop
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	200005bc 	.word	0x200005bc

0800365c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 800366e:	2b00      	cmp	r3, #0
 8003670:	d038      	beq.n	80036e4 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8003678:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	2301      	movs	r3, #1
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	f7ff fd7f 	bl	8003188 <disk_write>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e026      	b.n	80036e4 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	1ad2      	subs	r2, r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d218      	bcs.n	80036e4 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	e010      	b.n	80036de <sync_window+0x82>
					wsect += fs->fsize;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4413      	add	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	2301      	movs	r3, #1
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	f7ff fd58 	bl	8003188 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	3b01      	subs	r3, #1
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d8eb      	bhi.n	80036bc <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d01b      	beq.n	8003740 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ffa7 	bl	800365c <sync_window>
 800370e:	4603      	mov	r3, r0
 8003710:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d113      	bne.n	8003740 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	2301      	movs	r3, #1
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	f7ff fd10 	bl	8003148 <disk_read>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d004      	beq.n	8003738 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800372e:	f04f 33ff 	mov.w	r3, #4294967295
 8003732:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
		}
	}
	return res;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b084      	sub	sp, #16
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff ff82 	bl	800365c <sync_window>
 8003758:	4603      	mov	r3, r0
 800375a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 809b 	bne.w	800389a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800376a:	2b03      	cmp	r3, #3
 800376c:	f040 8088 	bne.w	8003880 <sync_fs+0x136>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8003776:	2b01      	cmp	r3, #1
 8003778:	f040 8082 	bne.w	8003880 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003782:	2100      	movs	r1, #0
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fd5b 	bl	8003240 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2255      	movs	r2, #85	@ 0x55
 800378e:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	22aa      	movs	r2, #170	@ 0xaa
 8003796:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2252      	movs	r2, #82	@ 0x52
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2252      	movs	r2, #82	@ 0x52
 80037a4:	705a      	strb	r2, [r3, #1]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2261      	movs	r2, #97	@ 0x61
 80037aa:	709a      	strb	r2, [r3, #2]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2241      	movs	r2, #65	@ 0x41
 80037b0:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2272      	movs	r2, #114	@ 0x72
 80037b6:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2272      	movs	r2, #114	@ 0x72
 80037be:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2241      	movs	r2, #65	@ 0x41
 80037c6:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2261      	movs	r2, #97	@ 0x61
 80037ce:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80037fa:	0c1b      	lsrs	r3, r3, #16
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800380a:	0e1b      	lsrs	r3, r3, #24
 800380c:	b2da      	uxtb	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800381a:	b2da      	uxtb	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003828:	b29b      	uxth	r3, r3
 800382a:	0a1b      	lsrs	r3, r3, #8
 800382c:	b29b      	uxth	r3, r3
 800382e:	b2da      	uxtb	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	b2da      	uxtb	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800384c:	0e1b      	lsrs	r3, r3, #24
 800384e:	b2da      	uxtb	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 8003872:	2301      	movs	r3, #1
 8003874:	f7ff fc88 	bl	8003188 <disk_write>
			fs->fsi_flag = 0;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fc9c 	bl	80031c8 <disk_ioctl>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <sync_fs+0x150>
			res = FR_DISK_ERR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	3b02      	subs	r3, #2
 80038b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80038ba:	3b02      	subs	r3, #2
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d301      	bcc.n	80038c6 <clust2sect+0x22>
 80038c2:	2300      	movs	r3, #0
 80038c4:	e00a      	b.n	80038dc <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80038cc:	461a      	mov	r2, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	fb03 f202 	mul.w	r2, r3, r2
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80038da:	4413      	add	r3, r2
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b086      	sub	sp, #24
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d905      	bls.n	8003902 <get_fat+0x1c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d302      	bcc.n	8003908 <get_fat+0x22>
		val = 1;	/* Internal error */
 8003902:	2301      	movs	r3, #1
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e0a3      	b.n	8003a50 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003908:	f04f 33ff 	mov.w	r3, #4294967295
 800390c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8003914:	2b03      	cmp	r3, #3
 8003916:	d068      	beq.n	80039ea <get_fat+0x104>
 8003918:	2b03      	cmp	r3, #3
 800391a:	f300 808f 	bgt.w	8003a3c <get_fat+0x156>
 800391e:	2b01      	cmp	r3, #1
 8003920:	d002      	beq.n	8003928 <get_fat+0x42>
 8003922:	2b02      	cmp	r3, #2
 8003924:	d03f      	beq.n	80039a6 <get_fat+0xc0>
 8003926:	e089      	b.n	8003a3c <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	085b      	lsrs	r3, r3, #1
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4413      	add	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	0a5b      	lsrs	r3, r3, #9
 8003940:	4413      	add	r3, r2
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fed2 	bl	80036ee <move_window>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d178      	bne.n	8003a42 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	60fa      	str	r2, [r7, #12]
 8003956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	5cd3      	ldrb	r3, [r2, r3]
 800395e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	0a5b      	lsrs	r3, r3, #9
 800396a:	4413      	add	r3, r2
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff febd 	bl	80036ee <move_window>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d165      	bne.n	8003a46 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	5cd3      	ldrb	r3, [r2, r3]
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	4313      	orrs	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <get_fat+0xb6>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	e002      	b.n	80039a2 <get_fat+0xbc>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a2:	617b      	str	r3, [r7, #20]
			break;
 80039a4:	e054      	b.n	8003a50 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	4413      	add	r3, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff fe9a 	bl	80036ee <move_window>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d144      	bne.n	8003a4a <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	4413      	add	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	3301      	adds	r3, #1
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	b21b      	sxth	r3, r3
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	b21a      	sxth	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b21b      	sxth	r3, r3
 80039e0:	4313      	orrs	r3, r2
 80039e2:	b21b      	sxth	r3, r3
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	617b      	str	r3, [r7, #20]
			break;
 80039e8:	e032      	b.n	8003a50 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	09db      	lsrs	r3, r3, #7
 80039f4:	4413      	add	r3, r2
 80039f6:	4619      	mov	r1, r3
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff fe78 	bl	80036ee <move_window>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d124      	bne.n	8003a4e <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4413      	add	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	3303      	adds	r3, #3
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	061a      	lsls	r2, r3, #24
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	431a      	orrs	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	3301      	adds	r3, #1
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	7812      	ldrb	r2, [r2, #0]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003a38:	617b      	str	r3, [r7, #20]
			break;
 8003a3a:	e009      	b.n	8003a50 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	e006      	b.n	8003a50 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a42:	bf00      	nop
 8003a44:	e004      	b.n	8003a50 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a46:	bf00      	nop
 8003a48:	e002      	b.n	8003a50 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a4e:	bf00      	nop
		}
	}

	return val;
 8003a50:	697b      	ldr	r3, [r7, #20]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b088      	sub	sp, #32
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d905      	bls.n	8003a78 <put_fat+0x1e>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d302      	bcc.n	8003a7e <put_fat+0x24>
		res = FR_INT_ERR;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e0f6      	b.n	8003c6c <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	f000 809e 	beq.w	8003bc6 <put_fat+0x16c>
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	f300 80e4 	bgt.w	8003c58 <put_fat+0x1fe>
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d002      	beq.n	8003a9a <put_fat+0x40>
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d06f      	beq.n	8003b78 <put_fat+0x11e>
 8003a98:	e0de      	b.n	8003c58 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	0a5b      	lsrs	r3, r3, #9
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff fe19 	bl	80036ee <move_window>
 8003abc:	4603      	mov	r3, r0
 8003abe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ac0:	7ffb      	ldrb	r3, [r7, #31]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f040 80cb 	bne.w	8003c5e <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	617a      	str	r2, [r7, #20]
 8003ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <put_fat+0xa4>
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	b25b      	sxtb	r3, r3
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	b25a      	sxtb	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	b25b      	sxtb	r3, r3
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	b25b      	sxtb	r3, r3
 8003af6:	4313      	orrs	r3, r2
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	e001      	b.n	8003b02 <put_fat+0xa8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	0a5b      	lsrs	r3, r3, #9
 8003b18:	4413      	add	r3, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f7ff fde6 	bl	80036ee <move_window>
 8003b22:	4603      	mov	r3, r0
 8003b24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b26:	7ffb      	ldrb	r3, [r7, #31]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f040 809a 	bne.w	8003c62 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <put_fat+0xf2>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e00e      	b.n	8003b6a <put_fat+0x110>
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b25b      	sxtb	r3, r3
 8003b52:	f023 030f 	bic.w	r3, r3, #15
 8003b56:	b25a      	sxtb	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	b25b      	sxtb	r3, r3
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	b25b      	sxtb	r3, r3
 8003b64:	4313      	orrs	r3, r2
 8003b66:	b25b      	sxtb	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8003b76:	e079      	b.n	8003c6c <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	4413      	add	r3, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f7ff fdb1 	bl	80036ee <move_window>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b90:	7ffb      	ldrb	r3, [r7, #31]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d167      	bne.n	8003c66 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8003bc4:	e052      	b.n	8003c6c <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	09db      	lsrs	r3, r3, #7
 8003bd0:	4413      	add	r3, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f7ff fd8a 	bl	80036ee <move_window>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003bde:	7ffb      	ldrb	r3, [r7, #31]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d142      	bne.n	8003c6a <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	3303      	adds	r3, #3
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	061a      	lsls	r2, r3, #24
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	431a      	orrs	r2, r3
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	3301      	adds	r3, #1
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	7812      	ldrb	r2, [r2, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	3301      	adds	r3, #1
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	0c1a      	lsrs	r2, r3, #16
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	0e1a      	lsrs	r2, r3, #24
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	3303      	adds	r3, #3
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8003c56:	e009      	b.n	8003c6c <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	e006      	b.n	8003c6c <put_fat+0x212>
			if (res != FR_OK) break;
 8003c5e:	bf00      	nop
 8003c60:	e004      	b.n	8003c6c <put_fat+0x212>
			if (res != FR_OK) break;
 8003c62:	bf00      	nop
 8003c64:	e002      	b.n	8003c6c <put_fat+0x212>
			if (res != FR_OK) break;
 8003c66:	bf00      	nop
 8003c68:	e000      	b.n	8003c6c <put_fat+0x212>
			if (res != FR_OK) break;
 8003c6a:	bf00      	nop
		}
	}

	return res;
 8003c6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d905      	bls.n	8003c92 <remove_chain+0x1c>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d302      	bcc.n	8003c98 <remove_chain+0x22>
		res = FR_INT_ERR;
 8003c92:	2302      	movs	r3, #2
 8003c94:	73fb      	strb	r3, [r7, #15]
 8003c96:	e043      	b.n	8003d20 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003c9c:	e036      	b.n	8003d0c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003c9e:	6839      	ldr	r1, [r7, #0]
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fe20 	bl	80038e6 <get_fat>
 8003ca6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d035      	beq.n	8003d1a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d102      	bne.n	8003cba <remove_chain+0x44>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	73fb      	strb	r3, [r7, #15]
 8003cb8:	e032      	b.n	8003d20 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d102      	bne.n	8003cc8 <remove_chain+0x52>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
 8003cc6:	e02b      	b.n	8003d20 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003cc8:	2200      	movs	r2, #0
 8003cca:	6839      	ldr	r1, [r7, #0]
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff fec4 	bl	8003a5a <put_fat>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d120      	bne.n	8003d1e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	d00f      	beq.n	8003d08 <remove_chain+0x92>
				fs->free_clust++;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				fs->fsi_flag |= 1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d3c2      	bcc.n	8003c9e <remove_chain+0x28>
 8003d18:	e002      	b.n	8003d20 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8003d1e:	bf00      	nop
		}
	}

	return res;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10f      	bne.n	8003d5a <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003d40:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <create_chain+0x2a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d31c      	bcc.n	8003d8e <create_chain+0x64>
 8003d54:	2301      	movs	r3, #1
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	e019      	b.n	8003d8e <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003d5a:	6839      	ldr	r1, [r7, #0]
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff fdc2 	bl	80038e6 <get_fat>
 8003d62:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d801      	bhi.n	8003d6e <create_chain+0x44>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e076      	b.n	8003e5c <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d101      	bne.n	8003d7a <create_chain+0x50>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	e070      	b.n	8003e5c <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d201      	bcs.n	8003d8a <create_chain+0x60>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	e068      	b.n	8003e5c <create_chain+0x132>
		scl = clst;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	3301      	adds	r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d307      	bcc.n	8003db4 <create_chain+0x8a>
			ncl = 2;
 8003da4:	2302      	movs	r3, #2
 8003da6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d901      	bls.n	8003db4 <create_chain+0x8a>
 8003db0:	2300      	movs	r3, #0
 8003db2:	e053      	b.n	8003e5c <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003db4:	6979      	ldr	r1, [r7, #20]
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fd95 	bl	80038e6 <get_fat>
 8003dbc:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d002      	beq.n	8003dd2 <create_chain+0xa8>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <create_chain+0xac>
			return cs;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	e042      	b.n	8003e5c <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d1d9      	bne.n	8003d92 <create_chain+0x68>
 8003dde:	2300      	movs	r3, #0
 8003de0:	e03c      	b.n	8003e5c <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8003de2:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003de4:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8003de8:	6979      	ldr	r1, [r7, #20]
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff fe35 	bl	8003a5a <put_fat>
 8003df0:	4603      	mov	r3, r0
 8003df2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <create_chain+0xe4>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d006      	beq.n	8003e0e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	6839      	ldr	r1, [r7, #0]
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff fe28 	bl	8003a5a <put_fat>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d11a      	bne.n	8003e4a <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8003e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e26:	d018      	beq.n	8003e5a <create_chain+0x130>
			fs->free_clust--;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8003e2e:	1e5a      	subs	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fs->fsi_flag |= 1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 8003e48:	e007      	b.n	8003e5a <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d102      	bne.n	8003e56 <create_chain+0x12c>
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295
 8003e54:	e000      	b.n	8003e58 <create_chain+0x12e>
 8003e56:	2301      	movs	r3, #1
 8003e58:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003e5a:	697b      	ldr	r3, [r7, #20]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8003e74:	3304      	adds	r3, #4
 8003e76:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	0a5b      	lsrs	r3, r3, #9
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8003e82:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8003e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1d1a      	adds	r2, r3, #4
 8003e90:	613a      	str	r2, [r7, #16]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <clmt_clust+0x3c>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e010      	b.n	8003ec2 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d307      	bcc.n	8003eb8 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003eb6:	e7e9      	b.n	8003e8c <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8003eb8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	4413      	add	r3, r2
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8003ee6:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d007      	beq.n	8003efe <dir_sdi+0x32>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003ef4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d301      	bcc.n	8003f02 <dir_sdi+0x36>
		return FR_INT_ERR;
 8003efe:	2302      	movs	r3, #2
 8003f00:	e074      	b.n	8003fec <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10c      	bne.n	8003f22 <dir_sdi+0x56>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d105      	bne.n	8003f22 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f1c:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8003f20:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d111      	bne.n	8003f4c <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f2e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8003f32:	461a      	mov	r2, r3
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d301      	bcc.n	8003f3e <dir_sdi+0x72>
			return FR_INT_ERR;
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e056      	b.n	8003fec <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f44:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	e032      	b.n	8003fb2 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f52:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8003f5a:	e01e      	b.n	8003f9a <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f62:	6979      	ldr	r1, [r7, #20]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff fcbe 	bl	80038e6 <get_fat>
 8003f6a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f72:	d101      	bne.n	8003f78 <dir_sdi+0xac>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e039      	b.n	8003fec <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d907      	bls.n	8003f8e <dir_sdi+0xc2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f84:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d301      	bcc.n	8003f92 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e02c      	b.n	8003fec <dir_sdi+0x120>
			idx -= ic;
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d2dc      	bcs.n	8003f5c <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003fa8:	6979      	ldr	r1, [r7, #20]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fc7a 	bl	80038a4 <clust2sect>
 8003fb0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <dir_sdi+0xf8>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e013      	b.n	8003fec <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	091a      	lsrs	r2, r3, #4
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	441a      	add	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003fd8:	461a      	mov	r2, r3
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	015b      	lsls	r3, r3, #5
 8003fe2:	441a      	add	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003ff4:	b590      	push	{r4, r7, lr}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8004004:	3301      	adds	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <dir_next+0x26>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <dir_next+0x2a>
		return FR_NO_FILE;
 800401a:	2304      	movs	r3, #4
 800401c:	e0dd      	b.n	80041da <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	2b00      	cmp	r3, #0
 8004026:	f040 80c6 	bne.w	80041b6 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10b      	bne.n	800405a <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004048:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800404c:	461a      	mov	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4293      	cmp	r3, r2
 8004052:	f0c0 80b0 	bcc.w	80041b6 <dir_next+0x1c2>
				return FR_NO_FILE;
 8004056:	2304      	movs	r3, #4
 8004058:	e0bf      	b.n	80041da <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8004064:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8004068:	3a01      	subs	r2, #1
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 80a2 	bne.w	80041b6 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800407e:	4619      	mov	r1, r3
 8004080:	4610      	mov	r0, r2
 8004082:	f7ff fc30 	bl	80038e6 <get_fat>
 8004086:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d801      	bhi.n	8004092 <dir_next+0x9e>
 800408e:	2302      	movs	r3, #2
 8004090:	e0a3      	b.n	80041da <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004098:	d101      	bne.n	800409e <dir_next+0xaa>
 800409a:	2301      	movs	r3, #1
 800409c:	e09d      	b.n	80041da <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80040a4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d374      	bcc.n	8004198 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <dir_next+0xc4>
 80040b4:	2304      	movs	r3, #4
 80040b6:	e090      	b.n	80041da <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f7ff fe2f 	bl	8003d2a <create_chain>
 80040cc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <dir_next+0xe4>
 80040d4:	2307      	movs	r3, #7
 80040d6:	e080      	b.n	80041da <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <dir_next+0xee>
 80040de:	2302      	movs	r3, #2
 80040e0:	e07b      	b.n	80041da <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d101      	bne.n	80040ee <dir_next+0xfa>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e075      	b.n	80041da <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff fab1 	bl	800365c <sync_window>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <dir_next+0x110>
 8004100:	2301      	movs	r3, #1
 8004102:	e06a      	b.n	80041da <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800410a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800410e:	2100      	movs	r1, #0
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff f895 	bl	8003240 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 8004122:	6979      	ldr	r1, [r7, #20]
 8004124:	4610      	mov	r0, r2
 8004126:	f7ff fbbd 	bl	80038a4 <clust2sect>
 800412a:	4603      	mov	r3, r0
 800412c:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	e01b      	b.n	800416e <dir_next+0x17a>
						dp->fs->wflag = 1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fa87 	bl	800365c <sync_window>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <dir_next+0x164>
 8004154:	2301      	movs	r3, #1
 8004156:	e040      	b.n	80041da <dir_next+0x1e6>
						dp->fs->winsect++;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800415e:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 8004162:	3201      	adds	r2, #1
 8004164:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	3301      	adds	r3, #1
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004174:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8004178:	461a      	mov	r2, r3
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4293      	cmp	r3, r2
 800417e:	d3da      	bcc.n	8004136 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004186:	f8d3 1230 	ldr.w	r1, [r3, #560]	@ 0x230
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	1a8a      	subs	r2, r1, r2
 8004194:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80041a6:	6979      	ldr	r1, [r7, #20]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fb7b 	bl	80038a4 <clust2sect>
 80041ae:	4602      	mov	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80041c6:	461a      	mov	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	015b      	lsls	r3, r3, #5
 80041d0:	441a      	add	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd90      	pop	{r4, r7, pc}

080041e2 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80041ec:	2100      	movs	r1, #0
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff fe6c 	bl	8003ecc <dir_sdi>
 80041f4:	4603      	mov	r3, r0
 80041f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d131      	bne.n	8004262 <dir_alloc+0x80>
		n = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800420e:	4619      	mov	r1, r3
 8004210:	4610      	mov	r0, r2
 8004212:	f7ff fa6c 	bl	80036ee <move_window>
 8004216:	4603      	mov	r3, r0
 8004218:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d11f      	bne.n	8004260 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2be5      	cmp	r3, #229	@ 0xe5
 800422a:	d005      	beq.n	8004238 <dir_alloc+0x56>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d107      	bne.n	8004248 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	3301      	adds	r3, #1
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d102      	bne.n	800424c <dir_alloc+0x6a>
 8004246:	e00c      	b.n	8004262 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004248:	2300      	movs	r3, #0
 800424a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800424c:	2101      	movs	r1, #1
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fed0 	bl	8003ff4 <dir_next>
 8004254:	4603      	mov	r3, r0
 8004256:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0d1      	beq.n	8004202 <dir_alloc+0x20>
 800425e:	e000      	b.n	8004262 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8004260:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	2b04      	cmp	r3, #4
 8004266:	d101      	bne.n	800426c <dir_alloc+0x8a>
 8004268:	2307      	movs	r3, #7
 800426a:	73fb      	strb	r3, [r7, #15]
	return res;
 800426c:	7bfb      	ldrb	r3, [r7, #15]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004276:	b480      	push	{r7}
 8004278:	b085      	sub	sp, #20
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	331b      	adds	r3, #27
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	b21b      	sxth	r3, r3
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	b21a      	sxth	r2, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	331a      	adds	r3, #26
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	b21b      	sxth	r3, r3
 8004294:	4313      	orrs	r3, r2
 8004296:	b21b      	sxth	r3, r3
 8004298:	b29b      	uxth	r3, r3
 800429a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d110      	bne.n	80042c8 <ld_clust+0x52>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	3315      	adds	r3, #21
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b21b      	sxth	r3, r3
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	b21a      	sxth	r2, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	b21b      	sxth	r3, r3
 80042ba:	4313      	orrs	r3, r2
 80042bc:	b21b      	sxth	r3, r3
 80042be:	b29b      	uxth	r3, r3
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]

	return cl;
 80042c8:	68fb      	ldr	r3, [r7, #12]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	331a      	adds	r3, #26
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	0a1b      	lsrs	r3, r3, #8
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	331b      	adds	r3, #27
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	0c1a      	lsrs	r2, r3, #16
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3314      	adds	r3, #20
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	b29b      	uxth	r3, r3
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	b29a      	uxth	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3315      	adds	r3, #21
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004328:	2100      	movs	r1, #0
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fdce 	bl	8003ecc <dir_sdi>
 8004330:	4603      	mov	r3, r0
 8004332:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004334:	7dfb      	ldrb	r3, [r7, #23]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <dir_find+0x1e>
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	e03b      	b.n	80043b6 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800434a:	4619      	mov	r1, r3
 800434c:	4610      	mov	r0, r2
 800434e:	f7ff f9ce 	bl	80036ee <move_window>
 8004352:	4603      	mov	r3, r0
 8004354:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004356:	7dfb      	ldrb	r3, [r7, #23]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d128      	bne.n	80043ae <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004362:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <dir_find+0x56>
 8004370:	2304      	movs	r3, #4
 8004372:	75fb      	strb	r3, [r7, #23]
 8004374:	e01e      	b.n	80043b4 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	330b      	adds	r3, #11
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <dir_find+0x7a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800438a:	220b      	movs	r2, #11
 800438c:	4619      	mov	r1, r3
 800438e:	6938      	ldr	r0, [r7, #16]
 8004390:	f7fe ff70 	bl	8003274 <mem_cmp>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00b      	beq.n	80043b2 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800439a:	2100      	movs	r1, #0
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff fe29 	bl	8003ff4 <dir_next>
 80043a2:	4603      	mov	r3, r0
 80043a4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0c8      	beq.n	800433e <dir_find+0x1e>
 80043ac:	e002      	b.n	80043b4 <dir_find+0x94>
		if (res != FR_OK) break;
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <dir_find+0x94>
			break;
 80043b2:	bf00      	nop

	return res;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 80043c8:	2304      	movs	r3, #4
 80043ca:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 80043cc:	e03c      	b.n	8004448 <dir_read+0x8a>
		res = move_window(dp->fs, dp->sect);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f7ff f986 	bl	80036ee <move_window>
 80043e2:	4603      	mov	r3, r0
 80043e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d133      	bne.n	8004454 <dir_read+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80043f2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <dir_read+0x48>
 8004400:	2304      	movs	r3, #4
 8004402:	75fb      	strb	r3, [r7, #23]
 8004404:	e02b      	b.n	800445e <dir_read+0xa0>
		a = dir[DIR_Attr] & AM_MASK;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	330b      	adds	r3, #11
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004410:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2be5      	cmp	r3, #229	@ 0xe5
 8004416:	d00e      	beq.n	8004436 <dir_read+0x78>
 8004418:	7bbb      	ldrb	r3, [r7, #14]
 800441a:	2b0f      	cmp	r3, #15
 800441c:	d00b      	beq.n	8004436 <dir_read+0x78>
 800441e:	7bbb      	ldrb	r3, [r7, #14]
 8004420:	f023 0320 	bic.w	r3, r3, #32
 8004424:	2b08      	cmp	r3, #8
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	461a      	mov	r2, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	4293      	cmp	r3, r2
 8004434:	d010      	beq.n	8004458 <dir_read+0x9a>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8004436:	2100      	movs	r1, #0
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff fddb 	bl	8003ff4 <dir_next>
 800443e:	4603      	mov	r3, r0
 8004440:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004442:	7dfb      	ldrb	r3, [r7, #23]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <dir_read+0x9e>
	while (dp->sect) {
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1bd      	bne.n	80043ce <dir_read+0x10>
 8004452:	e004      	b.n	800445e <dir_read+0xa0>
		if (res != FR_OK) break;
 8004454:	bf00      	nop
 8004456:	e002      	b.n	800445e <dir_read+0xa0>
			break;
 8004458:	bf00      	nop
 800445a:	e000      	b.n	800445e <dir_read+0xa0>
		if (res != FR_OK) break;
 800445c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <dir_read+0xae>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

	return res;
 800446c:	7dfb      	ldrb	r3, [r7, #23]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b084      	sub	sp, #16
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800447e:	2101      	movs	r1, #1
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff feae 	bl	80041e2 <dir_alloc>
 8004486:	4603      	mov	r3, r0
 8004488:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d126      	bne.n	80044de <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f7ff f925 	bl	80036ee <move_window>
 80044a4:	4603      	mov	r3, r0
 80044a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d117      	bne.n	80044de <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80044b4:	2220      	movs	r2, #32
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fe fec1 	bl	8003240 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80044ca:	220b      	movs	r2, #11
 80044cc:	4619      	mov	r1, r3
 80044ce:	f7fe fe99 	bl	8003204 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	3309      	adds	r3, #9
 80044f6:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d05d      	beq.n	80045be <get_fileinfo+0xd6>
		dir = dp->dir;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004508:	60bb      	str	r3, [r7, #8]
		i = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 800450e:	e01d      	b.n	800454c <get_fileinfo+0x64>
			c = (TCHAR)dir[i++];
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	617a      	str	r2, [r7, #20]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	4413      	add	r3, r2
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b20      	cmp	r3, #32
 8004522:	d012      	beq.n	800454a <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	2b05      	cmp	r3, #5
 8004528:	d101      	bne.n	800452e <get_fileinfo+0x46>
 800452a:	23e5      	movs	r3, #229	@ 0xe5
 800452c:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b09      	cmp	r3, #9
 8004532:	d104      	bne.n	800453e <get_fileinfo+0x56>
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	613a      	str	r2, [r7, #16]
 800453a:	222e      	movs	r2, #46	@ 0x2e
 800453c:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	613a      	str	r2, [r7, #16]
 8004544:	7bfa      	ldrb	r2, [r7, #15]
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e000      	b.n	800454c <get_fileinfo+0x64>
			if (c == ' ') continue;				/* Skip padding spaces */
 800454a:	bf00      	nop
		while (i < 11) {		/* Copy name body and extension */
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b0a      	cmp	r3, #10
 8004550:	d9de      	bls.n	8004510 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	7ada      	ldrb	r2, [r3, #11]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	331f      	adds	r3, #31
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	061a      	lsls	r2, r3, #24
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	331e      	adds	r3, #30
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	041b      	lsls	r3, r3, #16
 800456a:	431a      	orrs	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	331d      	adds	r3, #29
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	4313      	orrs	r3, r2
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	321c      	adds	r2, #28
 800457a:	7812      	ldrb	r2, [r2, #0]
 800457c:	431a      	orrs	r2, r3
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3319      	adds	r3, #25
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	b21b      	sxth	r3, r3
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	b21a      	sxth	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	3318      	adds	r3, #24
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b21b      	sxth	r3, r3
 8004596:	4313      	orrs	r3, r2
 8004598:	b21b      	sxth	r3, r3
 800459a:	b29a      	uxth	r2, r3
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	3317      	adds	r3, #23
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	b21b      	sxth	r3, r3
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	b21a      	sxth	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	3316      	adds	r3, #22
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	b21b      	sxth	r3, r3
 80045b4:	4313      	orrs	r3, r2
 80045b6:	b21b      	sxth	r3, r3
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr
	...

080045d0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	e002      	b.n	80045e8 <create_name+0x18>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3301      	adds	r3, #1
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80045ee:	d0f8      	beq.n	80045e2 <create_name+0x12>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80045f6:	d0f4      	beq.n	80045e2 <create_name+0x12>
	sfn = dp->fn;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80045fe:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004600:	220b      	movs	r2, #11
 8004602:	2120      	movs	r1, #32
 8004604:	68b8      	ldr	r0, [r7, #8]
 8004606:	f7fe fe1b 	bl	8003240 <mem_set>
	si = i = b = 0; ni = 8;
 800460a:	2300      	movs	r3, #0
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	2300      	movs	r3, #0
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	2308      	movs	r3, #8
 8004618:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	4413      	add	r3, r2
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b2e      	cmp	r3, #46	@ 0x2e
 8004624:	d12f      	bne.n	8004686 <create_name+0xb6>
		for (;;) {
			c = (BYTE)p[si++];
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	617a      	str	r2, [r7, #20]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	77bb      	strb	r3, [r7, #30]
			if (c != '.' || si >= 3) break;
 8004634:	7fbb      	ldrb	r3, [r7, #30]
 8004636:	2b2e      	cmp	r3, #46	@ 0x2e
 8004638:	d10a      	bne.n	8004650 <create_name+0x80>
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d807      	bhi.n	8004650 <create_name+0x80>
			sfn[i++] = c;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	613a      	str	r2, [r7, #16]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	4413      	add	r3, r2
 800464a:	7fba      	ldrb	r2, [r7, #30]
 800464c:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800464e:	e7ea      	b.n	8004626 <create_name+0x56>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8004650:	7fbb      	ldrb	r3, [r7, #30]
 8004652:	2b2f      	cmp	r3, #47	@ 0x2f
 8004654:	d007      	beq.n	8004666 <create_name+0x96>
 8004656:	7fbb      	ldrb	r3, [r7, #30]
 8004658:	2b5c      	cmp	r3, #92	@ 0x5c
 800465a:	d004      	beq.n	8004666 <create_name+0x96>
 800465c:	7fbb      	ldrb	r3, [r7, #30]
 800465e:	2b20      	cmp	r3, #32
 8004660:	d901      	bls.n	8004666 <create_name+0x96>
 8004662:	2306      	movs	r3, #6
 8004664:	e0a2      	b.n	80047ac <create_name+0x1dc>
		*path = &p[si];									/* Return pointer to the next segment */
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	441a      	add	r2, r3
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 8004670:	7fbb      	ldrb	r3, [r7, #30]
 8004672:	2b20      	cmp	r3, #32
 8004674:	d801      	bhi.n	800467a <create_name+0xaa>
 8004676:	2224      	movs	r2, #36	@ 0x24
 8004678:	e000      	b.n	800467c <create_name+0xac>
 800467a:	2220      	movs	r2, #32
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	330b      	adds	r3, #11
 8004680:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	e092      	b.n	80047ac <create_name+0x1dc>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	617a      	str	r2, [r7, #20]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8004694:	7fbb      	ldrb	r3, [r7, #30]
 8004696:	2b20      	cmp	r3, #32
 8004698:	d953      	bls.n	8004742 <create_name+0x172>
 800469a:	7fbb      	ldrb	r3, [r7, #30]
 800469c:	2b2f      	cmp	r3, #47	@ 0x2f
 800469e:	d050      	beq.n	8004742 <create_name+0x172>
 80046a0:	7fbb      	ldrb	r3, [r7, #30]
 80046a2:	2b5c      	cmp	r3, #92	@ 0x5c
 80046a4:	d04d      	beq.n	8004742 <create_name+0x172>
		if (c == '.' || i >= ni) {
 80046a6:	7fbb      	ldrb	r3, [r7, #30]
 80046a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80046aa:	d003      	beq.n	80046b4 <create_name+0xe4>
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d30f      	bcc.n	80046d4 <create_name+0x104>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d102      	bne.n	80046c0 <create_name+0xf0>
 80046ba:	7fbb      	ldrb	r3, [r7, #30]
 80046bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80046be:	d001      	beq.n	80046c4 <create_name+0xf4>
 80046c0:	2306      	movs	r3, #6
 80046c2:	e073      	b.n	80047ac <create_name+0x1dc>
			i = 8; ni = 11;
 80046c4:	2308      	movs	r3, #8
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	230b      	movs	r3, #11
 80046ca:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80046cc:	7ffb      	ldrb	r3, [r7, #31]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e035      	b.n	8004740 <create_name+0x170>
		}
		if (c >= 0x80) {				/* Extended character? */
 80046d4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	da08      	bge.n	80046ee <create_name+0x11e>
			b |= 3;						/* Eliminate NT flag */
 80046dc:	7ffb      	ldrb	r3, [r7, #31]
 80046de:	f043 0303 	orr.w	r3, r3, #3
 80046e2:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80046e4:	7fbb      	ldrb	r3, [r7, #30]
 80046e6:	3b80      	subs	r3, #128	@ 0x80
 80046e8:	4a32      	ldr	r2, [pc, #200]	@ (80047b4 <create_name+0x1e4>)
 80046ea:	5cd3      	ldrb	r3, [r2, r3]
 80046ec:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80046ee:	7fbb      	ldrb	r3, [r7, #30]
 80046f0:	4619      	mov	r1, r3
 80046f2:	4831      	ldr	r0, [pc, #196]	@ (80047b8 <create_name+0x1e8>)
 80046f4:	f7fe fde4 	bl	80032c0 <chk_chr>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <create_name+0x132>
				return FR_INVALID_NAME;
 80046fe:	2306      	movs	r3, #6
 8004700:	e054      	b.n	80047ac <create_name+0x1dc>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8004702:	7fbb      	ldrb	r3, [r7, #30]
 8004704:	2b40      	cmp	r3, #64	@ 0x40
 8004706:	d907      	bls.n	8004718 <create_name+0x148>
 8004708:	7fbb      	ldrb	r3, [r7, #30]
 800470a:	2b5a      	cmp	r3, #90	@ 0x5a
 800470c:	d804      	bhi.n	8004718 <create_name+0x148>
				b |= 2;
 800470e:	7ffb      	ldrb	r3, [r7, #31]
 8004710:	f043 0302 	orr.w	r3, r3, #2
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e00c      	b.n	8004732 <create_name+0x162>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8004718:	7fbb      	ldrb	r3, [r7, #30]
 800471a:	2b60      	cmp	r3, #96	@ 0x60
 800471c:	d909      	bls.n	8004732 <create_name+0x162>
 800471e:	7fbb      	ldrb	r3, [r7, #30]
 8004720:	2b7a      	cmp	r3, #122	@ 0x7a
 8004722:	d806      	bhi.n	8004732 <create_name+0x162>
					b |= 1; c -= 0x20;
 8004724:	7ffb      	ldrb	r3, [r7, #31]
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	7fbb      	ldrb	r3, [r7, #30]
 800472e:	3b20      	subs	r3, #32
 8004730:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	613a      	str	r2, [r7, #16]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	4413      	add	r3, r2
 800473c:	7fba      	ldrb	r2, [r7, #30]
 800473e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004740:	e7a1      	b.n	8004686 <create_name+0xb6>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	441a      	add	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800474c:	7fbb      	ldrb	r3, [r7, #30]
 800474e:	2b20      	cmp	r3, #32
 8004750:	d801      	bhi.n	8004756 <create_name+0x186>
 8004752:	2304      	movs	r3, #4
 8004754:	e000      	b.n	8004758 <create_name+0x188>
 8004756:	2300      	movs	r3, #0
 8004758:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <create_name+0x194>
 8004760:	2306      	movs	r3, #6
 8004762:	e023      	b.n	80047ac <create_name+0x1dc>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2be5      	cmp	r3, #229	@ 0xe5
 800476a:	d102      	bne.n	8004772 <create_name+0x1a2>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2205      	movs	r2, #5
 8004770:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d102      	bne.n	800477e <create_name+0x1ae>
 8004778:	7ffb      	ldrb	r3, [r7, #31]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800477e:	7ffb      	ldrb	r3, [r7, #31]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	2b01      	cmp	r3, #1
 8004786:	d103      	bne.n	8004790 <create_name+0x1c0>
 8004788:	7fbb      	ldrb	r3, [r7, #30]
 800478a:	f043 0310 	orr.w	r3, r3, #16
 800478e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004790:	7ffb      	ldrb	r3, [r7, #31]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b04      	cmp	r3, #4
 8004798:	d103      	bne.n	80047a2 <create_name+0x1d2>
 800479a:	7fbb      	ldrb	r3, [r7, #30]
 800479c:	f043 0308 	orr.w	r3, r3, #8
 80047a0:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	330b      	adds	r3, #11
 80047a6:	7fba      	ldrb	r2, [r7, #30]
 80047a8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80047aa:	2300      	movs	r3, #0
#endif
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	0800742c 	.word	0x0800742c
 80047b8:	080073bc 	.word	0x080073bc

080047bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80047cc:	d003      	beq.n	80047d6 <follow_path+0x1a>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b5c      	cmp	r3, #92	@ 0x5c
 80047d4:	d107      	bne.n	80047e6 <follow_path+0x2a>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	3301      	adds	r3, #1
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 80047e4:	e007      	b.n	80047f6 <follow_path+0x3a>
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80047ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b1f      	cmp	r3, #31
 80047fc:	d80a      	bhi.n	8004814 <follow_path+0x58>
		res = dir_sdi(dp, 0);
 80047fe:	2100      	movs	r1, #0
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff fb63 	bl	8003ecc <dir_sdi>
 8004806:	4603      	mov	r3, r0
 8004808:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004812:	e05c      	b.n	80048ce <follow_path+0x112>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004814:	463b      	mov	r3, r7
 8004816:	4619      	mov	r1, r3
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fed9 	bl	80045d0 <create_name>
 800481e:	4603      	mov	r3, r0
 8004820:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d14d      	bne.n	80048c4 <follow_path+0x108>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff fd79 	bl	8004320 <dir_find>
 800482e:	4603      	mov	r3, r0
 8004830:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004838:	7adb      	ldrb	r3, [r3, #11]
 800483a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01f      	beq.n	8004882 <follow_path+0xc6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b04      	cmp	r3, #4
 8004846:	d13f      	bne.n	80048c8 <follow_path+0x10c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 8004848:	7bbb      	ldrb	r3, [r7, #14]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00f      	beq.n	8004872 <follow_path+0xb6>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8004862:	7bbb      	ldrb	r3, [r7, #14]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d029      	beq.n	80048c0 <follow_path+0x104>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
 800486c:	2300      	movs	r3, #0
 800486e:	73fb      	strb	r3, [r7, #15]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8004870:	e02a      	b.n	80048c8 <follow_path+0x10c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004872:	7bbb      	ldrb	r3, [r7, #14]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d125      	bne.n	80048c8 <follow_path+0x10c>
 800487c:	2305      	movs	r3, #5
 800487e:	73fb      	strb	r3, [r7, #15]
				break;
 8004880:	e022      	b.n	80048c8 <follow_path+0x10c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004882:	7bbb      	ldrb	r3, [r7, #14]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d11f      	bne.n	80048cc <follow_path+0x110>
			dir = dp->dir;						/* Follow the sub-directory */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004892:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	330b      	adds	r3, #11
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	f003 0310 	and.w	r3, r3, #16
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d102      	bne.n	80048a8 <follow_path+0xec>
				res = FR_NO_PATH; break;
 80048a2:	2305      	movs	r3, #5
 80048a4:	73fb      	strb	r3, [r7, #15]
 80048a6:	e012      	b.n	80048ce <follow_path+0x112>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fce0 	bl	8004276 <ld_clust>
 80048b6:	4602      	mov	r2, r0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 80048be:	e7a9      	b.n	8004814 <follow_path+0x58>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80048c0:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80048c2:	e7a7      	b.n	8004814 <follow_path+0x58>
			if (res != FR_OK) break;
 80048c4:	bf00      	nop
 80048c6:	e002      	b.n	80048ce <follow_path+0x112>
				break;
 80048c8:	bf00      	nop
 80048ca:	e000      	b.n	80048ce <follow_path+0x112>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80048cc:	bf00      	nop
		}
	}

	return res;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80048e0:	f04f 33ff 	mov.w	r3, #4294967295
 80048e4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d031      	beq.n	8004952 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	e002      	b.n	80048fc <get_ldnumber+0x24>
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	3301      	adds	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b20      	cmp	r3, #32
 8004902:	d903      	bls.n	800490c <get_ldnumber+0x34>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b3a      	cmp	r3, #58	@ 0x3a
 800490a:	d1f4      	bne.n	80048f6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b3a      	cmp	r3, #58	@ 0x3a
 8004912:	d11c      	bne.n	800494e <get_ldnumber+0x76>
			tp = *path;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	60fa      	str	r2, [r7, #12]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	3b30      	subs	r3, #48	@ 0x30
 8004924:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b09      	cmp	r3, #9
 800492a:	d80e      	bhi.n	800494a <get_ldnumber+0x72>
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	429a      	cmp	r2, r3
 8004932:	d10a      	bne.n	800494a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d107      	bne.n	800494a <get_ldnumber+0x72>
					vol = (int)i;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	3301      	adds	r3, #1
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	e002      	b.n	8004954 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004952:	693b      	ldr	r3, [r7, #16]
}
 8004954:	4618      	mov	r0, r3
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr
	...

08004960 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f04f 32ff 	mov.w	r2, #4294967295
 8004978:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800497c:	6839      	ldr	r1, [r7, #0]
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fe feb5 	bl	80036ee <move_window>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <check_fs+0x2e>
		return 3;
 800498a:	2303      	movs	r3, #3
 800498c:	e04b      	b.n	8004a26 <check_fs+0xc6>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004994:	3301      	adds	r3, #1
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b21b      	sxth	r3, r3
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	b21a      	sxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80049a4:	b21b      	sxth	r3, r3
 80049a6:	4313      	orrs	r3, r2
 80049a8:	b21b      	sxth	r3, r3
 80049aa:	4a21      	ldr	r2, [pc, #132]	@ (8004a30 <check_fs+0xd0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d001      	beq.n	80049b4 <check_fs+0x54>
		return 2;
 80049b0:	2302      	movs	r3, #2
 80049b2:	e038      	b.n	8004a26 <check_fs+0xc6>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3336      	adds	r3, #54	@ 0x36
 80049b8:	3303      	adds	r3, #3
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	061a      	lsls	r2, r3, #24
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3336      	adds	r3, #54	@ 0x36
 80049c2:	3302      	adds	r3, #2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	041b      	lsls	r3, r3, #16
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3336      	adds	r3, #54	@ 0x36
 80049ce:	3301      	adds	r3, #1
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	4313      	orrs	r3, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 80049dc:	4313      	orrs	r3, r2
 80049de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80049e2:	4a14      	ldr	r2, [pc, #80]	@ (8004a34 <check_fs+0xd4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d101      	bne.n	80049ec <check_fs+0x8c>
		return 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e01c      	b.n	8004a26 <check_fs+0xc6>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3352      	adds	r3, #82	@ 0x52
 80049f0:	3303      	adds	r3, #3
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	061a      	lsls	r2, r3, #24
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3352      	adds	r3, #82	@ 0x52
 80049fa:	3302      	adds	r3, #2
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3352      	adds	r3, #82	@ 0x52
 8004a06:	3301      	adds	r3, #1
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a1a:	4a06      	ldr	r2, [pc, #24]	@ (8004a34 <check_fs+0xd4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d101      	bne.n	8004a24 <check_fs+0xc4>
		return 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <check_fs+0xc6>

	return 1;
 8004a24:	2301      	movs	r3, #1
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	ffffaa55 	.word	0xffffaa55
 8004a34:	00544146 	.word	0x00544146

08004a38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b096      	sub	sp, #88	@ 0x58
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	4613      	mov	r3, r2
 8004a44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004a4c:	68b8      	ldr	r0, [r7, #8]
 8004a4e:	f7ff ff43 	bl	80048d8 <get_ldnumber>
 8004a52:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da01      	bge.n	8004a5e <find_volume+0x26>
 8004a5a:	230b      	movs	r3, #11
 8004a5c:	e29d      	b.n	8004f9a <find_volume+0x562>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004a5e:	4a9e      	ldr	r2, [pc, #632]	@ (8004cd8 <find_volume+0x2a0>)
 8004a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a66:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <find_volume+0x3a>
 8004a6e:	230c      	movs	r3, #12
 8004a70:	e293      	b.n	8004f9a <find_volume+0x562>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a76:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01b      	beq.n	8004aba <find_volume+0x82>
		stat = disk_status(fs->drv);
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe fb1d 	bl	80030c8 <disk_status>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004a94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10c      	bne.n	8004aba <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <find_volume+0x7e>
 8004aa6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8004ab2:	230a      	movs	r3, #10
 8004ab4:	e271      	b.n	8004f9a <find_volume+0x562>
			return FR_OK;				/* The file system object is valid */
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e26f      	b.n	8004f9a <find_volume+0x562>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ace:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fe fb12 	bl	80030fc <disk_initialize>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004ade:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004aea:	2303      	movs	r3, #3
 8004aec:	e255      	b.n	8004f9a <find_volume+0x562>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <find_volume+0xcc>
 8004af4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8004b00:	230a      	movs	r3, #10
 8004b02:	e24a      	b.n	8004f9a <find_volume+0x562>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004b08:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004b0c:	f7ff ff28 	bl	8004960 <check_fs>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004b16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d153      	bne.n	8004bc6 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004b1e:	2300      	movs	r3, #0
 8004b20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b22:	e028      	b.n	8004b76 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004b24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004b2e:	4413      	add	r3, r2
 8004b30:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b34:	3304      	adds	r3, #4
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d012      	beq.n	8004b62 <find_volume+0x12a>
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	330b      	adds	r3, #11
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	061a      	lsls	r2, r3, #24
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	330a      	adds	r3, #10
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	041b      	lsls	r3, r3, #16
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b50:	3309      	adds	r3, #9
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	4313      	orrs	r3, r2
 8004b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b5a:	3208      	adds	r2, #8
 8004b5c:	7812      	ldrb	r2, [r2, #0]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	e000      	b.n	8004b64 <find_volume+0x12c>
 8004b62:	2200      	movs	r2, #0
 8004b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	3358      	adds	r3, #88	@ 0x58
 8004b6a:	443b      	add	r3, r7
 8004b6c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004b70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b72:	3301      	adds	r3, #1
 8004b74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d9d3      	bls.n	8004b24 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <find_volume+0x154>
 8004b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8004b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	3358      	adds	r3, #88	@ 0x58
 8004b92:	443b      	add	r3, r7
 8004b94:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004b98:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <find_volume+0x174>
 8004ba0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ba2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ba4:	f7ff fedc 	bl	8004960 <check_fs>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	e000      	b.n	8004bae <find_volume+0x176>
 8004bac:	2302      	movs	r3, #2
 8004bae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004bb2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <find_volume+0x18e>
 8004bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d9e2      	bls.n	8004b8c <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004bc6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d101      	bne.n	8004bd2 <find_volume+0x19a>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e1e3      	b.n	8004f9a <find_volume+0x562>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004bd2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <find_volume+0x1a6>
 8004bda:	230d      	movs	r3, #13
 8004bdc:	e1dd      	b.n	8004f9a <find_volume+0x562>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be0:	7b1b      	ldrb	r3, [r3, #12]
 8004be2:	b21b      	sxth	r3, r3
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	b21a      	sxth	r2, r3
 8004be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bea:	7adb      	ldrb	r3, [r3, #11]
 8004bec:	b21b      	sxth	r3, r3
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	b21b      	sxth	r3, r3
 8004bf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bf6:	d001      	beq.n	8004bfc <find_volume+0x1c4>
		return FR_NO_FILESYSTEM;
 8004bf8:	230d      	movs	r3, #13
 8004bfa:	e1ce      	b.n	8004f9a <find_volume+0x562>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfe:	7ddb      	ldrb	r3, [r3, #23]
 8004c00:	b21b      	sxth	r3, r3
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	b21a      	sxth	r2, r3
 8004c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c08:	7d9b      	ldrb	r3, [r3, #22]
 8004c0a:	b21b      	sxth	r3, r3
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	b21b      	sxth	r3, r3
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d112      	bne.n	8004c40 <find_volume+0x208>
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8004c20:	061a      	lsls	r2, r3, #24
 8004c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c24:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004c28:	041b      	lsls	r3, r3, #16
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	4313      	orrs	r3, r2
 8004c36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c38:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8004c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c44:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4a:	7c1a      	ldrb	r2, [r3, #16]
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4e:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c54:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d006      	beq.n	8004c6a <find_volume+0x232>
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5e:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d001      	beq.n	8004c6a <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8004c66:	230d      	movs	r3, #13
 8004c68:	e197      	b.n	8004f9a <find_volume+0x562>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6c:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8004c70:	461a      	mov	r2, r3
 8004c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c74:	fb02 f303 	mul.w	r3, r2, r3
 8004c78:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7c:	7b5a      	ldrb	r2, [r3, #13]
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c80:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c86:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <find_volume+0x26c>
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c90:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8004c94:	461a      	mov	r2, r3
 8004c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c98:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8004ca4:	230d      	movs	r3, #13
 8004ca6:	e178      	b.n	8004f9a <find_volume+0x562>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004caa:	7c9b      	ldrb	r3, [r3, #18]
 8004cac:	b21b      	sxth	r3, r3
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	b21a      	sxth	r2, r3
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb4:	7c5b      	ldrb	r3, [r3, #17]
 8004cb6:	b21b      	sxth	r3, r3
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	b21b      	sxth	r3, r3
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc0:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8004cd4:	230d      	movs	r3, #13
 8004cd6:	e160      	b.n	8004f9a <find_volume+0x562>
 8004cd8:	200005b4 	.word	0x200005b4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cde:	7d1b      	ldrb	r3, [r3, #20]
 8004ce0:	b21b      	sxth	r3, r3
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	b21a      	sxth	r2, r3
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce8:	7cdb      	ldrb	r3, [r3, #19]
 8004cea:	b21b      	sxth	r3, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	b21b      	sxth	r3, r3
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d112      	bne.n	8004d20 <find_volume+0x2e8>
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8004d00:	061a      	lsls	r2, r3, #24
 8004d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d04:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	4313      	orrs	r3, r2
 8004d16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d18:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d22:	7bdb      	ldrb	r3, [r3, #15]
 8004d24:	b21b      	sxth	r3, r3
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	b21a      	sxth	r2, r3
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2c:	7b9b      	ldrb	r3, [r3, #14]
 8004d2e:	b21b      	sxth	r3, r3
 8004d30:	4313      	orrs	r3, r2
 8004d32:	b21b      	sxth	r3, r3
 8004d34:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004d36:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <find_volume+0x308>
 8004d3c:	230d      	movs	r3, #13
 8004d3e:	e12c      	b.n	8004f9a <find_volume+0x562>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004d40:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d44:	4413      	add	r3, r2
 8004d46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d48:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 8004d4c:	0912      	lsrs	r2, r2, #4
 8004d4e:	b292      	uxth	r2, r2
 8004d50:	4413      	add	r3, r2
 8004d52:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004d54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d201      	bcs.n	8004d60 <find_volume+0x328>
 8004d5c:	230d      	movs	r3, #13
 8004d5e:	e11c      	b.n	8004f9a <find_volume+0x562>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004d60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d68:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8004d6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <find_volume+0x344>
 8004d78:	230d      	movs	r3, #13
 8004d7a:	e10e      	b.n	8004f9a <find_volume+0x562>
	fmt = FS_FAT12;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d902      	bls.n	8004d92 <find_volume+0x35a>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d902      	bls.n	8004da2 <find_volume+0x36a>
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	1c9a      	adds	r2, r3, #2
 8004da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8004dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004db0:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004db4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004db8:	441a      	add	r2, r3
 8004dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dbc:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8004dc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc4:	441a      	add	r2, r3
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (fmt == FS_FAT32) {
 8004dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d121      	bne.n	8004e18 <find_volume+0x3e0>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <find_volume+0x3aa>
 8004dde:	230d      	movs	r3, #13
 8004de0:	e0db      	b.n	8004f9a <find_volume+0x562>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004de8:	061a      	lsls	r2, r3, #24
 8004dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dec:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004df0:	041b      	lsls	r3, r3, #16
 8004df2:	431a      	orrs	r2, r3
 8004df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e00:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8004e04:	431a      	orrs	r2, r3
 8004e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e08:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e16:	e025      	b.n	8004e64 <find_volume+0x42c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <find_volume+0x3ee>
 8004e22:	230d      	movs	r3, #13
 8004e24:	e0b9      	b.n	8004f9a <find_volume+0x562>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 8004e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e2e:	441a      	add	r2, r3
 8004e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e32:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004e36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d104      	bne.n	8004e48 <find_volume+0x410>
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	e00c      	b.n	8004e62 <find_volume+0x42a>
 8004e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4a:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8004e4e:	4613      	mov	r3, r2
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	4413      	add	r3, r2
 8004e54:	085a      	lsrs	r2, r3, #1
 8004e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e58:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8004e62:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e66:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004e6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e6c:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8004e70:	0a5b      	lsrs	r3, r3, #9
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d201      	bcs.n	8004e7a <find_volume+0x442>
		return FR_NO_FILESYSTEM;
 8004e76:	230d      	movs	r3, #13
 8004e78:	e08f      	b.n	8004f9a <find_volume+0x562>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e80:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 8004e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e86:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e92:	2280      	movs	r2, #128	@ 0x80
 8004e94:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004e98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d164      	bne.n	8004f6a <find_volume+0x532>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ea6:	b21b      	sxth	r3, r3
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	b21a      	sxth	r2, r3
 8004eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004eb2:	b21b      	sxth	r3, r3
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	b21b      	sxth	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d156      	bne.n	8004f6a <find_volume+0x532>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004ebc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ec4:	f7fe fc13 	bl	80036ee <move_window>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d14d      	bne.n	8004f6a <find_volume+0x532>
	{
		fs->fsi_flag = 0;
 8004ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed8:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8004edc:	b21b      	sxth	r3, r3
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	b21a      	sxth	r2, r3
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8004ee8:	b21b      	sxth	r3, r3
 8004eea:	4313      	orrs	r3, r2
 8004eec:	b21b      	sxth	r3, r3
 8004eee:	4a2d      	ldr	r2, [pc, #180]	@ (8004fa4 <find_volume+0x56c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d13a      	bne.n	8004f6a <find_volume+0x532>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef6:	78db      	ldrb	r3, [r3, #3]
 8004ef8:	061a      	lsls	r2, r3, #24
 8004efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efc:	789b      	ldrb	r3, [r3, #2]
 8004efe:	041b      	lsls	r3, r3, #16
 8004f00:	431a      	orrs	r2, r3
 8004f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f04:	785b      	ldrb	r3, [r3, #1]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f0c:	7812      	ldrb	r2, [r2, #0]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	4a25      	ldr	r2, [pc, #148]	@ (8004fa8 <find_volume+0x570>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d129      	bne.n	8004f6a <find_volume+0x532>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8004f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f18:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8004f1c:	061a      	lsls	r2, r3, #24
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f20:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8004f24:	041b      	lsls	r3, r3, #16
 8004f26:	431a      	orrs	r2, r3
 8004f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2a:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	4313      	orrs	r3, r2
 8004f32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f34:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fac <find_volume+0x574>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d114      	bne.n	8004f6a <find_volume+0x532>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f42:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8004f46:	061a      	lsls	r2, r3, #24
 8004f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4a:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8004f4e:	041b      	lsls	r3, r3, #16
 8004f50:	431a      	orrs	r2, r3
 8004f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f54:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f5e:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8004f62:	431a      	orrs	r2, r3
 8004f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f66:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004f70:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8004f74:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb0 <find_volume+0x578>)
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb0 <find_volume+0x578>)
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb0 <find_volume+0x578>)
 8004f82:	881a      	ldrh	r2, [r3, #0]
 8004f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f86:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8004f92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f94:	f7fe fb38 	bl	8003608 <clear_lock>
#endif

	return FR_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3758      	adds	r7, #88	@ 0x58
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	ffffaa55 	.word	0xffffaa55
 8004fa8:	41615252 	.word	0x41615252
 8004fac:	61417272 	.word	0x61417272
 8004fb0:	200005b8 	.word	0x200005b8

08004fb4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d022      	beq.n	800500c <validate+0x58>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01d      	beq.n	800500c <validate+0x58>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004fd6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d016      	beq.n	800500c <validate+0x58>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004fe4:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d10c      	bne.n	800500c <validate+0x58>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004ff8:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fe f863 	bl	80030c8 <disk_status>
 8005002:	4603      	mov	r3, r0
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800500c:	2309      	movs	r3, #9
 800500e:	e000      	b.n	8005012 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	4613      	mov	r3, r2
 8005028:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800502e:	f107 0310 	add.w	r3, r7, #16
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fc50 	bl	80048d8 <get_ldnumber>
 8005038:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	2b00      	cmp	r3, #0
 800503e:	da01      	bge.n	8005044 <f_mount+0x28>
 8005040:	230b      	movs	r3, #11
 8005042:	e02d      	b.n	80050a0 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005044:	4a18      	ldr	r2, [pc, #96]	@ (80050a8 <f_mount+0x8c>)
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800504c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d006      	beq.n	8005062 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8005054:	69b8      	ldr	r0, [r7, #24]
 8005056:	f7fe fad7 	bl	8003608 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	490d      	ldr	r1, [pc, #52]	@ (80050a8 <f_mount+0x8c>)
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <f_mount+0x6a>
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d001      	beq.n	800508a <f_mount+0x6e>
 8005086:	2300      	movs	r3, #0
 8005088:	e00a      	b.n	80050a0 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800508a:	f107 0108 	add.w	r1, r7, #8
 800508e:	f107 030c 	add.w	r3, r7, #12
 8005092:	2200      	movs	r2, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff fccf 	bl	8004a38 <find_volume>
 800509a:	4603      	mov	r3, r0
 800509c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800509e:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	200005b4 	.word	0x200005b4

080050ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80050b8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80050bc:	6018      	str	r0, [r3, #0]
 80050be:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80050c2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80050c6:	6019      	str	r1, [r3, #0]
 80050c8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80050cc:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80050d0:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80050d2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80050d6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <f_open+0x38>
 80050e0:	2309      	movs	r3, #9
 80050e2:	e253      	b.n	800558c <f_open+0x4e0>
	fp->fs = 0;			/* Clear file object */
 80050e4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80050e8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80050f4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80050f8:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80050fc:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8005100:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8005104:	7812      	ldrb	r2, [r2, #0]
 8005106:	f002 021f 	and.w	r2, r2, #31
 800510a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800510c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005110:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	b2da      	uxtb	r2, r3
 800511c:	f107 0108 	add.w	r1, r7, #8
 8005120:	f107 0320 	add.w	r3, r7, #32
 8005124:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fc85 	bl	8004a38 <find_volume>
 800512e:	4603      	mov	r3, r0
 8005130:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005134:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8005138:	2b00      	cmp	r3, #0
 800513a:	f040 8225 	bne.w	8005588 <f_open+0x4dc>
		INIT_BUF(dj);
 800513e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005142:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8005146:	f107 0214 	add.w	r2, r7, #20
 800514a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800514e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005152:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	f107 0320 	add.w	r3, r7, #32
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff fb2c 	bl	80047bc <follow_path>
 8005164:	4603      	mov	r3, r0
 8005166:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		dir = dj.dir;
 800516a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800516e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8005172:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005176:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800517a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800517e:	2b00      	cmp	r3, #0
 8005180:	d11b      	bne.n	80051ba <f_open+0x10e>
			if (!dir)	/* Default directory itself */
 8005182:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <f_open+0xe6>
				res = FR_INVALID_NAME;
 800518a:	2306      	movs	r3, #6
 800518c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8005190:	e013      	b.n	80051ba <f_open+0x10e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005192:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005196:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b01      	cmp	r3, #1
 800519e:	bf8c      	ite	hi
 80051a0:	2301      	movhi	r3, #1
 80051a2:	2300      	movls	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	f107 0320 	add.w	r3, r7, #32
 80051ac:	4611      	mov	r1, r2
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe f8a0 	bl	80032f4 <chk_lock>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80051ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80051be:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f003 031c 	and.w	r3, r3, #28
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80e6 	beq.w	800539a <f_open+0x2ee>
			if (res != FR_OK) {					/* No file, create new */
 80051ce:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d027      	beq.n	8005226 <f_open+0x17a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80051d6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d10e      	bne.n	80051fc <f_open+0x150>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80051de:	f7fe f8f5 	bl	80033cc <enq_lock>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d006      	beq.n	80051f6 <f_open+0x14a>
 80051e8:	f107 0320 	add.w	r3, r7, #32
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff f942 	bl	8004476 <dir_register>
 80051f2:	4603      	mov	r3, r0
 80051f4:	e000      	b.n	80051f8 <f_open+0x14c>
 80051f6:	2312      	movs	r3, #18
 80051f8:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80051fc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005200:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005204:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8005208:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	f042 0208 	orr.w	r2, r2, #8
 8005212:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8005214:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005218:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800521c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005220:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8005224:	e017      	b.n	8005256 <f_open+0x1aa>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005226:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800522a:	330b      	adds	r3, #11
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	f003 0311 	and.w	r3, r3, #17
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <f_open+0x192>
					res = FR_DENIED;
 8005236:	2307      	movs	r3, #7
 8005238:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 800523c:	e00b      	b.n	8005256 <f_open+0x1aa>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800523e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005242:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <f_open+0x1aa>
						res = FR_EXIST;
 8005250:	2308      	movs	r3, #8
 8005252:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005256:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800525a:	2b00      	cmp	r3, #0
 800525c:	f040 80c1 	bne.w	80053e2 <f_open+0x336>
 8005260:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005264:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 80b7 	beq.w	80053e2 <f_open+0x336>
				dw = GET_FATTIME();				/* Created time */
 8005274:	f7fd f9f4 	bl	8002660 <get_fattime>
 8005278:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800527c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005280:	330e      	adds	r3, #14
 8005282:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800528e:	b29b      	uxth	r3, r3
 8005290:	0a1b      	lsrs	r3, r3, #8
 8005292:	b29a      	uxth	r2, r3
 8005294:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005298:	330f      	adds	r3, #15
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80052a2:	0c1a      	lsrs	r2, r3, #16
 80052a4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80052a8:	3310      	adds	r3, #16
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80052b2:	0e1a      	lsrs	r2, r3, #24
 80052b4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80052b8:	3311      	adds	r3, #17
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80052be:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80052c2:	330b      	adds	r3, #11
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80052c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80052cc:	331c      	adds	r3, #28
 80052ce:	2200      	movs	r2, #0
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80052d6:	331d      	adds	r3, #29
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
 80052dc:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80052e0:	331e      	adds	r3, #30
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80052ea:	331f      	adds	r3, #31
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80052f0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80052f4:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80052f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80052fc:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8005300:	4618      	mov	r0, r3
 8005302:	f7fe ffb8 	bl	8004276 <ld_clust>
 8005306:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800530a:	2100      	movs	r1, #0
 800530c:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8005310:	f7fe ffe0 	bl	80042d4 <st_clust>
				dj.fs->wflag = 1;
 8005314:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005318:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800531c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8005326:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800532a:	2b00      	cmp	r3, #0
 800532c:	d059      	beq.n	80053e2 <f_open+0x336>
					dw = dj.fs->winsect;
 800532e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005332:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8005336:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800533a:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800533e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
					res = remove_chain(dj.fs, cl);
 8005342:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005346:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800534a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800534e:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8005352:	4618      	mov	r0, r3
 8005354:	f7fe fc8f 	bl	8003c76 <remove_chain>
 8005358:	4603      	mov	r3, r0
 800535a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
					if (res == FR_OK) {
 800535e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8005362:	2b00      	cmp	r3, #0
 8005364:	d13d      	bne.n	80053e2 <f_open+0x336>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005366:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800536a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800536e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005372:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8005376:	3a01      	subs	r2, #1
 8005378:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
						res = move_window(dj.fs, dw);
 800537c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005380:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8005384:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005388:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe f9ae 	bl	80036ee <move_window>
 8005392:	4603      	mov	r3, r0
 8005394:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8005398:	e023      	b.n	80053e2 <f_open+0x336>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800539a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d11f      	bne.n	80053e2 <f_open+0x336>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80053a2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80053a6:	330b      	adds	r3, #11
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <f_open+0x30e>
					res = FR_NO_FILE;
 80053b2:	2304      	movs	r3, #4
 80053b4:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80053b8:	e013      	b.n	80053e2 <f_open+0x336>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80053ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80053be:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <f_open+0x336>
 80053cc:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80053d0:	330b      	adds	r3, #11
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <f_open+0x336>
						res = FR_DENIED;
 80053dc:	2307      	movs	r3, #7
 80053de:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80053e2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d151      	bne.n	800548e <f_open+0x3e2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80053ea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80053ee:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00b      	beq.n	8005414 <f_open+0x368>
				mode |= FA__WRITTEN;
 80053fc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005400:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8005404:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8005408:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 800540c:	7812      	ldrb	r2, [r2, #0]
 800540e:	f042 0220 	orr.w	r2, r2, #32
 8005412:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005414:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005418:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800541c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005420:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 8005424:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005428:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 8005432:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005436:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8005440:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005444:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005448:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b01      	cmp	r3, #1
 8005450:	bf8c      	ite	hi
 8005452:	2301      	movhi	r3, #1
 8005454:	2300      	movls	r3, #0
 8005456:	b2db      	uxtb	r3, r3
 8005458:	461a      	mov	r2, r3
 800545a:	f107 0320 	add.w	r3, r7, #32
 800545e:	4611      	mov	r1, r2
 8005460:	4618      	mov	r0, r3
 8005462:	f7fd ffd7 	bl	8003414 <inc_lock>
 8005466:	4602      	mov	r2, r0
 8005468:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800546c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8005476:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800547a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <f_open+0x3e2>
 8005488:	2302      	movs	r3, #2
 800548a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800548e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8005492:	2b00      	cmp	r3, #0
 8005494:	d178      	bne.n	8005588 <f_open+0x4dc>
			fp->flag = mode;					/* File access mode */
 8005496:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800549a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80054a4:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 80054a8:	7812      	ldrb	r2, [r2, #0]
 80054aa:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 80054ae:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80054b2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80054be:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80054c2:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80054c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80054ca:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe fed1 	bl	8004276 <ld_clust>
 80054d4:	4602      	mov	r2, r0
 80054d6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80054da:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80054e4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80054e8:	331f      	adds	r3, #31
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	061a      	lsls	r2, r3, #24
 80054ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80054f2:	331e      	adds	r3, #30
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	041b      	lsls	r3, r3, #16
 80054f8:	431a      	orrs	r2, r3
 80054fa:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80054fe:	331d      	adds	r3, #29
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	4313      	orrs	r3, r2
 8005506:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 800550a:	321c      	adds	r2, #28
 800550c:	7812      	ldrb	r2, [r2, #0]
 800550e:	431a      	orrs	r2, r3
 8005510:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005514:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 800551e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005522:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2200      	movs	r2, #0
 800552a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 800552e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005532:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2200      	movs	r2, #0
 800553a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800553e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005542:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2200      	movs	r2, #0
 800554a:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800554e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8005552:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8005556:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800555a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800555e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 8005568:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800556c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005576:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800557a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800557e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8005588:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 800558c:	4618      	mov	r0, r3
 800558e:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b08a      	sub	sp, #40	@ 0x28
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
 80055a2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f7ff fd00 	bl	8004fb4 <validate>
 80055b4:	4603      	mov	r3, r0
 80055b6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <f_write+0x2c>
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	e192      	b.n	80058e8 <f_write+0x352>
	if (fp->err)							/* Check error */
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80055d2:	e189      	b.n	80058e8 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80055e2:	2307      	movs	r3, #7
 80055e4:	e180      	b.n	80058e8 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	441a      	add	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80055f6:	429a      	cmp	r2, r3
 80055f8:	f080 8158 	bcs.w	80058ac <f_write+0x316>
 80055fc:	2300      	movs	r3, #0
 80055fe:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005600:	e154      	b.n	80058ac <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8005608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560c:	2b00      	cmp	r3, #0
 800560e:	f040 8114 	bne.w	800583a <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8005618:	0a5b      	lsrs	r3, r3, #9
 800561a:	b2da      	uxtb	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005622:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8005626:	3b01      	subs	r3, #1
 8005628:	b2db      	uxtb	r3, r3
 800562a:	4013      	ands	r3, r2
 800562c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800562e:	7dbb      	ldrb	r3, [r7, #22]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d151      	bne.n	80056d8 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10f      	bne.n	800565e <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	2b00      	cmp	r3, #0
 800564a:	d121      	bne.n	8005690 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f7fe fb68 	bl	8003d2a <create_chain>
 800565a:	6278      	str	r0, [r7, #36]	@ 0x24
 800565c:	e018      	b.n	8005690 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800566e:	4619      	mov	r1, r3
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7fe fbf7 	bl	8003e64 <clmt_clust>
 8005676:	6278      	str	r0, [r7, #36]	@ 0x24
 8005678:	e00a      	b.n	8005690 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f7fe fb4e 	bl	8003d2a <create_chain>
 800568e:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 810f 	beq.w	80058b6 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	2b01      	cmp	r3, #1
 800569c:	d105      	bne.n	80056aa <f_write+0x114>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80056a6:	2302      	movs	r3, #2
 80056a8:	e11e      	b.n	80058e8 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b0:	d105      	bne.n	80056be <f_write+0x128>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80056ba:	2301      	movs	r3, #1
 80056bc:	e114      	b.n	80058e8 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d103      	bne.n	80056d8 <f_write+0x142>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80056de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01d      	beq.n	8005722 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80056ec:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80056f0:	68f9      	ldr	r1, [r7, #12]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80056f8:	2301      	movs	r3, #1
 80056fa:	f7fd fd45 	bl	8003188 <disk_write>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800570c:	2301      	movs	r3, #1
 800570e:	e0eb      	b.n	80058e8 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8005716:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800572e:	4619      	mov	r1, r3
 8005730:	4610      	mov	r0, r2
 8005732:	f7fe f8b7 	bl	80038a4 <clust2sect>
 8005736:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d105      	bne.n	800574a <f_write+0x1b4>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2202      	movs	r2, #2
 8005742:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8005746:	2302      	movs	r3, #2
 8005748:	e0ce      	b.n	80058e8 <f_write+0x352>
			sect += csect;
 800574a:	7dbb      	ldrb	r3, [r7, #22]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4413      	add	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	0a5b      	lsrs	r3, r3, #9
 8005756:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d048      	beq.n	80057f0 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800575e:	7dba      	ldrb	r2, [r7, #22]
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	4413      	add	r3, r2
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800576a:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800576e:	4293      	cmp	r3, r2
 8005770:	d908      	bls.n	8005784 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005778:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800577c:	461a      	mov	r2, r3
 800577e:	7dbb      	ldrb	r3, [r7, #22]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800578a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	69b9      	ldr	r1, [r7, #24]
 8005794:	f7fd fcf8 	bl	8003188 <disk_write>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80057a6:	2301      	movs	r3, #1
 80057a8:	e09e      	b.n	80058e8 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d916      	bls.n	80057e8 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	025b      	lsls	r3, r3, #9
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	4413      	add	r3, r2
 80057cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057d0:	4619      	mov	r1, r3
 80057d2:	f7fd fd17 	bl	8003204 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80057dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	025b      	lsls	r3, r3, #9
 80057ec:	623b      	str	r3, [r7, #32]
				continue;
 80057ee:	e047      	b.n	8005880 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d01a      	beq.n	8005832 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005808:	429a      	cmp	r2, r3
 800580a:	d212      	bcs.n	8005832 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005812:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005816:	68f9      	ldr	r1, [r7, #12]
 8005818:	2301      	movs	r3, #1
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	f7fd fc94 	bl	8003148 <disk_read>
 8005820:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800582e:	2301      	movs	r3, #1
 8005830:	e05a      	b.n	80058e8 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8005840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005844:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005848:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800584a:	6a3a      	ldr	r2, [r7, #32]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	429a      	cmp	r2, r3
 8005850:	d901      	bls.n	8005856 <f_write+0x2c0>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800585c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	69b9      	ldr	r1, [r7, #24]
 8005868:	4618      	mov	r0, r3
 800586a:	f7fd fccb 	bl	8003204 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8005874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005878:	b2da      	uxtb	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	4413      	add	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	441a      	add	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	441a      	add	r2, r3
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f47f aea7 	bne.w	8005602 <f_write+0x6c>
 80058b4:	e000      	b.n	80058b8 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80058b6:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d905      	bls.n	80058d4 <f_write+0x33e>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80058da:	f043 0320 	orr.w	r3, r3, #32
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3728      	adds	r7, #40	@ 0x28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fb5b 	bl	8004fb4 <validate>
 80058fe:	4603      	mov	r3, r0
 8005900:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005902:	7dfb      	ldrb	r3, [r7, #23]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f040 80a8 	bne.w	8005a5a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80a0 	beq.w	8005a5a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8005920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d019      	beq.n	800595c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800592e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800593a:	2301      	movs	r3, #1
 800593c:	f7fd fc24 	bl	8003188 <disk_write>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005946:	2301      	movs	r3, #1
 8005948:	e088      	b.n	8005a5c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8005950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005954:	b2da      	uxtb	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f7fd febf 	bl	80036ee <move_window>
 8005970:	4603      	mov	r3, r0
 8005972:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d16f      	bne.n	8005a5a <f_sync+0x16a>
				dir = fp->dir_ptr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005980:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	330b      	adds	r3, #11
 8005986:	781a      	ldrb	r2, [r3, #0]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	330b      	adds	r3, #11
 800598c:	f042 0220 	orr.w	r2, r2, #32
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	331c      	adds	r3, #28
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	0a1b      	lsrs	r3, r3, #8
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	331d      	adds	r3, #29
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80059bc:	0c1a      	lsrs	r2, r3, #16
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	331e      	adds	r3, #30
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80059cc:	0e1a      	lsrs	r2, r3, #24
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	331f      	adds	r3, #31
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80059dc:	4619      	mov	r1, r3
 80059de:	6938      	ldr	r0, [r7, #16]
 80059e0:	f7fe fc78 	bl	80042d4 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80059e4:	f7fc fe3c 	bl	8002660 <get_fattime>
 80059e8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	3316      	adds	r3, #22
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	0a1b      	lsrs	r3, r3, #8
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	3317      	adds	r3, #23
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	0c1a      	lsrs	r2, r3, #16
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	3318      	adds	r3, #24
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	0e1a      	lsrs	r2, r3, #24
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	3319      	adds	r3, #25
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	3312      	adds	r3, #18
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	3313      	adds	r3, #19
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8005a32:	f023 0320 	bic.w	r3, r3, #32
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fd fe7a 	bl	800374a <sync_fs>
 8005a56:	4603      	mov	r3, r0
 8005a58:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ff3f 	bl	80058f0 <f_sync>
 8005a72:	4603      	mov	r3, r0
 8005a74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d116      	bne.n	8005aaa <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff fa99 	bl	8004fb4 <validate>
 8005a82:	4603      	mov	r3, r0
 8005a84:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10e      	bne.n	8005aaa <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fd fd74 	bl	8003580 <dec_lock>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d103      	bne.n	8005aaa <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <f_opendir+0x14>
 8005ac4:	2309      	movs	r3, #9
 8005ac6:	e073      	b.n	8005bb0 <f_opendir+0xfc>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8005ac8:	4639      	mov	r1, r7
 8005aca:	f107 0318 	add.w	r3, r7, #24
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fe ffb1 	bl	8004a38 <find_volume>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8005ada:	7ffb      	ldrb	r3, [r7, #31]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d15f      	bne.n	8005ba0 <f_opendir+0xec>
		dp->fs = fs;
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
		INIT_BUF(*dp);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f107 020c 	add.w	r2, r7, #12
 8005aee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fe fe60 	bl	80047bc <follow_path>
 8005afc:	4603      	mov	r3, r0
 8005afe:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8005b00:	7ffb      	ldrb	r3, [r7, #31]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d147      	bne.n	8005b96 <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d017      	beq.n	8005b40 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005b16:	330b      	adds	r3, #11
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	f7fe fba2 	bl	8004276 <ld_clust>
 8005b32:	4602      	mov	r2, r0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8005b3a:	e001      	b.n	8005b40 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8005b3c:	2305      	movs	r3, #5
 8005b3e:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8005b40:	7ffb      	ldrb	r3, [r7, #31]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d127      	bne.n	8005b96 <f_opendir+0xe2>
				dp->id = fs->id;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8005b52:	2100      	movs	r1, #0
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7fe f9b9 	bl	8003ecc <dir_sdi>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8005b5e:	7ffb      	ldrb	r3, [r7, #31]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d118      	bne.n	8005b96 <f_opendir+0xe2>
					if (dp->sclust) {
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00f      	beq.n	8005b8e <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8005b6e:	2100      	movs	r1, #0
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7fd fc4f 	bl	8003414 <inc_lock>
 8005b76:	4602      	mov	r2, r0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
						if (!dp->lockid)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d106      	bne.n	8005b96 <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 8005b88:	2312      	movs	r3, #18
 8005b8a:	77fb      	strb	r3, [r7, #31]
 8005b8c:	e003      	b.n	8005b96 <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005b96:	7ffb      	ldrb	r3, [r7, #31]
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d101      	bne.n	8005ba0 <f_opendir+0xec>
 8005b9c:	2305      	movs	r3, #5
 8005b9e:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8005ba0:	7ffb      	ldrb	r3, [r7, #31]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <f_opendir+0xfa>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	LEAVE_FF(fs, res);
 8005bae:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3720      	adds	r7, #32
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff f9f7 	bl	8004fb4 <validate>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d113      	bne.n	8005bf8 <f_closedir+0x40>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d007      	beq.n	8005bea <f_closedir+0x32>
			res = dec_lock(dp->lockid);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fd fccd 	bl	8003580 <dec_lock>
 8005be6:	4603      	mov	r3, r0
 8005be8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d103      	bne.n	8005bf8 <f_closedir+0x40>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b086      	sub	sp, #24
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff f9d1 	bl	8004fb4 <validate>
 8005c12:	4603      	mov	r3, r0
 8005c14:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d133      	bne.n	8005c84 <f_readdir+0x82>
		if (!fno) {
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8005c22:	2100      	movs	r1, #0
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7fe f951 	bl	8003ecc <dir_sdi>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	75fb      	strb	r3, [r7, #23]
 8005c2e:	e029      	b.n	8005c84 <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f107 0208 	add.w	r2, r7, #8
 8005c36:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
			res = dir_read(dp, 0);			/* Read an item */
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7fe fbbe 	bl	80043be <dir_read>
 8005c42:	4603      	mov	r3, r0
 8005c44:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d105      	bne.n	8005c58 <f_readdir+0x56>
				dp->sect = 0;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				res = FR_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d112      	bne.n	8005c84 <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 8005c5e:	6839      	ldr	r1, [r7, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fe fc41 	bl	80044e8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8005c66:	2100      	movs	r1, #0
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7fe f9c3 	bl	8003ff4 <dir_next>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d105      	bne.n	8005c84 <f_readdir+0x82>
					dp->sect = 0;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
					res = FR_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <f_mkfs>:
FRESULT f_mkfs (
	const TCHAR* path,	/* Logical drive number */
	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au				/* Size of allocation unit in unit of byte or sector */
)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b098      	sub	sp, #96	@ 0x60
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	72fb      	strb	r3, [r7, #11]
	DWORD eb[2];
#endif


	/* Check mounted drive and clear work area */
	if (sfd > 1) return FR_INVALID_PARAMETER;
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d902      	bls.n	8005caa <f_mkfs+0x1a>
 8005ca4:	2313      	movs	r3, #19
 8005ca6:	f000 bc8c 	b.w	80065c2 <f_mkfs+0x932>
	vol = get_ldnumber(&path);
 8005caa:	f107 030c 	add.w	r3, r7, #12
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fe fe12 	bl	80048d8 <get_ldnumber>
 8005cb4:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 8005cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	da02      	bge.n	8005cc2 <f_mkfs+0x32>
 8005cbc:	230b      	movs	r3, #11
 8005cbe:	f000 bc80 	b.w	80065c2 <f_mkfs+0x932>
	fs = FatFs[vol];
 8005cc2:	4aa5      	ldr	r2, [pc, #660]	@ (8005f58 <f_mkfs+0x2c8>)
 8005cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cca:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;
 8005ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d102      	bne.n	8005cd8 <f_mkfs+0x48>
 8005cd2:	230c      	movs	r3, #12
 8005cd4:	f000 bc75 	b.w	80065c2 <f_mkfs+0x932>
	fs->fs_type = 0;
 8005cd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	pdrv = LD2PD(vol);	/* Physical drive */
 8005ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ce2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

	/* Get disk statics */
	stat = disk_initialize(pdrv);
 8005cec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fd fa03 	bl	80030fc <disk_initialize>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8005cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <f_mkfs+0x7e>
 8005d08:	2303      	movs	r3, #3
 8005d0a:	f000 bc5a 	b.w	80065c2 <f_mkfs+0x932>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8005d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d12:	f003 0304 	and.w	r3, r3, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <f_mkfs+0x90>
 8005d1a:	230a      	movs	r3, #10
 8005d1c:	f000 bc51 	b.w	80065c2 <f_mkfs+0x932>
		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
 8005d20:	f107 0214 	add.w	r2, r7, #20
 8005d24:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005d28:	2101      	movs	r1, #1
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fd fa4c 	bl	80031c8 <disk_ioctl>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <f_mkfs+0xac>
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d3a:	d802      	bhi.n	8005d42 <f_mkfs+0xb2>
			return FR_DISK_ERR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f000 bc40 	b.w	80065c2 <f_mkfs+0x932>
		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
 8005d42:	7afb      	ldrb	r3, [r7, #11]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <f_mkfs+0xbc>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e000      	b.n	8005d4e <f_mkfs+0xbe>
 8005d4c:	233f      	movs	r3, #63	@ 0x3f
 8005d4e:	65bb      	str	r3, [r7, #88]	@ 0x58
		n_vol -= b_vol;				/* Volume size */
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	617b      	str	r3, [r7, #20]
	}

	if (au & (au - 1)) au = 0;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	1e5a      	subs	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <f_mkfs+0xd8>
 8005d64:	2300      	movs	r3, #0
 8005d66:	607b      	str	r3, [r7, #4]
	if (!au) {						/* AU auto selection */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d118      	bne.n	8005da0 <f_mkfs+0x110>
		vs = n_vol / (2000 / (SS(fs) / 512));
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	4a7a      	ldr	r2, [pc, #488]	@ (8005f5c <f_mkfs+0x2cc>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	09db      	lsrs	r3, r3, #7
 8005d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for (i = 0; vs < vst[i]; i++) ;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d7e:	e002      	b.n	8005d86 <f_mkfs+0xf6>
 8005d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d82:	3301      	adds	r3, #1
 8005d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d86:	4a76      	ldr	r2, [pc, #472]	@ (8005f60 <f_mkfs+0x2d0>)
 8005d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d3f4      	bcc.n	8005d80 <f_mkfs+0xf0>
		au = cst[i];
 8005d96:	4a73      	ldr	r2, [pc, #460]	@ (8005f64 <f_mkfs+0x2d4>)
 8005d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d9e:	607b      	str	r3, [r7, #4]
	}
	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005da6:	d302      	bcc.n	8005dae <f_mkfs+0x11e>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	0a5b      	lsrs	r3, r3, #9
 8005dac:	607b      	str	r3, [r7, #4]
	if (!au) au = 1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <f_mkfs+0x128>
 8005db4:	2301      	movs	r3, #1
 8005db6:	607b      	str	r3, [r7, #4]
	if (au > 128) au = 128;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b80      	cmp	r3, #128	@ 0x80
 8005dbc:	d901      	bls.n	8005dc2 <f_mkfs+0x132>
 8005dbe:	2380      	movs	r3, #128	@ 0x80
 8005dc0:	607b      	str	r3, [r7, #4]

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	62bb      	str	r3, [r7, #40]	@ 0x28
	fmt = FS_FAT12;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d902      	bls.n	8005de2 <f_mkfs+0x152>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 8005de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d902      	bls.n	8005df2 <f_mkfs+0x162>
 8005dec:	2303      	movs	r3, #3
 8005dee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
 8005df2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d10a      	bne.n	8005e10 <f_mkfs+0x180>
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 8005dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	f203 2307 	addw	r3, r3, #519	@ 0x207
 8005e02:	0a5b      	lsrs	r3, r3, #9
 8005e04:	63bb      	str	r3, [r7, #56]	@ 0x38
		n_rsv = 32;
 8005e06:	2320      	movs	r3, #32
 8005e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
		n_dir = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e0e:	e018      	b.n	8005e42 <f_mkfs+0x1b2>
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
 8005e10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d107      	bne.n	8005e28 <f_mkfs+0x198>
 8005e18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	4413      	add	r3, r2
 8005e20:	3301      	adds	r3, #1
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	3303      	adds	r3, #3
 8005e26:	e002      	b.n	8005e2e <f_mkfs+0x19e>
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	3302      	adds	r3, #2
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 8005e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e32:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8005e36:	0a5b      	lsrs	r3, r3, #9
 8005e38:	63bb      	str	r3, [r7, #56]	@ 0x38
		n_rsv = 1;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
 8005e3e:	2320      	movs	r3, #32
 8005e40:	637b      	str	r3, [r7, #52]	@ 0x34
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
 8005e42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e46:	4413      	add	r3, r2
 8005e48:	643b      	str	r3, [r7, #64]	@ 0x40
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 8005e4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	4413      	add	r3, r2
 8005e50:	627b      	str	r3, [r7, #36]	@ 0x24
	b_data = b_dir + n_dir;				/* Data area start sector */
 8005e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e56:	4413      	add	r3, r2
 8005e58:	623b      	str	r3, [r7, #32]
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8005e5a:	6a3a      	ldr	r2, [r7, #32]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	441a      	add	r2, r3
 8005e60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e62:	1ad2      	subs	r2, r2, r3
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d901      	bls.n	8005e6e <f_mkfs+0x1de>
 8005e6a:	230e      	movs	r3, #14
 8005e6c:	e3a9      	b.n	80065c2 <f_mkfs+0x932>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
 8005e6e:	f107 0218 	add.w	r2, r7, #24
 8005e72:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005e76:	2103      	movs	r1, #3
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fd f9a5 	bl	80031c8 <disk_ioctl>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <f_mkfs+0x202>
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <f_mkfs+0x202>
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e90:	d901      	bls.n	8005e96 <f_mkfs+0x206>
 8005e92:	2301      	movs	r3, #1
 8005e94:	61bb      	str	r3, [r7, #24]
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	1e5a      	subs	r2, r3, #1
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	425b      	negs	r3, r3
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
	n = (n - b_data) / N_FATS;
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 8005eae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d108      	bne.n	8005ec8 <f_mkfs+0x238>
		n_rsv += n;
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005eba:	4413      	add	r3, r2
 8005ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		b_fat += n;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ec2:	4413      	add	r3, r2
 8005ec4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ec6:	e003      	b.n	8005ed0 <f_mkfs+0x240>
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ecc:	4413      	add	r3, r2
 8005ece:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed4:	1ad2      	subs	r2, r2, r3
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed8:	1ad2      	subs	r2, r2, r3
 8005eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005edc:	1ad2      	subs	r2, r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 8005ee6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d104      	bne.n	8005ef8 <f_mkfs+0x268>
 8005eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d908      	bls.n	8005f0a <f_mkfs+0x27a>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 8005ef8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d106      	bne.n	8005f0e <f_mkfs+0x27e>
 8005f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f02:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d801      	bhi.n	8005f0e <f_mkfs+0x27e>
		return FR_MKFS_ABORTED;
 8005f0a:	230e      	movs	r3, #14
 8005f0c:	e359      	b.n	80065c2 <f_mkfs+0x932>

	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
 8005f0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d103      	bne.n	8005f1e <f_mkfs+0x28e>
		sys = 0x0C;		/* FAT32X */
 8005f16:	230c      	movs	r3, #12
 8005f18:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8005f1c:	e014      	b.n	8005f48 <f_mkfs+0x2b8>
	} else {
		if (fmt == FS_FAT12 && n_vol < 0x10000) {
 8005f1e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d107      	bne.n	8005f36 <f_mkfs+0x2a6>
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f2c:	d203      	bcs.n	8005f36 <f_mkfs+0x2a6>
			sys = 0x01;	/* FAT12(<65536) */
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8005f34:	e008      	b.n	8005f48 <f_mkfs+0x2b8>
		} else {
			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f3c:	d201      	bcs.n	8005f42 <f_mkfs+0x2b2>
 8005f3e:	2304      	movs	r3, #4
 8005f40:	e000      	b.n	8005f44 <f_mkfs+0x2b4>
 8005f42:	2306      	movs	r3, #6
 8005f44:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		tbl[4] = sys;
		if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
 8005f48:	7afb      	ldrb	r3, [r7, #11]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00c      	beq.n	8005f68 <f_mkfs+0x2d8>
			md = 0xF0;
 8005f4e:	23f0      	movs	r3, #240	@ 0xf0
 8005f50:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005f54:	e081      	b.n	800605a <f_mkfs+0x3ca>
 8005f56:	bf00      	nop
 8005f58:	200005b4 	.word	0x200005b4
 8005f5c:	10624dd3 	.word	0x10624dd3
 8005f60:	080074ac 	.word	0x080074ac
 8005f64:	080074c4 	.word	0x080074c4
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win.d8, 0, SS(fs));
 8005f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f6e:	2100      	movs	r1, #0
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fd f965 	bl	8003240 <mem_set>
			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
 8005f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f78:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005f7c:	61fb      	str	r3, [r7, #28]
			tbl[1] = 1;						/* Partition start head */
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	3301      	adds	r3, #1
 8005f82:	2201      	movs	r2, #1
 8005f84:	701a      	strb	r2, [r3, #0]
			tbl[2] = 1;						/* Partition start sector */
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	3302      	adds	r3, #2
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	701a      	strb	r2, [r3, #0]
			tbl[3] = 0;						/* Partition start cylinder */
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	3303      	adds	r3, #3
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]
			tbl[4] = sys;					/* System type */
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8005f9e:	701a      	strb	r2, [r3, #0]
			tbl[5] = 254;					/* Partition end head */
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	3305      	adds	r3, #5
 8005fa4:	22fe      	movs	r2, #254	@ 0xfe
 8005fa6:	701a      	strb	r2, [r3, #0]
			n = (b_vol + n_vol) / 63 / 255;
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fac:	441a      	add	r2, r3
 8005fae:	4b58      	ldr	r3, [pc, #352]	@ (8006110 <f_mkfs+0x480>)
 8005fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fb4:	1ad2      	subs	r2, r2, r3
 8005fb6:	0852      	lsrs	r2, r2, #1
 8005fb8:	4413      	add	r3, r2
 8005fba:	0b5b      	lsrs	r3, r3, #13
 8005fbc:	61bb      	str	r3, [r7, #24]
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	089b      	lsrs	r3, r3, #2
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	3306      	adds	r3, #6
 8005fc8:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
			tbl[7] = (BYTE)n;				/* End cylinder */
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	3307      	adds	r3, #7
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	223f      	movs	r2, #63	@ 0x3f
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	3309      	adds	r3, #9
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	330a      	adds	r3, #10
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	330b      	adds	r3, #11
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	330c      	adds	r3, #12
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	b29b      	uxth	r3, r3
 8006008:	0a1b      	lsrs	r3, r3, #8
 800600a:	b29a      	uxth	r2, r3
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	330d      	adds	r3, #13
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	0c1a      	lsrs	r2, r3, #16
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	330e      	adds	r3, #14
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	0e1a      	lsrs	r2, r3, #24
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	330f      	adds	r3, #15
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 800602c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800602e:	2255      	movs	r2, #85	@ 0x55
 8006030:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8006034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006036:	22aa      	movs	r2, #170	@ 0xaa
 8006038:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 800603c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800603e:	f897 004f 	ldrb.w	r0, [r7, #79]	@ 0x4f
 8006042:	2301      	movs	r3, #1
 8006044:	2200      	movs	r2, #0
 8006046:	f7fd f89f 	bl	8003188 <disk_write>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <f_mkfs+0x3c4>
				return FR_DISK_ERR;
 8006050:	2301      	movs	r3, #1
 8006052:	e2b6      	b.n	80065c2 <f_mkfs+0x932>
			md = 0xF8;
 8006054:	23f8      	movs	r3, #248	@ 0xf8
 8006056:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
		}
	}

	/* Create BPB in the VBR */
	tbl = fs->win.d8;							/* Clear sector */
 800605a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800605c:	61fb      	str	r3, [r7, #28]
	mem_set(tbl, 0, SS(fs));
 800605e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006062:	2100      	movs	r1, #0
 8006064:	69f8      	ldr	r0, [r7, #28]
 8006066:	f7fd f8eb 	bl	8003240 <mem_set>
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
 800606a:	220b      	movs	r2, #11
 800606c:	4929      	ldr	r1, [pc, #164]	@ (8006114 <f_mkfs+0x484>)
 800606e:	69f8      	ldr	r0, [r7, #28]
 8006070:	f7fd f8c8 	bl	8003204 <mem_cpy>
	i = SS(fs);								/* Sector size */
 8006074:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006078:	647b      	str	r3, [r7, #68]	@ 0x44
	ST_WORD(tbl + BPB_BytsPerSec, i);
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	330b      	adds	r3, #11
 800607e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006086:	b29b      	uxth	r3, r3
 8006088:	0a1b      	lsrs	r3, r3, #8
 800608a:	b29a      	uxth	r2, r3
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	330c      	adds	r3, #12
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	330d      	adds	r3, #13
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	330e      	adds	r3, #14
 80060a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	0a1b      	lsrs	r3, r3, #8
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	330f      	adds	r3, #15
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	701a      	strb	r2, [r3, #0]
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	3310      	adds	r3, #16
 80060bc:	2201      	movs	r2, #1
 80060be:	701a      	strb	r2, [r3, #0]
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 80060c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d101      	bne.n	80060cc <f_mkfs+0x43c>
 80060c8:	2300      	movs	r3, #0
 80060ca:	e001      	b.n	80060d0 <f_mkfs+0x440>
 80060cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060d0:	647b      	str	r3, [r7, #68]	@ 0x44
	ST_WORD(tbl + BPB_RootEntCnt, i);
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	3311      	adds	r3, #17
 80060d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060de:	b29b      	uxth	r3, r3
 80060e0:	0a1b      	lsrs	r3, r3, #8
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	3312      	adds	r3, #18
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
	if (n_vol < 0x10000) {					/* Number of total sectors */
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f2:	d211      	bcs.n	8006118 <f_mkfs+0x488>
		ST_WORD(tbl + BPB_TotSec16, n_vol);
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	3313      	adds	r3, #19
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	b29b      	uxth	r3, r3
 8006102:	0a1b      	lsrs	r3, r3, #8
 8006104:	b29a      	uxth	r2, r3
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	3314      	adds	r3, #20
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	e01c      	b.n	800614a <f_mkfs+0x4ba>
 8006110:	0515565b 	.word	0x0515565b
 8006114:	080073cc 	.word	0x080073cc
	} else {
		ST_DWORD(tbl + BPB_TotSec32, n_vol);
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	3320      	adds	r3, #32
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	b29b      	uxth	r3, r3
 8006126:	0a1b      	lsrs	r3, r3, #8
 8006128:	b29a      	uxth	r2, r3
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3321      	adds	r3, #33	@ 0x21
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	0c1a      	lsrs	r2, r3, #16
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	3322      	adds	r3, #34	@ 0x22
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	0e1a      	lsrs	r2, r3, #24
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	3323      	adds	r3, #35	@ 0x23
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	3315      	adds	r3, #21
 800614e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006152:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	3318      	adds	r3, #24
 8006158:	223f      	movs	r2, #63	@ 0x3f
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	3319      	adds	r3, #25
 8006160:	2200      	movs	r2, #0
 8006162:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	331a      	adds	r3, #26
 8006168:	22ff      	movs	r2, #255	@ 0xff
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	331b      	adds	r3, #27
 8006170:	2200      	movs	r2, #0
 8006172:	701a      	strb	r2, [r3, #0]
	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	331c      	adds	r3, #28
 8006178:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006180:	b29b      	uxth	r3, r3
 8006182:	0a1b      	lsrs	r3, r3, #8
 8006184:	b29a      	uxth	r2, r3
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	331d      	adds	r3, #29
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006190:	0c1a      	lsrs	r2, r3, #16
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	331e      	adds	r3, #30
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800619c:	0e1a      	lsrs	r2, r3, #24
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	331f      	adds	r3, #31
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]
	n = GET_FATTIME();						/* Use current time as VSN */
 80061a6:	f7fc fa5b 	bl	8002660 <get_fattime>
 80061aa:	4603      	mov	r3, r0
 80061ac:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {
 80061ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d161      	bne.n	800627a <f_mkfs+0x5ea>
		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	3343      	adds	r3, #67	@ 0x43
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	3344      	adds	r3, #68	@ 0x44
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	0c1a      	lsrs	r2, r3, #16
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3345      	adds	r3, #69	@ 0x45
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	0e1a      	lsrs	r2, r3, #24
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	3346      	adds	r3, #70	@ 0x46
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	3324      	adds	r3, #36	@ 0x24
 80061ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	0a1b      	lsrs	r3, r3, #8
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	3325      	adds	r3, #37	@ 0x25
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006204:	0c1a      	lsrs	r2, r3, #16
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	3326      	adds	r3, #38	@ 0x26
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006210:	0e1a      	lsrs	r2, r3, #24
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	3327      	adds	r3, #39	@ 0x27
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	332c      	adds	r3, #44	@ 0x2c
 800621e:	2202      	movs	r2, #2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	332d      	adds	r3, #45	@ 0x2d
 8006226:	2200      	movs	r2, #0
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	332e      	adds	r3, #46	@ 0x2e
 800622e:	2200      	movs	r2, #0
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	332f      	adds	r3, #47	@ 0x2f
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	3330      	adds	r3, #48	@ 0x30
 800623e:	2201      	movs	r2, #1
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	3331      	adds	r3, #49	@ 0x31
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	3332      	adds	r3, #50	@ 0x32
 800624e:	2206      	movs	r2, #6
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	3333      	adds	r3, #51	@ 0x33
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	3340      	adds	r3, #64	@ 0x40
 800625e:	2280      	movs	r2, #128	@ 0x80
 8006260:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	3342      	adds	r3, #66	@ 0x42
 8006266:	2229      	movs	r2, #41	@ 0x29
 8006268:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	3347      	adds	r3, #71	@ 0x47
 800626e:	2213      	movs	r2, #19
 8006270:	498b      	ldr	r1, [pc, #556]	@ (80064a0 <f_mkfs+0x810>)
 8006272:	4618      	mov	r0, r3
 8006274:	f7fc ffc6 	bl	8003204 <mem_cpy>
 8006278:	e034      	b.n	80062e4 <f_mkfs+0x654>
	} else {
		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	3327      	adds	r3, #39	@ 0x27
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	b29b      	uxth	r3, r3
 8006288:	0a1b      	lsrs	r3, r3, #8
 800628a:	b29a      	uxth	r2, r3
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	3328      	adds	r3, #40	@ 0x28
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	0c1a      	lsrs	r2, r3, #16
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	3329      	adds	r3, #41	@ 0x29
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	0e1a      	lsrs	r2, r3, #24
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	332a      	adds	r3, #42	@ 0x2a
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	3316      	adds	r3, #22
 80062b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	0a1b      	lsrs	r3, r3, #8
 80062bc:	b29a      	uxth	r2, r3
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	3317      	adds	r3, #23
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	3324      	adds	r3, #36	@ 0x24
 80062ca:	2280      	movs	r2, #128	@ 0x80
 80062cc:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	3326      	adds	r3, #38	@ 0x26
 80062d2:	2229      	movs	r2, #41	@ 0x29
 80062d4:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	332b      	adds	r3, #43	@ 0x2b
 80062da:	2213      	movs	r2, #19
 80062dc:	4971      	ldr	r1, [pc, #452]	@ (80064a4 <f_mkfs+0x814>)
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fc ff90 	bl	8003204 <mem_cpy>
	}
	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80062ea:	2255      	movs	r2, #85	@ 0x55
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80062f4:	22aa      	movs	r2, #170	@ 0xaa
 80062f6:	701a      	strb	r2, [r3, #0]
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
 80062f8:	f897 004f 	ldrb.w	r0, [r7, #79]	@ 0x4f
 80062fc:	2301      	movs	r3, #1
 80062fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006300:	69f9      	ldr	r1, [r7, #28]
 8006302:	f7fc ff41 	bl	8003188 <disk_write>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <f_mkfs+0x680>
		return FR_DISK_ERR;
 800630c:	2301      	movs	r3, #1
 800630e:	e158      	b.n	80065c2 <f_mkfs+0x932>
	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
 8006310:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006314:	2b03      	cmp	r3, #3
 8006316:	d107      	bne.n	8006328 <f_mkfs+0x698>
		disk_write(pdrv, tbl, b_vol + 6, 1);
 8006318:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800631a:	1d9a      	adds	r2, r3, #6
 800631c:	f897 004f 	ldrb.w	r0, [r7, #79]	@ 0x4f
 8006320:	2301      	movs	r3, #1
 8006322:	69f9      	ldr	r1, [r7, #28]
 8006324:	f7fc ff30 	bl	8003188 <disk_write>

	/* Initialize FAT area */
	wsect = b_fat;
 8006328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800632a:	64bb      	str	r3, [r7, #72]	@ 0x48
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 800632c:	2300      	movs	r3, #0
 800632e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006330:	e09b      	b.n	800646a <f_mkfs+0x7da>
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 8006332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006336:	2100      	movs	r1, #0
 8006338:	69f8      	ldr	r0, [r7, #28]
 800633a:	f7fc ff81 	bl	8003240 <mem_set>
		n = md;								/* Media descriptor byte */
 800633e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006342:	61bb      	str	r3, [r7, #24]
		if (fmt != FS_FAT32) {
 8006344:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006348:	2b03      	cmp	r3, #3
 800634a:	d023      	beq.n	8006394 <f_mkfs+0x704>
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 800634c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <f_mkfs+0x6c8>
 8006354:	4a54      	ldr	r2, [pc, #336]	@ (80064a8 <f_mkfs+0x818>)
 8006356:	e001      	b.n	800635c <f_mkfs+0x6cc>
 8006358:	f06f 02ff 	mvn.w	r2, #255	@ 0xff
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	4313      	orrs	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	b2da      	uxtb	r2, r3
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	b29b      	uxth	r3, r3
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	b29a      	uxth	r2, r3
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3301      	adds	r3, #1
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	0c1a      	lsrs	r2, r3, #16
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	3302      	adds	r3, #2
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	0e1a      	lsrs	r2, r3, #24
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	3303      	adds	r3, #3
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	e03b      	b.n	800640c <f_mkfs+0x77c>
		} else {
			n |= 0xFFFFFF00;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	f063 03ff 	orn	r3, r3, #255	@ 0xff
 800639a:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	0a1b      	lsrs	r3, r3, #8
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	3301      	adds	r3, #1
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	0c1a      	lsrs	r2, r3, #16
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	3302      	adds	r3, #2
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	701a      	strb	r2, [r3, #0]
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	0e1a      	lsrs	r2, r3, #24
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	3303      	adds	r3, #3
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	3304      	adds	r3, #4
 80063d0:	22ff      	movs	r2, #255	@ 0xff
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	3305      	adds	r3, #5
 80063d8:	22ff      	movs	r2, #255	@ 0xff
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	3306      	adds	r3, #6
 80063e0:	22ff      	movs	r2, #255	@ 0xff
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	3307      	adds	r3, #7
 80063e8:	22ff      	movs	r2, #255	@ 0xff
 80063ea:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3308      	adds	r3, #8
 80063f0:	22ff      	movs	r2, #255	@ 0xff
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	3309      	adds	r3, #9
 80063f8:	22ff      	movs	r2, #255	@ 0xff
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	330a      	adds	r3, #10
 8006400:	22ff      	movs	r2, #255	@ 0xff
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	330b      	adds	r3, #11
 8006408:	220f      	movs	r2, #15
 800640a:	701a      	strb	r2, [r3, #0]
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800640c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800640e:	1c53      	adds	r3, r2, #1
 8006410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006412:	f897 004f 	ldrb.w	r0, [r7, #79]	@ 0x4f
 8006416:	2301      	movs	r3, #1
 8006418:	69f9      	ldr	r1, [r7, #28]
 800641a:	f7fc feb5 	bl	8003188 <disk_write>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <f_mkfs+0x798>
			return FR_DISK_ERR;
 8006424:	2301      	movs	r3, #1
 8006426:	e0cc      	b.n	80065c2 <f_mkfs+0x932>
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
 8006428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800642c:	2100      	movs	r1, #0
 800642e:	69f8      	ldr	r0, [r7, #28]
 8006430:	f7fc ff06 	bl	8003240 <mem_set>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 8006434:	2301      	movs	r3, #1
 8006436:	61bb      	str	r3, [r7, #24]
 8006438:	e010      	b.n	800645c <f_mkfs+0x7cc>
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800643a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800643c:	1c53      	adds	r3, r2, #1
 800643e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006440:	f897 004f 	ldrb.w	r0, [r7, #79]	@ 0x4f
 8006444:	2301      	movs	r3, #1
 8006446:	69f9      	ldr	r1, [r7, #28]
 8006448:	f7fc fe9e 	bl	8003188 <disk_write>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <f_mkfs+0x7c6>
				return FR_DISK_ERR;
 8006452:	2301      	movs	r3, #1
 8006454:	e0b5      	b.n	80065c2 <f_mkfs+0x932>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	3301      	adds	r3, #1
 800645a:	61bb      	str	r3, [r7, #24]
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006460:	429a      	cmp	r2, r3
 8006462:	d8ea      	bhi.n	800643a <f_mkfs+0x7aa>
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 8006464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006466:	3301      	adds	r3, #1
 8006468:	647b      	str	r3, [r7, #68]	@ 0x44
 800646a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800646c:	2b00      	cmp	r3, #0
 800646e:	f43f af60 	beq.w	8006332 <f_mkfs+0x6a2>
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
 8006472:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006476:	2b03      	cmp	r3, #3
 8006478:	d101      	bne.n	800647e <f_mkfs+0x7ee>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	e000      	b.n	8006480 <f_mkfs+0x7f0>
 800647e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006480:	647b      	str	r3, [r7, #68]	@ 0x44
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 8006482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006484:	1c53      	adds	r3, r2, #1
 8006486:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006488:	f897 004f 	ldrb.w	r0, [r7, #79]	@ 0x4f
 800648c:	2301      	movs	r3, #1
 800648e:	69f9      	ldr	r1, [r7, #28]
 8006490:	f7fc fe7a 	bl	8003188 <disk_write>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d008      	beq.n	80064ac <f_mkfs+0x81c>
			return FR_DISK_ERR;
 800649a:	2301      	movs	r3, #1
 800649c:	e091      	b.n	80065c2 <f_mkfs+0x932>
 800649e:	bf00      	nop
 80064a0:	080073d8 	.word	0x080073d8
 80064a4:	080073ec 	.word	0x080073ec
 80064a8:	00ffff00 	.word	0x00ffff00
	} while (--i);
 80064ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ae:	3b01      	subs	r3, #1
 80064b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e4      	bne.n	8006482 <f_mkfs+0x7f2>
		disk_ioctl(pdrv, CTRL_TRIM, eb);
	}
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
 80064b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d173      	bne.n	80065a8 <f_mkfs+0x918>
		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	2252      	movs	r2, #82	@ 0x52
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	3301      	adds	r3, #1
 80064ca:	2252      	movs	r2, #82	@ 0x52
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	3302      	adds	r3, #2
 80064d2:	2261      	movs	r2, #97	@ 0x61
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	3303      	adds	r3, #3
 80064da:	2241      	movs	r2, #65	@ 0x41
 80064dc:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80064e4:	2272      	movs	r2, #114	@ 0x72
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f203 13e5 	addw	r3, r3, #485	@ 0x1e5
 80064ee:	2272      	movs	r2, #114	@ 0x72
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f503 73f3 	add.w	r3, r3, #486	@ 0x1e6
 80064f8:	2241      	movs	r2, #65	@ 0x41
 80064fa:	701a      	strb	r2, [r3, #0]
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f203 13e7 	addw	r3, r3, #487	@ 0x1e7
 8006502:	2261      	movs	r2, #97	@ 0x61
 8006504:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8006506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006508:	b2da      	uxtb	r2, r3
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006510:	3a01      	subs	r2, #1
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29b      	uxth	r3, r3
 800651e:	0a1b      	lsrs	r3, r3, #8
 8006520:	b29a      	uxth	r2, r3
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	f203 13e9 	addw	r3, r3, #489	@ 0x1e9
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	3b01      	subs	r3, #1
 8006530:	0c1a      	lsrs	r2, r3, #16
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f503 73f5 	add.w	r3, r3, #490	@ 0x1ea
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653e:	3b01      	subs	r3, #1
 8006540:	0e1a      	lsrs	r2, r3, #24
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f203 13eb 	addw	r3, r3, #491	@ 0x1eb
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006552:	2202      	movs	r2, #2
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	f203 13ed 	addw	r3, r3, #493	@ 0x1ed
 800655c:	2200      	movs	r2, #0
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f503 73f7 	add.w	r3, r3, #494	@ 0x1ee
 8006566:	2200      	movs	r2, #0
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	f203 13ef 	addw	r3, r3, #495	@ 0x1ef
 8006570:	2200      	movs	r2, #0
 8006572:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BS_55AA, 0xAA55);
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800657a:	2255      	movs	r2, #85	@ 0x55
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8006584:	22aa      	movs	r2, #170	@ 0xaa
 8006586:	701a      	strb	r2, [r3, #0]
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 8006588:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	f897 004f 	ldrb.w	r0, [r7, #79]	@ 0x4f
 8006590:	2301      	movs	r3, #1
 8006592:	69f9      	ldr	r1, [r7, #28]
 8006594:	f7fc fdf8 	bl	8003188 <disk_write>
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 8006598:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800659a:	1dda      	adds	r2, r3, #7
 800659c:	f897 004f 	ldrb.w	r0, [r7, #79]	@ 0x4f
 80065a0:	2301      	movs	r3, #1
 80065a2:	69f9      	ldr	r1, [r7, #28]
 80065a4:	f7fc fdf0 	bl	8003188 <disk_write>
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
 80065a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80065ac:	2200      	movs	r2, #0
 80065ae:	2100      	movs	r1, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fc fe09 	bl	80031c8 <disk_ioctl>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bf14      	ite	ne
 80065bc:	2301      	movne	r3, #1
 80065be:	2300      	moveq	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3760      	adds	r7, #96	@ 0x60
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop

080065cc <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	2b0a      	cmp	r3, #10
 80065dc:	d103      	bne.n	80065e6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80065de:	210d      	movs	r1, #13
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff fff3 	bl	80065cc <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	db25      	blt.n	800663e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	60fa      	str	r2, [r7, #12]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	4413      	add	r3, r2
 80065fc:	78fa      	ldrb	r2, [r7, #3]
 80065fe:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b3c      	cmp	r3, #60	@ 0x3c
 8006604:	dd12      	ble.n	800662c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f103 010c 	add.w	r1, r3, #12
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	f107 0308 	add.w	r3, r7, #8
 8006616:	f7fe ffbe 	bl	8005596 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	429a      	cmp	r2, r3
 8006620:	d101      	bne.n	8006626 <putc_bfd+0x5a>
 8006622:	2300      	movs	r3, #0
 8006624:	e001      	b.n	800662a <putc_bfd+0x5e>
 8006626:	f04f 33ff 	mov.w	r3, #4294967295
 800662a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	609a      	str	r2, [r3, #8]
 800663c:	e000      	b.n	8006640 <putc_bfd+0x74>
	if (i < 0) return;
 800663e:	bf00      	nop
}
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006646:	b590      	push	{r4, r7, lr}
 8006648:	b097      	sub	sp, #92	@ 0x5c
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800665c:	e009      	b.n	8006672 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	781a      	ldrb	r2, [r3, #0]
 8006666:	f107 030c 	add.w	r3, r7, #12
 800666a:	4611      	mov	r1, r2
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff ffad 	bl	80065cc <putc_bfd>
	while (*str)			/* Put the string */
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1f1      	bne.n	800665e <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	db15      	blt.n	80066ac <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	461c      	mov	r4, r3
 8006686:	f107 0208 	add.w	r2, r7, #8
 800668a:	f107 030c 	add.w	r3, r7, #12
 800668e:	f103 010c 	add.w	r1, r3, #12
 8006692:	4613      	mov	r3, r2
 8006694:	4622      	mov	r2, r4
 8006696:	f7fe ff7e 	bl	8005596 <f_write>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d105      	bne.n	80066ac <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d101      	bne.n	80066ac <f_puts+0x66>
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	e001      	b.n	80066b0 <f_puts+0x6a>
	return EOF;
 80066ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	375c      	adds	r7, #92	@ 0x5c
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd90      	pop	{r4, r7, pc}

080066b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	4613      	mov	r3, r2
 80066c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80066c6:	2301      	movs	r3, #1
 80066c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80066ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006748 <FATFS_LinkDriverEx+0x90>)
 80066d0:	7a5b      	ldrb	r3, [r3, #9]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d831      	bhi.n	800673c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80066d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006748 <FATFS_LinkDriverEx+0x90>)
 80066da:	7a5b      	ldrb	r3, [r3, #9]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	4b19      	ldr	r3, [pc, #100]	@ (8006748 <FATFS_LinkDriverEx+0x90>)
 80066e2:	2100      	movs	r1, #0
 80066e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80066e6:	4b18      	ldr	r3, [pc, #96]	@ (8006748 <FATFS_LinkDriverEx+0x90>)
 80066e8:	7a5b      	ldrb	r3, [r3, #9]
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	4a16      	ldr	r2, [pc, #88]	@ (8006748 <FATFS_LinkDriverEx+0x90>)
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80066f6:	4b14      	ldr	r3, [pc, #80]	@ (8006748 <FATFS_LinkDriverEx+0x90>)
 80066f8:	7a5b      	ldrb	r3, [r3, #9]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	4b12      	ldr	r3, [pc, #72]	@ (8006748 <FATFS_LinkDriverEx+0x90>)
 8006700:	4413      	add	r3, r2
 8006702:	79fa      	ldrb	r2, [r7, #7]
 8006704:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006706:	4b10      	ldr	r3, [pc, #64]	@ (8006748 <FATFS_LinkDriverEx+0x90>)
 8006708:	7a5b      	ldrb	r3, [r3, #9]
 800670a:	b2db      	uxtb	r3, r3
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	b2d1      	uxtb	r1, r2
 8006710:	4a0d      	ldr	r2, [pc, #52]	@ (8006748 <FATFS_LinkDriverEx+0x90>)
 8006712:	7251      	strb	r1, [r2, #9]
 8006714:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006716:	7dbb      	ldrb	r3, [r7, #22]
 8006718:	3330      	adds	r3, #48	@ 0x30
 800671a:	b2da      	uxtb	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	3301      	adds	r3, #1
 8006724:	223a      	movs	r2, #58	@ 0x3a
 8006726:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	3302      	adds	r3, #2
 800672c:	222f      	movs	r2, #47	@ 0x2f
 800672e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	3303      	adds	r3, #3
 8006734:	2200      	movs	r2, #0
 8006736:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006738:	2300      	movs	r3, #0
 800673a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800673c:	7dfb      	ldrb	r3, [r7, #23]
}
 800673e:	4618      	mov	r0, r3
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr
 8006748:	200005d4 	.word	0x200005d4

0800674c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006756:	2200      	movs	r2, #0
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff ffac 	bl	80066b8 <FATFS_LinkDriverEx>
 8006760:	4603      	mov	r3, r0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <siprintf>:
 800676c:	b40e      	push	{r1, r2, r3}
 800676e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006772:	b510      	push	{r4, lr}
 8006774:	2400      	movs	r4, #0
 8006776:	b09d      	sub	sp, #116	@ 0x74
 8006778:	ab1f      	add	r3, sp, #124	@ 0x7c
 800677a:	9002      	str	r0, [sp, #8]
 800677c:	9006      	str	r0, [sp, #24]
 800677e:	9107      	str	r1, [sp, #28]
 8006780:	9104      	str	r1, [sp, #16]
 8006782:	4809      	ldr	r0, [pc, #36]	@ (80067a8 <siprintf+0x3c>)
 8006784:	4909      	ldr	r1, [pc, #36]	@ (80067ac <siprintf+0x40>)
 8006786:	f853 2b04 	ldr.w	r2, [r3], #4
 800678a:	9105      	str	r1, [sp, #20]
 800678c:	6800      	ldr	r0, [r0, #0]
 800678e:	a902      	add	r1, sp, #8
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006794:	f000 f99a 	bl	8006acc <_svfiprintf_r>
 8006798:	9b02      	ldr	r3, [sp, #8]
 800679a:	701c      	strb	r4, [r3, #0]
 800679c:	b01d      	add	sp, #116	@ 0x74
 800679e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a2:	b003      	add	sp, #12
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	20000024 	.word	0x20000024
 80067ac:	ffff0208 	.word	0xffff0208

080067b0 <memset>:
 80067b0:	4603      	mov	r3, r0
 80067b2:	4402      	add	r2, r0
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d100      	bne.n	80067ba <memset+0xa>
 80067b8:	4770      	bx	lr
 80067ba:	f803 1b01 	strb.w	r1, [r3], #1
 80067be:	e7f9      	b.n	80067b4 <memset+0x4>

080067c0 <__errno>:
 80067c0:	4b01      	ldr	r3, [pc, #4]	@ (80067c8 <__errno+0x8>)
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	20000024 	.word	0x20000024

080067cc <__libc_init_array>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	2600      	movs	r6, #0
 80067d0:	4d0c      	ldr	r5, [pc, #48]	@ (8006804 <__libc_init_array+0x38>)
 80067d2:	4c0d      	ldr	r4, [pc, #52]	@ (8006808 <__libc_init_array+0x3c>)
 80067d4:	1b64      	subs	r4, r4, r5
 80067d6:	10a4      	asrs	r4, r4, #2
 80067d8:	42a6      	cmp	r6, r4
 80067da:	d109      	bne.n	80067f0 <__libc_init_array+0x24>
 80067dc:	f000 fc7e 	bl	80070dc <_init>
 80067e0:	2600      	movs	r6, #0
 80067e2:	4d0a      	ldr	r5, [pc, #40]	@ (800680c <__libc_init_array+0x40>)
 80067e4:	4c0a      	ldr	r4, [pc, #40]	@ (8006810 <__libc_init_array+0x44>)
 80067e6:	1b64      	subs	r4, r4, r5
 80067e8:	10a4      	asrs	r4, r4, #2
 80067ea:	42a6      	cmp	r6, r4
 80067ec:	d105      	bne.n	80067fa <__libc_init_array+0x2e>
 80067ee:	bd70      	pop	{r4, r5, r6, pc}
 80067f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f4:	4798      	blx	r3
 80067f6:	3601      	adds	r6, #1
 80067f8:	e7ee      	b.n	80067d8 <__libc_init_array+0xc>
 80067fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fe:	4798      	blx	r3
 8006800:	3601      	adds	r6, #1
 8006802:	e7f2      	b.n	80067ea <__libc_init_array+0x1e>
 8006804:	08007518 	.word	0x08007518
 8006808:	08007518 	.word	0x08007518
 800680c:	08007518 	.word	0x08007518
 8006810:	0800751c 	.word	0x0800751c

08006814 <__retarget_lock_acquire_recursive>:
 8006814:	4770      	bx	lr

08006816 <__retarget_lock_release_recursive>:
 8006816:	4770      	bx	lr

08006818 <strcpy>:
 8006818:	4603      	mov	r3, r0
 800681a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800681e:	f803 2b01 	strb.w	r2, [r3], #1
 8006822:	2a00      	cmp	r2, #0
 8006824:	d1f9      	bne.n	800681a <strcpy+0x2>
 8006826:	4770      	bx	lr

08006828 <_free_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4605      	mov	r5, r0
 800682c:	2900      	cmp	r1, #0
 800682e:	d040      	beq.n	80068b2 <_free_r+0x8a>
 8006830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006834:	1f0c      	subs	r4, r1, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	bfb8      	it	lt
 800683a:	18e4      	addlt	r4, r4, r3
 800683c:	f000 f8de 	bl	80069fc <__malloc_lock>
 8006840:	4a1c      	ldr	r2, [pc, #112]	@ (80068b4 <_free_r+0x8c>)
 8006842:	6813      	ldr	r3, [r2, #0]
 8006844:	b933      	cbnz	r3, 8006854 <_free_r+0x2c>
 8006846:	6063      	str	r3, [r4, #4]
 8006848:	6014      	str	r4, [r2, #0]
 800684a:	4628      	mov	r0, r5
 800684c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006850:	f000 b8da 	b.w	8006a08 <__malloc_unlock>
 8006854:	42a3      	cmp	r3, r4
 8006856:	d908      	bls.n	800686a <_free_r+0x42>
 8006858:	6820      	ldr	r0, [r4, #0]
 800685a:	1821      	adds	r1, r4, r0
 800685c:	428b      	cmp	r3, r1
 800685e:	bf01      	itttt	eq
 8006860:	6819      	ldreq	r1, [r3, #0]
 8006862:	685b      	ldreq	r3, [r3, #4]
 8006864:	1809      	addeq	r1, r1, r0
 8006866:	6021      	streq	r1, [r4, #0]
 8006868:	e7ed      	b.n	8006846 <_free_r+0x1e>
 800686a:	461a      	mov	r2, r3
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	b10b      	cbz	r3, 8006874 <_free_r+0x4c>
 8006870:	42a3      	cmp	r3, r4
 8006872:	d9fa      	bls.n	800686a <_free_r+0x42>
 8006874:	6811      	ldr	r1, [r2, #0]
 8006876:	1850      	adds	r0, r2, r1
 8006878:	42a0      	cmp	r0, r4
 800687a:	d10b      	bne.n	8006894 <_free_r+0x6c>
 800687c:	6820      	ldr	r0, [r4, #0]
 800687e:	4401      	add	r1, r0
 8006880:	1850      	adds	r0, r2, r1
 8006882:	4283      	cmp	r3, r0
 8006884:	6011      	str	r1, [r2, #0]
 8006886:	d1e0      	bne.n	800684a <_free_r+0x22>
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	4408      	add	r0, r1
 800688e:	6010      	str	r0, [r2, #0]
 8006890:	6053      	str	r3, [r2, #4]
 8006892:	e7da      	b.n	800684a <_free_r+0x22>
 8006894:	d902      	bls.n	800689c <_free_r+0x74>
 8006896:	230c      	movs	r3, #12
 8006898:	602b      	str	r3, [r5, #0]
 800689a:	e7d6      	b.n	800684a <_free_r+0x22>
 800689c:	6820      	ldr	r0, [r4, #0]
 800689e:	1821      	adds	r1, r4, r0
 80068a0:	428b      	cmp	r3, r1
 80068a2:	bf01      	itttt	eq
 80068a4:	6819      	ldreq	r1, [r3, #0]
 80068a6:	685b      	ldreq	r3, [r3, #4]
 80068a8:	1809      	addeq	r1, r1, r0
 80068aa:	6021      	streq	r1, [r4, #0]
 80068ac:	6063      	str	r3, [r4, #4]
 80068ae:	6054      	str	r4, [r2, #4]
 80068b0:	e7cb      	b.n	800684a <_free_r+0x22>
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	20000724 	.word	0x20000724

080068b8 <sbrk_aligned>:
 80068b8:	b570      	push	{r4, r5, r6, lr}
 80068ba:	4e0f      	ldr	r6, [pc, #60]	@ (80068f8 <sbrk_aligned+0x40>)
 80068bc:	460c      	mov	r4, r1
 80068be:	6831      	ldr	r1, [r6, #0]
 80068c0:	4605      	mov	r5, r0
 80068c2:	b911      	cbnz	r1, 80068ca <sbrk_aligned+0x12>
 80068c4:	f000 fba8 	bl	8007018 <_sbrk_r>
 80068c8:	6030      	str	r0, [r6, #0]
 80068ca:	4621      	mov	r1, r4
 80068cc:	4628      	mov	r0, r5
 80068ce:	f000 fba3 	bl	8007018 <_sbrk_r>
 80068d2:	1c43      	adds	r3, r0, #1
 80068d4:	d103      	bne.n	80068de <sbrk_aligned+0x26>
 80068d6:	f04f 34ff 	mov.w	r4, #4294967295
 80068da:	4620      	mov	r0, r4
 80068dc:	bd70      	pop	{r4, r5, r6, pc}
 80068de:	1cc4      	adds	r4, r0, #3
 80068e0:	f024 0403 	bic.w	r4, r4, #3
 80068e4:	42a0      	cmp	r0, r4
 80068e6:	d0f8      	beq.n	80068da <sbrk_aligned+0x22>
 80068e8:	1a21      	subs	r1, r4, r0
 80068ea:	4628      	mov	r0, r5
 80068ec:	f000 fb94 	bl	8007018 <_sbrk_r>
 80068f0:	3001      	adds	r0, #1
 80068f2:	d1f2      	bne.n	80068da <sbrk_aligned+0x22>
 80068f4:	e7ef      	b.n	80068d6 <sbrk_aligned+0x1e>
 80068f6:	bf00      	nop
 80068f8:	20000720 	.word	0x20000720

080068fc <_malloc_r>:
 80068fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006900:	1ccd      	adds	r5, r1, #3
 8006902:	f025 0503 	bic.w	r5, r5, #3
 8006906:	3508      	adds	r5, #8
 8006908:	2d0c      	cmp	r5, #12
 800690a:	bf38      	it	cc
 800690c:	250c      	movcc	r5, #12
 800690e:	2d00      	cmp	r5, #0
 8006910:	4606      	mov	r6, r0
 8006912:	db01      	blt.n	8006918 <_malloc_r+0x1c>
 8006914:	42a9      	cmp	r1, r5
 8006916:	d904      	bls.n	8006922 <_malloc_r+0x26>
 8006918:	230c      	movs	r3, #12
 800691a:	6033      	str	r3, [r6, #0]
 800691c:	2000      	movs	r0, #0
 800691e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006922:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069f8 <_malloc_r+0xfc>
 8006926:	f000 f869 	bl	80069fc <__malloc_lock>
 800692a:	f8d8 3000 	ldr.w	r3, [r8]
 800692e:	461c      	mov	r4, r3
 8006930:	bb44      	cbnz	r4, 8006984 <_malloc_r+0x88>
 8006932:	4629      	mov	r1, r5
 8006934:	4630      	mov	r0, r6
 8006936:	f7ff ffbf 	bl	80068b8 <sbrk_aligned>
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	4604      	mov	r4, r0
 800693e:	d158      	bne.n	80069f2 <_malloc_r+0xf6>
 8006940:	f8d8 4000 	ldr.w	r4, [r8]
 8006944:	4627      	mov	r7, r4
 8006946:	2f00      	cmp	r7, #0
 8006948:	d143      	bne.n	80069d2 <_malloc_r+0xd6>
 800694a:	2c00      	cmp	r4, #0
 800694c:	d04b      	beq.n	80069e6 <_malloc_r+0xea>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	4639      	mov	r1, r7
 8006952:	4630      	mov	r0, r6
 8006954:	eb04 0903 	add.w	r9, r4, r3
 8006958:	f000 fb5e 	bl	8007018 <_sbrk_r>
 800695c:	4581      	cmp	r9, r0
 800695e:	d142      	bne.n	80069e6 <_malloc_r+0xea>
 8006960:	6821      	ldr	r1, [r4, #0]
 8006962:	4630      	mov	r0, r6
 8006964:	1a6d      	subs	r5, r5, r1
 8006966:	4629      	mov	r1, r5
 8006968:	f7ff ffa6 	bl	80068b8 <sbrk_aligned>
 800696c:	3001      	adds	r0, #1
 800696e:	d03a      	beq.n	80069e6 <_malloc_r+0xea>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	442b      	add	r3, r5
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	f8d8 3000 	ldr.w	r3, [r8]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	bb62      	cbnz	r2, 80069d8 <_malloc_r+0xdc>
 800697e:	f8c8 7000 	str.w	r7, [r8]
 8006982:	e00f      	b.n	80069a4 <_malloc_r+0xa8>
 8006984:	6822      	ldr	r2, [r4, #0]
 8006986:	1b52      	subs	r2, r2, r5
 8006988:	d420      	bmi.n	80069cc <_malloc_r+0xd0>
 800698a:	2a0b      	cmp	r2, #11
 800698c:	d917      	bls.n	80069be <_malloc_r+0xc2>
 800698e:	1961      	adds	r1, r4, r5
 8006990:	42a3      	cmp	r3, r4
 8006992:	6025      	str	r5, [r4, #0]
 8006994:	bf18      	it	ne
 8006996:	6059      	strne	r1, [r3, #4]
 8006998:	6863      	ldr	r3, [r4, #4]
 800699a:	bf08      	it	eq
 800699c:	f8c8 1000 	streq.w	r1, [r8]
 80069a0:	5162      	str	r2, [r4, r5]
 80069a2:	604b      	str	r3, [r1, #4]
 80069a4:	4630      	mov	r0, r6
 80069a6:	f000 f82f 	bl	8006a08 <__malloc_unlock>
 80069aa:	f104 000b 	add.w	r0, r4, #11
 80069ae:	1d23      	adds	r3, r4, #4
 80069b0:	f020 0007 	bic.w	r0, r0, #7
 80069b4:	1ac2      	subs	r2, r0, r3
 80069b6:	bf1c      	itt	ne
 80069b8:	1a1b      	subne	r3, r3, r0
 80069ba:	50a3      	strne	r3, [r4, r2]
 80069bc:	e7af      	b.n	800691e <_malloc_r+0x22>
 80069be:	6862      	ldr	r2, [r4, #4]
 80069c0:	42a3      	cmp	r3, r4
 80069c2:	bf0c      	ite	eq
 80069c4:	f8c8 2000 	streq.w	r2, [r8]
 80069c8:	605a      	strne	r2, [r3, #4]
 80069ca:	e7eb      	b.n	80069a4 <_malloc_r+0xa8>
 80069cc:	4623      	mov	r3, r4
 80069ce:	6864      	ldr	r4, [r4, #4]
 80069d0:	e7ae      	b.n	8006930 <_malloc_r+0x34>
 80069d2:	463c      	mov	r4, r7
 80069d4:	687f      	ldr	r7, [r7, #4]
 80069d6:	e7b6      	b.n	8006946 <_malloc_r+0x4a>
 80069d8:	461a      	mov	r2, r3
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	42a3      	cmp	r3, r4
 80069de:	d1fb      	bne.n	80069d8 <_malloc_r+0xdc>
 80069e0:	2300      	movs	r3, #0
 80069e2:	6053      	str	r3, [r2, #4]
 80069e4:	e7de      	b.n	80069a4 <_malloc_r+0xa8>
 80069e6:	230c      	movs	r3, #12
 80069e8:	4630      	mov	r0, r6
 80069ea:	6033      	str	r3, [r6, #0]
 80069ec:	f000 f80c 	bl	8006a08 <__malloc_unlock>
 80069f0:	e794      	b.n	800691c <_malloc_r+0x20>
 80069f2:	6005      	str	r5, [r0, #0]
 80069f4:	e7d6      	b.n	80069a4 <_malloc_r+0xa8>
 80069f6:	bf00      	nop
 80069f8:	20000724 	.word	0x20000724

080069fc <__malloc_lock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	@ (8006a04 <__malloc_lock+0x8>)
 80069fe:	f7ff bf09 	b.w	8006814 <__retarget_lock_acquire_recursive>
 8006a02:	bf00      	nop
 8006a04:	2000071c 	.word	0x2000071c

08006a08 <__malloc_unlock>:
 8006a08:	4801      	ldr	r0, [pc, #4]	@ (8006a10 <__malloc_unlock+0x8>)
 8006a0a:	f7ff bf04 	b.w	8006816 <__retarget_lock_release_recursive>
 8006a0e:	bf00      	nop
 8006a10:	2000071c 	.word	0x2000071c

08006a14 <__ssputs_r>:
 8006a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a18:	461f      	mov	r7, r3
 8006a1a:	688e      	ldr	r6, [r1, #8]
 8006a1c:	4682      	mov	sl, r0
 8006a1e:	42be      	cmp	r6, r7
 8006a20:	460c      	mov	r4, r1
 8006a22:	4690      	mov	r8, r2
 8006a24:	680b      	ldr	r3, [r1, #0]
 8006a26:	d82d      	bhi.n	8006a84 <__ssputs_r+0x70>
 8006a28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a30:	d026      	beq.n	8006a80 <__ssputs_r+0x6c>
 8006a32:	6965      	ldr	r5, [r4, #20]
 8006a34:	6909      	ldr	r1, [r1, #16]
 8006a36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a3a:	eba3 0901 	sub.w	r9, r3, r1
 8006a3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a42:	1c7b      	adds	r3, r7, #1
 8006a44:	444b      	add	r3, r9
 8006a46:	106d      	asrs	r5, r5, #1
 8006a48:	429d      	cmp	r5, r3
 8006a4a:	bf38      	it	cc
 8006a4c:	461d      	movcc	r5, r3
 8006a4e:	0553      	lsls	r3, r2, #21
 8006a50:	d527      	bpl.n	8006aa2 <__ssputs_r+0x8e>
 8006a52:	4629      	mov	r1, r5
 8006a54:	f7ff ff52 	bl	80068fc <_malloc_r>
 8006a58:	4606      	mov	r6, r0
 8006a5a:	b360      	cbz	r0, 8006ab6 <__ssputs_r+0xa2>
 8006a5c:	464a      	mov	r2, r9
 8006a5e:	6921      	ldr	r1, [r4, #16]
 8006a60:	f000 faf8 	bl	8007054 <memcpy>
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a6e:	81a3      	strh	r3, [r4, #12]
 8006a70:	6126      	str	r6, [r4, #16]
 8006a72:	444e      	add	r6, r9
 8006a74:	6026      	str	r6, [r4, #0]
 8006a76:	463e      	mov	r6, r7
 8006a78:	6165      	str	r5, [r4, #20]
 8006a7a:	eba5 0509 	sub.w	r5, r5, r9
 8006a7e:	60a5      	str	r5, [r4, #8]
 8006a80:	42be      	cmp	r6, r7
 8006a82:	d900      	bls.n	8006a86 <__ssputs_r+0x72>
 8006a84:	463e      	mov	r6, r7
 8006a86:	4632      	mov	r2, r6
 8006a88:	4641      	mov	r1, r8
 8006a8a:	6820      	ldr	r0, [r4, #0]
 8006a8c:	f000 faaa 	bl	8006fe4 <memmove>
 8006a90:	2000      	movs	r0, #0
 8006a92:	68a3      	ldr	r3, [r4, #8]
 8006a94:	1b9b      	subs	r3, r3, r6
 8006a96:	60a3      	str	r3, [r4, #8]
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	4433      	add	r3, r6
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa2:	462a      	mov	r2, r5
 8006aa4:	f000 fae4 	bl	8007070 <_realloc_r>
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d1e0      	bne.n	8006a70 <__ssputs_r+0x5c>
 8006aae:	4650      	mov	r0, sl
 8006ab0:	6921      	ldr	r1, [r4, #16]
 8006ab2:	f7ff feb9 	bl	8006828 <_free_r>
 8006ab6:	230c      	movs	r3, #12
 8006ab8:	f8ca 3000 	str.w	r3, [sl]
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ac6:	81a3      	strh	r3, [r4, #12]
 8006ac8:	e7e9      	b.n	8006a9e <__ssputs_r+0x8a>
	...

08006acc <_svfiprintf_r>:
 8006acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad0:	4698      	mov	r8, r3
 8006ad2:	898b      	ldrh	r3, [r1, #12]
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	061b      	lsls	r3, r3, #24
 8006ad8:	460d      	mov	r5, r1
 8006ada:	4614      	mov	r4, r2
 8006adc:	b09d      	sub	sp, #116	@ 0x74
 8006ade:	d510      	bpl.n	8006b02 <_svfiprintf_r+0x36>
 8006ae0:	690b      	ldr	r3, [r1, #16]
 8006ae2:	b973      	cbnz	r3, 8006b02 <_svfiprintf_r+0x36>
 8006ae4:	2140      	movs	r1, #64	@ 0x40
 8006ae6:	f7ff ff09 	bl	80068fc <_malloc_r>
 8006aea:	6028      	str	r0, [r5, #0]
 8006aec:	6128      	str	r0, [r5, #16]
 8006aee:	b930      	cbnz	r0, 8006afe <_svfiprintf_r+0x32>
 8006af0:	230c      	movs	r3, #12
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	b01d      	add	sp, #116	@ 0x74
 8006afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afe:	2340      	movs	r3, #64	@ 0x40
 8006b00:	616b      	str	r3, [r5, #20]
 8006b02:	2300      	movs	r3, #0
 8006b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b06:	2320      	movs	r3, #32
 8006b08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b0c:	2330      	movs	r3, #48	@ 0x30
 8006b0e:	f04f 0901 	mov.w	r9, #1
 8006b12:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b16:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006cb0 <_svfiprintf_r+0x1e4>
 8006b1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b1e:	4623      	mov	r3, r4
 8006b20:	469a      	mov	sl, r3
 8006b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b26:	b10a      	cbz	r2, 8006b2c <_svfiprintf_r+0x60>
 8006b28:	2a25      	cmp	r2, #37	@ 0x25
 8006b2a:	d1f9      	bne.n	8006b20 <_svfiprintf_r+0x54>
 8006b2c:	ebba 0b04 	subs.w	fp, sl, r4
 8006b30:	d00b      	beq.n	8006b4a <_svfiprintf_r+0x7e>
 8006b32:	465b      	mov	r3, fp
 8006b34:	4622      	mov	r2, r4
 8006b36:	4629      	mov	r1, r5
 8006b38:	4638      	mov	r0, r7
 8006b3a:	f7ff ff6b 	bl	8006a14 <__ssputs_r>
 8006b3e:	3001      	adds	r0, #1
 8006b40:	f000 80a7 	beq.w	8006c92 <_svfiprintf_r+0x1c6>
 8006b44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b46:	445a      	add	r2, fp
 8006b48:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 809f 	beq.w	8006c92 <_svfiprintf_r+0x1c6>
 8006b54:	2300      	movs	r3, #0
 8006b56:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b5e:	f10a 0a01 	add.w	sl, sl, #1
 8006b62:	9304      	str	r3, [sp, #16]
 8006b64:	9307      	str	r3, [sp, #28]
 8006b66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b6c:	4654      	mov	r4, sl
 8006b6e:	2205      	movs	r2, #5
 8006b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b74:	484e      	ldr	r0, [pc, #312]	@ (8006cb0 <_svfiprintf_r+0x1e4>)
 8006b76:	f000 fa5f 	bl	8007038 <memchr>
 8006b7a:	9a04      	ldr	r2, [sp, #16]
 8006b7c:	b9d8      	cbnz	r0, 8006bb6 <_svfiprintf_r+0xea>
 8006b7e:	06d0      	lsls	r0, r2, #27
 8006b80:	bf44      	itt	mi
 8006b82:	2320      	movmi	r3, #32
 8006b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b88:	0711      	lsls	r1, r2, #28
 8006b8a:	bf44      	itt	mi
 8006b8c:	232b      	movmi	r3, #43	@ 0x2b
 8006b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b92:	f89a 3000 	ldrb.w	r3, [sl]
 8006b96:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b98:	d015      	beq.n	8006bc6 <_svfiprintf_r+0xfa>
 8006b9a:	4654      	mov	r4, sl
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f04f 0c0a 	mov.w	ip, #10
 8006ba2:	9a07      	ldr	r2, [sp, #28]
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006baa:	3b30      	subs	r3, #48	@ 0x30
 8006bac:	2b09      	cmp	r3, #9
 8006bae:	d94b      	bls.n	8006c48 <_svfiprintf_r+0x17c>
 8006bb0:	b1b0      	cbz	r0, 8006be0 <_svfiprintf_r+0x114>
 8006bb2:	9207      	str	r2, [sp, #28]
 8006bb4:	e014      	b.n	8006be0 <_svfiprintf_r+0x114>
 8006bb6:	eba0 0308 	sub.w	r3, r0, r8
 8006bba:	fa09 f303 	lsl.w	r3, r9, r3
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	46a2      	mov	sl, r4
 8006bc2:	9304      	str	r3, [sp, #16]
 8006bc4:	e7d2      	b.n	8006b6c <_svfiprintf_r+0xa0>
 8006bc6:	9b03      	ldr	r3, [sp, #12]
 8006bc8:	1d19      	adds	r1, r3, #4
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	9103      	str	r1, [sp, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	bfbb      	ittet	lt
 8006bd2:	425b      	neglt	r3, r3
 8006bd4:	f042 0202 	orrlt.w	r2, r2, #2
 8006bd8:	9307      	strge	r3, [sp, #28]
 8006bda:	9307      	strlt	r3, [sp, #28]
 8006bdc:	bfb8      	it	lt
 8006bde:	9204      	strlt	r2, [sp, #16]
 8006be0:	7823      	ldrb	r3, [r4, #0]
 8006be2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006be4:	d10a      	bne.n	8006bfc <_svfiprintf_r+0x130>
 8006be6:	7863      	ldrb	r3, [r4, #1]
 8006be8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bea:	d132      	bne.n	8006c52 <_svfiprintf_r+0x186>
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	3402      	adds	r4, #2
 8006bf0:	1d1a      	adds	r2, r3, #4
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	9203      	str	r2, [sp, #12]
 8006bf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bfa:	9305      	str	r3, [sp, #20]
 8006bfc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006cb4 <_svfiprintf_r+0x1e8>
 8006c00:	2203      	movs	r2, #3
 8006c02:	4650      	mov	r0, sl
 8006c04:	7821      	ldrb	r1, [r4, #0]
 8006c06:	f000 fa17 	bl	8007038 <memchr>
 8006c0a:	b138      	cbz	r0, 8006c1c <_svfiprintf_r+0x150>
 8006c0c:	2240      	movs	r2, #64	@ 0x40
 8006c0e:	9b04      	ldr	r3, [sp, #16]
 8006c10:	eba0 000a 	sub.w	r0, r0, sl
 8006c14:	4082      	lsls	r2, r0
 8006c16:	4313      	orrs	r3, r2
 8006c18:	3401      	adds	r4, #1
 8006c1a:	9304      	str	r3, [sp, #16]
 8006c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c20:	2206      	movs	r2, #6
 8006c22:	4825      	ldr	r0, [pc, #148]	@ (8006cb8 <_svfiprintf_r+0x1ec>)
 8006c24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c28:	f000 fa06 	bl	8007038 <memchr>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d036      	beq.n	8006c9e <_svfiprintf_r+0x1d2>
 8006c30:	4b22      	ldr	r3, [pc, #136]	@ (8006cbc <_svfiprintf_r+0x1f0>)
 8006c32:	bb1b      	cbnz	r3, 8006c7c <_svfiprintf_r+0x1b0>
 8006c34:	9b03      	ldr	r3, [sp, #12]
 8006c36:	3307      	adds	r3, #7
 8006c38:	f023 0307 	bic.w	r3, r3, #7
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	9303      	str	r3, [sp, #12]
 8006c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c42:	4433      	add	r3, r6
 8006c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c46:	e76a      	b.n	8006b1e <_svfiprintf_r+0x52>
 8006c48:	460c      	mov	r4, r1
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c50:	e7a8      	b.n	8006ba4 <_svfiprintf_r+0xd8>
 8006c52:	2300      	movs	r3, #0
 8006c54:	f04f 0c0a 	mov.w	ip, #10
 8006c58:	4619      	mov	r1, r3
 8006c5a:	3401      	adds	r4, #1
 8006c5c:	9305      	str	r3, [sp, #20]
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c64:	3a30      	subs	r2, #48	@ 0x30
 8006c66:	2a09      	cmp	r2, #9
 8006c68:	d903      	bls.n	8006c72 <_svfiprintf_r+0x1a6>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0c6      	beq.n	8006bfc <_svfiprintf_r+0x130>
 8006c6e:	9105      	str	r1, [sp, #20]
 8006c70:	e7c4      	b.n	8006bfc <_svfiprintf_r+0x130>
 8006c72:	4604      	mov	r4, r0
 8006c74:	2301      	movs	r3, #1
 8006c76:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c7a:	e7f0      	b.n	8006c5e <_svfiprintf_r+0x192>
 8006c7c:	ab03      	add	r3, sp, #12
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	462a      	mov	r2, r5
 8006c82:	4638      	mov	r0, r7
 8006c84:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc0 <_svfiprintf_r+0x1f4>)
 8006c86:	a904      	add	r1, sp, #16
 8006c88:	f3af 8000 	nop.w
 8006c8c:	1c42      	adds	r2, r0, #1
 8006c8e:	4606      	mov	r6, r0
 8006c90:	d1d6      	bne.n	8006c40 <_svfiprintf_r+0x174>
 8006c92:	89ab      	ldrh	r3, [r5, #12]
 8006c94:	065b      	lsls	r3, r3, #25
 8006c96:	f53f af2d 	bmi.w	8006af4 <_svfiprintf_r+0x28>
 8006c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c9c:	e72c      	b.n	8006af8 <_svfiprintf_r+0x2c>
 8006c9e:	ab03      	add	r3, sp, #12
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	462a      	mov	r2, r5
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	4b06      	ldr	r3, [pc, #24]	@ (8006cc0 <_svfiprintf_r+0x1f4>)
 8006ca8:	a904      	add	r1, sp, #16
 8006caa:	f000 f87d 	bl	8006da8 <_printf_i>
 8006cae:	e7ed      	b.n	8006c8c <_svfiprintf_r+0x1c0>
 8006cb0:	080074da 	.word	0x080074da
 8006cb4:	080074e0 	.word	0x080074e0
 8006cb8:	080074e4 	.word	0x080074e4
 8006cbc:	00000000 	.word	0x00000000
 8006cc0:	08006a15 	.word	0x08006a15

08006cc4 <_printf_common>:
 8006cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc8:	4616      	mov	r6, r2
 8006cca:	4698      	mov	r8, r3
 8006ccc:	688a      	ldr	r2, [r1, #8]
 8006cce:	690b      	ldr	r3, [r1, #16]
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	bfb8      	it	lt
 8006cd6:	4613      	movlt	r3, r2
 8006cd8:	6033      	str	r3, [r6, #0]
 8006cda:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cde:	460c      	mov	r4, r1
 8006ce0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ce4:	b10a      	cbz	r2, 8006cea <_printf_common+0x26>
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	6033      	str	r3, [r6, #0]
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	0699      	lsls	r1, r3, #26
 8006cee:	bf42      	ittt	mi
 8006cf0:	6833      	ldrmi	r3, [r6, #0]
 8006cf2:	3302      	addmi	r3, #2
 8006cf4:	6033      	strmi	r3, [r6, #0]
 8006cf6:	6825      	ldr	r5, [r4, #0]
 8006cf8:	f015 0506 	ands.w	r5, r5, #6
 8006cfc:	d106      	bne.n	8006d0c <_printf_common+0x48>
 8006cfe:	f104 0a19 	add.w	sl, r4, #25
 8006d02:	68e3      	ldr	r3, [r4, #12]
 8006d04:	6832      	ldr	r2, [r6, #0]
 8006d06:	1a9b      	subs	r3, r3, r2
 8006d08:	42ab      	cmp	r3, r5
 8006d0a:	dc2b      	bgt.n	8006d64 <_printf_common+0xa0>
 8006d0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d10:	6822      	ldr	r2, [r4, #0]
 8006d12:	3b00      	subs	r3, #0
 8006d14:	bf18      	it	ne
 8006d16:	2301      	movne	r3, #1
 8006d18:	0692      	lsls	r2, r2, #26
 8006d1a:	d430      	bmi.n	8006d7e <_printf_common+0xba>
 8006d1c:	4641      	mov	r1, r8
 8006d1e:	4638      	mov	r0, r7
 8006d20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d24:	47c8      	blx	r9
 8006d26:	3001      	adds	r0, #1
 8006d28:	d023      	beq.n	8006d72 <_printf_common+0xae>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	6922      	ldr	r2, [r4, #16]
 8006d2e:	f003 0306 	and.w	r3, r3, #6
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	bf14      	ite	ne
 8006d36:	2500      	movne	r5, #0
 8006d38:	6833      	ldreq	r3, [r6, #0]
 8006d3a:	f04f 0600 	mov.w	r6, #0
 8006d3e:	bf08      	it	eq
 8006d40:	68e5      	ldreq	r5, [r4, #12]
 8006d42:	f104 041a 	add.w	r4, r4, #26
 8006d46:	bf08      	it	eq
 8006d48:	1aed      	subeq	r5, r5, r3
 8006d4a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006d4e:	bf08      	it	eq
 8006d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d54:	4293      	cmp	r3, r2
 8006d56:	bfc4      	itt	gt
 8006d58:	1a9b      	subgt	r3, r3, r2
 8006d5a:	18ed      	addgt	r5, r5, r3
 8006d5c:	42b5      	cmp	r5, r6
 8006d5e:	d11a      	bne.n	8006d96 <_printf_common+0xd2>
 8006d60:	2000      	movs	r0, #0
 8006d62:	e008      	b.n	8006d76 <_printf_common+0xb2>
 8006d64:	2301      	movs	r3, #1
 8006d66:	4652      	mov	r2, sl
 8006d68:	4641      	mov	r1, r8
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	47c8      	blx	r9
 8006d6e:	3001      	adds	r0, #1
 8006d70:	d103      	bne.n	8006d7a <_printf_common+0xb6>
 8006d72:	f04f 30ff 	mov.w	r0, #4294967295
 8006d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7a:	3501      	adds	r5, #1
 8006d7c:	e7c1      	b.n	8006d02 <_printf_common+0x3e>
 8006d7e:	2030      	movs	r0, #48	@ 0x30
 8006d80:	18e1      	adds	r1, r4, r3
 8006d82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d8c:	4422      	add	r2, r4
 8006d8e:	3302      	adds	r3, #2
 8006d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d94:	e7c2      	b.n	8006d1c <_printf_common+0x58>
 8006d96:	2301      	movs	r3, #1
 8006d98:	4622      	mov	r2, r4
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	47c8      	blx	r9
 8006da0:	3001      	adds	r0, #1
 8006da2:	d0e6      	beq.n	8006d72 <_printf_common+0xae>
 8006da4:	3601      	adds	r6, #1
 8006da6:	e7d9      	b.n	8006d5c <_printf_common+0x98>

08006da8 <_printf_i>:
 8006da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dac:	7e0f      	ldrb	r7, [r1, #24]
 8006dae:	4691      	mov	r9, r2
 8006db0:	2f78      	cmp	r7, #120	@ 0x78
 8006db2:	4680      	mov	r8, r0
 8006db4:	460c      	mov	r4, r1
 8006db6:	469a      	mov	sl, r3
 8006db8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006dba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006dbe:	d807      	bhi.n	8006dd0 <_printf_i+0x28>
 8006dc0:	2f62      	cmp	r7, #98	@ 0x62
 8006dc2:	d80a      	bhi.n	8006dda <_printf_i+0x32>
 8006dc4:	2f00      	cmp	r7, #0
 8006dc6:	f000 80d1 	beq.w	8006f6c <_printf_i+0x1c4>
 8006dca:	2f58      	cmp	r7, #88	@ 0x58
 8006dcc:	f000 80b8 	beq.w	8006f40 <_printf_i+0x198>
 8006dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006dd8:	e03a      	b.n	8006e50 <_printf_i+0xa8>
 8006dda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dde:	2b15      	cmp	r3, #21
 8006de0:	d8f6      	bhi.n	8006dd0 <_printf_i+0x28>
 8006de2:	a101      	add	r1, pc, #4	@ (adr r1, 8006de8 <_printf_i+0x40>)
 8006de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006de8:	08006e41 	.word	0x08006e41
 8006dec:	08006e55 	.word	0x08006e55
 8006df0:	08006dd1 	.word	0x08006dd1
 8006df4:	08006dd1 	.word	0x08006dd1
 8006df8:	08006dd1 	.word	0x08006dd1
 8006dfc:	08006dd1 	.word	0x08006dd1
 8006e00:	08006e55 	.word	0x08006e55
 8006e04:	08006dd1 	.word	0x08006dd1
 8006e08:	08006dd1 	.word	0x08006dd1
 8006e0c:	08006dd1 	.word	0x08006dd1
 8006e10:	08006dd1 	.word	0x08006dd1
 8006e14:	08006f53 	.word	0x08006f53
 8006e18:	08006e7f 	.word	0x08006e7f
 8006e1c:	08006f0d 	.word	0x08006f0d
 8006e20:	08006dd1 	.word	0x08006dd1
 8006e24:	08006dd1 	.word	0x08006dd1
 8006e28:	08006f75 	.word	0x08006f75
 8006e2c:	08006dd1 	.word	0x08006dd1
 8006e30:	08006e7f 	.word	0x08006e7f
 8006e34:	08006dd1 	.word	0x08006dd1
 8006e38:	08006dd1 	.word	0x08006dd1
 8006e3c:	08006f15 	.word	0x08006f15
 8006e40:	6833      	ldr	r3, [r6, #0]
 8006e42:	1d1a      	adds	r2, r3, #4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6032      	str	r2, [r6, #0]
 8006e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e50:	2301      	movs	r3, #1
 8006e52:	e09c      	b.n	8006f8e <_printf_i+0x1e6>
 8006e54:	6833      	ldr	r3, [r6, #0]
 8006e56:	6820      	ldr	r0, [r4, #0]
 8006e58:	1d19      	adds	r1, r3, #4
 8006e5a:	6031      	str	r1, [r6, #0]
 8006e5c:	0606      	lsls	r6, r0, #24
 8006e5e:	d501      	bpl.n	8006e64 <_printf_i+0xbc>
 8006e60:	681d      	ldr	r5, [r3, #0]
 8006e62:	e003      	b.n	8006e6c <_printf_i+0xc4>
 8006e64:	0645      	lsls	r5, r0, #25
 8006e66:	d5fb      	bpl.n	8006e60 <_printf_i+0xb8>
 8006e68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e6c:	2d00      	cmp	r5, #0
 8006e6e:	da03      	bge.n	8006e78 <_printf_i+0xd0>
 8006e70:	232d      	movs	r3, #45	@ 0x2d
 8006e72:	426d      	negs	r5, r5
 8006e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e78:	230a      	movs	r3, #10
 8006e7a:	4858      	ldr	r0, [pc, #352]	@ (8006fdc <_printf_i+0x234>)
 8006e7c:	e011      	b.n	8006ea2 <_printf_i+0xfa>
 8006e7e:	6821      	ldr	r1, [r4, #0]
 8006e80:	6833      	ldr	r3, [r6, #0]
 8006e82:	0608      	lsls	r0, r1, #24
 8006e84:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e88:	d402      	bmi.n	8006e90 <_printf_i+0xe8>
 8006e8a:	0649      	lsls	r1, r1, #25
 8006e8c:	bf48      	it	mi
 8006e8e:	b2ad      	uxthmi	r5, r5
 8006e90:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e92:	6033      	str	r3, [r6, #0]
 8006e94:	bf14      	ite	ne
 8006e96:	230a      	movne	r3, #10
 8006e98:	2308      	moveq	r3, #8
 8006e9a:	4850      	ldr	r0, [pc, #320]	@ (8006fdc <_printf_i+0x234>)
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ea2:	6866      	ldr	r6, [r4, #4]
 8006ea4:	2e00      	cmp	r6, #0
 8006ea6:	60a6      	str	r6, [r4, #8]
 8006ea8:	db05      	blt.n	8006eb6 <_printf_i+0x10e>
 8006eaa:	6821      	ldr	r1, [r4, #0]
 8006eac:	432e      	orrs	r6, r5
 8006eae:	f021 0104 	bic.w	r1, r1, #4
 8006eb2:	6021      	str	r1, [r4, #0]
 8006eb4:	d04b      	beq.n	8006f4e <_printf_i+0x1a6>
 8006eb6:	4616      	mov	r6, r2
 8006eb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ebc:	fb03 5711 	mls	r7, r3, r1, r5
 8006ec0:	5dc7      	ldrb	r7, [r0, r7]
 8006ec2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ec6:	462f      	mov	r7, r5
 8006ec8:	42bb      	cmp	r3, r7
 8006eca:	460d      	mov	r5, r1
 8006ecc:	d9f4      	bls.n	8006eb8 <_printf_i+0x110>
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	d10b      	bne.n	8006eea <_printf_i+0x142>
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	07df      	lsls	r7, r3, #31
 8006ed6:	d508      	bpl.n	8006eea <_printf_i+0x142>
 8006ed8:	6923      	ldr	r3, [r4, #16]
 8006eda:	6861      	ldr	r1, [r4, #4]
 8006edc:	4299      	cmp	r1, r3
 8006ede:	bfde      	ittt	le
 8006ee0:	2330      	movle	r3, #48	@ 0x30
 8006ee2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ee6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006eea:	1b92      	subs	r2, r2, r6
 8006eec:	6122      	str	r2, [r4, #16]
 8006eee:	464b      	mov	r3, r9
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	f8cd a000 	str.w	sl, [sp]
 8006ef8:	aa03      	add	r2, sp, #12
 8006efa:	f7ff fee3 	bl	8006cc4 <_printf_common>
 8006efe:	3001      	adds	r0, #1
 8006f00:	d14a      	bne.n	8006f98 <_printf_i+0x1f0>
 8006f02:	f04f 30ff 	mov.w	r0, #4294967295
 8006f06:	b004      	add	sp, #16
 8006f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	f043 0320 	orr.w	r3, r3, #32
 8006f12:	6023      	str	r3, [r4, #0]
 8006f14:	2778      	movs	r7, #120	@ 0x78
 8006f16:	4832      	ldr	r0, [pc, #200]	@ (8006fe0 <_printf_i+0x238>)
 8006f18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	6831      	ldr	r1, [r6, #0]
 8006f20:	061f      	lsls	r7, r3, #24
 8006f22:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f26:	d402      	bmi.n	8006f2e <_printf_i+0x186>
 8006f28:	065f      	lsls	r7, r3, #25
 8006f2a:	bf48      	it	mi
 8006f2c:	b2ad      	uxthmi	r5, r5
 8006f2e:	6031      	str	r1, [r6, #0]
 8006f30:	07d9      	lsls	r1, r3, #31
 8006f32:	bf44      	itt	mi
 8006f34:	f043 0320 	orrmi.w	r3, r3, #32
 8006f38:	6023      	strmi	r3, [r4, #0]
 8006f3a:	b11d      	cbz	r5, 8006f44 <_printf_i+0x19c>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	e7ad      	b.n	8006e9c <_printf_i+0xf4>
 8006f40:	4826      	ldr	r0, [pc, #152]	@ (8006fdc <_printf_i+0x234>)
 8006f42:	e7e9      	b.n	8006f18 <_printf_i+0x170>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	f023 0320 	bic.w	r3, r3, #32
 8006f4a:	6023      	str	r3, [r4, #0]
 8006f4c:	e7f6      	b.n	8006f3c <_printf_i+0x194>
 8006f4e:	4616      	mov	r6, r2
 8006f50:	e7bd      	b.n	8006ece <_printf_i+0x126>
 8006f52:	6833      	ldr	r3, [r6, #0]
 8006f54:	6825      	ldr	r5, [r4, #0]
 8006f56:	1d18      	adds	r0, r3, #4
 8006f58:	6961      	ldr	r1, [r4, #20]
 8006f5a:	6030      	str	r0, [r6, #0]
 8006f5c:	062e      	lsls	r6, r5, #24
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	d501      	bpl.n	8006f66 <_printf_i+0x1be>
 8006f62:	6019      	str	r1, [r3, #0]
 8006f64:	e002      	b.n	8006f6c <_printf_i+0x1c4>
 8006f66:	0668      	lsls	r0, r5, #25
 8006f68:	d5fb      	bpl.n	8006f62 <_printf_i+0x1ba>
 8006f6a:	8019      	strh	r1, [r3, #0]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4616      	mov	r6, r2
 8006f70:	6123      	str	r3, [r4, #16]
 8006f72:	e7bc      	b.n	8006eee <_printf_i+0x146>
 8006f74:	6833      	ldr	r3, [r6, #0]
 8006f76:	2100      	movs	r1, #0
 8006f78:	1d1a      	adds	r2, r3, #4
 8006f7a:	6032      	str	r2, [r6, #0]
 8006f7c:	681e      	ldr	r6, [r3, #0]
 8006f7e:	6862      	ldr	r2, [r4, #4]
 8006f80:	4630      	mov	r0, r6
 8006f82:	f000 f859 	bl	8007038 <memchr>
 8006f86:	b108      	cbz	r0, 8006f8c <_printf_i+0x1e4>
 8006f88:	1b80      	subs	r0, r0, r6
 8006f8a:	6060      	str	r0, [r4, #4]
 8006f8c:	6863      	ldr	r3, [r4, #4]
 8006f8e:	6123      	str	r3, [r4, #16]
 8006f90:	2300      	movs	r3, #0
 8006f92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f96:	e7aa      	b.n	8006eee <_printf_i+0x146>
 8006f98:	4632      	mov	r2, r6
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	6923      	ldr	r3, [r4, #16]
 8006fa0:	47d0      	blx	sl
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	d0ad      	beq.n	8006f02 <_printf_i+0x15a>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	079b      	lsls	r3, r3, #30
 8006faa:	d413      	bmi.n	8006fd4 <_printf_i+0x22c>
 8006fac:	68e0      	ldr	r0, [r4, #12]
 8006fae:	9b03      	ldr	r3, [sp, #12]
 8006fb0:	4298      	cmp	r0, r3
 8006fb2:	bfb8      	it	lt
 8006fb4:	4618      	movlt	r0, r3
 8006fb6:	e7a6      	b.n	8006f06 <_printf_i+0x15e>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	4632      	mov	r2, r6
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	47d0      	blx	sl
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	d09d      	beq.n	8006f02 <_printf_i+0x15a>
 8006fc6:	3501      	adds	r5, #1
 8006fc8:	68e3      	ldr	r3, [r4, #12]
 8006fca:	9903      	ldr	r1, [sp, #12]
 8006fcc:	1a5b      	subs	r3, r3, r1
 8006fce:	42ab      	cmp	r3, r5
 8006fd0:	dcf2      	bgt.n	8006fb8 <_printf_i+0x210>
 8006fd2:	e7eb      	b.n	8006fac <_printf_i+0x204>
 8006fd4:	2500      	movs	r5, #0
 8006fd6:	f104 0619 	add.w	r6, r4, #25
 8006fda:	e7f5      	b.n	8006fc8 <_printf_i+0x220>
 8006fdc:	080074eb 	.word	0x080074eb
 8006fe0:	080074fc 	.word	0x080074fc

08006fe4 <memmove>:
 8006fe4:	4288      	cmp	r0, r1
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	eb01 0402 	add.w	r4, r1, r2
 8006fec:	d902      	bls.n	8006ff4 <memmove+0x10>
 8006fee:	4284      	cmp	r4, r0
 8006ff0:	4623      	mov	r3, r4
 8006ff2:	d807      	bhi.n	8007004 <memmove+0x20>
 8006ff4:	1e43      	subs	r3, r0, #1
 8006ff6:	42a1      	cmp	r1, r4
 8006ff8:	d008      	beq.n	800700c <memmove+0x28>
 8006ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007002:	e7f8      	b.n	8006ff6 <memmove+0x12>
 8007004:	4601      	mov	r1, r0
 8007006:	4402      	add	r2, r0
 8007008:	428a      	cmp	r2, r1
 800700a:	d100      	bne.n	800700e <memmove+0x2a>
 800700c:	bd10      	pop	{r4, pc}
 800700e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007016:	e7f7      	b.n	8007008 <memmove+0x24>

08007018 <_sbrk_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	2300      	movs	r3, #0
 800701c:	4d05      	ldr	r5, [pc, #20]	@ (8007034 <_sbrk_r+0x1c>)
 800701e:	4604      	mov	r4, r0
 8007020:	4608      	mov	r0, r1
 8007022:	602b      	str	r3, [r5, #0]
 8007024:	f7f9 fccc 	bl	80009c0 <_sbrk>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_sbrk_r+0x1a>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_sbrk_r+0x1a>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	20000718 	.word	0x20000718

08007038 <memchr>:
 8007038:	4603      	mov	r3, r0
 800703a:	b510      	push	{r4, lr}
 800703c:	b2c9      	uxtb	r1, r1
 800703e:	4402      	add	r2, r0
 8007040:	4293      	cmp	r3, r2
 8007042:	4618      	mov	r0, r3
 8007044:	d101      	bne.n	800704a <memchr+0x12>
 8007046:	2000      	movs	r0, #0
 8007048:	e003      	b.n	8007052 <memchr+0x1a>
 800704a:	7804      	ldrb	r4, [r0, #0]
 800704c:	3301      	adds	r3, #1
 800704e:	428c      	cmp	r4, r1
 8007050:	d1f6      	bne.n	8007040 <memchr+0x8>
 8007052:	bd10      	pop	{r4, pc}

08007054 <memcpy>:
 8007054:	440a      	add	r2, r1
 8007056:	4291      	cmp	r1, r2
 8007058:	f100 33ff 	add.w	r3, r0, #4294967295
 800705c:	d100      	bne.n	8007060 <memcpy+0xc>
 800705e:	4770      	bx	lr
 8007060:	b510      	push	{r4, lr}
 8007062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007066:	4291      	cmp	r1, r2
 8007068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800706c:	d1f9      	bne.n	8007062 <memcpy+0xe>
 800706e:	bd10      	pop	{r4, pc}

08007070 <_realloc_r>:
 8007070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007074:	4607      	mov	r7, r0
 8007076:	4614      	mov	r4, r2
 8007078:	460d      	mov	r5, r1
 800707a:	b921      	cbnz	r1, 8007086 <_realloc_r+0x16>
 800707c:	4611      	mov	r1, r2
 800707e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007082:	f7ff bc3b 	b.w	80068fc <_malloc_r>
 8007086:	b92a      	cbnz	r2, 8007094 <_realloc_r+0x24>
 8007088:	f7ff fbce 	bl	8006828 <_free_r>
 800708c:	4625      	mov	r5, r4
 800708e:	4628      	mov	r0, r5
 8007090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007094:	f000 f81a 	bl	80070cc <_malloc_usable_size_r>
 8007098:	4284      	cmp	r4, r0
 800709a:	4606      	mov	r6, r0
 800709c:	d802      	bhi.n	80070a4 <_realloc_r+0x34>
 800709e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070a2:	d8f4      	bhi.n	800708e <_realloc_r+0x1e>
 80070a4:	4621      	mov	r1, r4
 80070a6:	4638      	mov	r0, r7
 80070a8:	f7ff fc28 	bl	80068fc <_malloc_r>
 80070ac:	4680      	mov	r8, r0
 80070ae:	b908      	cbnz	r0, 80070b4 <_realloc_r+0x44>
 80070b0:	4645      	mov	r5, r8
 80070b2:	e7ec      	b.n	800708e <_realloc_r+0x1e>
 80070b4:	42b4      	cmp	r4, r6
 80070b6:	4622      	mov	r2, r4
 80070b8:	4629      	mov	r1, r5
 80070ba:	bf28      	it	cs
 80070bc:	4632      	movcs	r2, r6
 80070be:	f7ff ffc9 	bl	8007054 <memcpy>
 80070c2:	4629      	mov	r1, r5
 80070c4:	4638      	mov	r0, r7
 80070c6:	f7ff fbaf 	bl	8006828 <_free_r>
 80070ca:	e7f1      	b.n	80070b0 <_realloc_r+0x40>

080070cc <_malloc_usable_size_r>:
 80070cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070d0:	1f18      	subs	r0, r3, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	bfbc      	itt	lt
 80070d6:	580b      	ldrlt	r3, [r1, r0]
 80070d8:	18c0      	addlt	r0, r0, r3
 80070da:	4770      	bx	lr

080070dc <_init>:
 80070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070de:	bf00      	nop
 80070e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e2:	bc08      	pop	{r3}
 80070e4:	469e      	mov	lr, r3
 80070e6:	4770      	bx	lr

080070e8 <_fini>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	bf00      	nop
 80070ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ee:	bc08      	pop	{r3}
 80070f0:	469e      	mov	lr, r3
 80070f2:	4770      	bx	lr
